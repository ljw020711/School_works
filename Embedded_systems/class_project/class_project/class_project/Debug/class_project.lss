
class_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00002a60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000012b0  20000434  00002e94  00020434  2**2
                  ALLOC
  3 .stack        00002004  200016e4  00004144  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cd08  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  0002d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c01  00000000  00000000  0002d887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000140  00000000  00000000  0002e488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  0002e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010fdf  00000000  00000000  0002e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001a41  00000000  00000000  0003f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006fa85  00000000  00000000  00041110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000670  00000000  00000000  000b0b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 36 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .6. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	7d 0a 00 00 15 01 00 00 15 01 00 00 15 01 00 00     }...............
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 95 11 00 00 15 01 00 00     ................
      8c:	15 01 00 00 55 08 00 00 00 00 00 00 00 00 00 00     ....U...........
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000434 	.word	0x20000434
      d4:	00000000 	.word	0x00000000
      d8:	00002a60 	.word	0x00002a60

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000438 	.word	0x20000438
     108:	00002a60 	.word	0x00002a60
     10c:	00002a60 	.word	0x00002a60
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00002a60 	.word	0x00002a60
     1ac:	20000000 	.word	0x20000000
     1b0:	20000434 	.word	0x20000434
     1b4:	20000434 	.word	0x20000434
     1b8:	200016e4 	.word	0x200016e4
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	000026b9 	.word	0x000026b9
     1d8:	00000da5 	.word	0x00000da5

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
     1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
     1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
     1e0:	601a      	str	r2, [r3, #0]
        return;
}
     1e2:	4770      	bx	lr
     1e4:	000f4240 	.word	0x000f4240
     1e8:	20000000 	.word	0x20000000

000001ec <print_decimal>:

void print_decimal(unsigned int data) {

	unsigned char conv_data;

	while (SERCOM0->USART.INTFLAG.bit.DRE != 1) ; // DRE (Data Register Empty) is set when DATA is empty
     1ec:	4b04      	ldr	r3, [pc, #16]	; (200 <print_decimal+0x14>)
     1ee:	7e1b      	ldrb	r3, [r3, #24]
     1f0:	07db      	lsls	r3, r3, #31
     1f2:	d5fb      	bpl.n	1ec <print_decimal>

	conv_data = (unsigned char) (data & 0x000000FF)  ; //
     1f4:	b2c0      	uxtb	r0, r0
	conv_data += 48 ; // 0, 1, ... 9
     1f6:	3030      	adds	r0, #48	; 0x30
	
	SERCOM0->USART.DATA.reg	= conv_data ; // transmit the first number (ASCII code)
     1f8:	b2c0      	uxtb	r0, r0
     1fa:	4b01      	ldr	r3, [pc, #4]	; (200 <print_decimal+0x14>)
     1fc:	8518      	strh	r0, [r3, #40]	; 0x28
	
};
     1fe:	4770      	bx	lr
     200:	42000800 	.word	0x42000800

00000204 <print_unsigned_int>:

void print_unsigned_int(unsigned data) {
     204:	b570      	push	{r4, r5, r6, lr}
     206:	0005      	movs	r5, r0

	unsigned size ;
	
	if      ( data >= 1000000000)                        size = 10;
     208:	4b5c      	ldr	r3, [pc, #368]	; (37c <print_unsigned_int+0x178>)
     20a:	4298      	cmp	r0, r3
     20c:	d829      	bhi.n	262 <print_unsigned_int+0x5e>
	else if ((data >= 100000000) && (data <= 999999999)) size = 9;
     20e:	4a5c      	ldr	r2, [pc, #368]	; (380 <print_unsigned_int+0x17c>)
     210:	4b5c      	ldr	r3, [pc, #368]	; (384 <print_unsigned_int+0x180>)
     212:	18c3      	adds	r3, r0, r3
     214:	4293      	cmp	r3, r2
     216:	d926      	bls.n	266 <print_unsigned_int+0x62>
	else if ((data >= 10000000)  && (data <= 99999999))  size = 8;
     218:	4a5b      	ldr	r2, [pc, #364]	; (388 <print_unsigned_int+0x184>)
     21a:	4b5c      	ldr	r3, [pc, #368]	; (38c <print_unsigned_int+0x188>)
     21c:	18c3      	adds	r3, r0, r3
     21e:	4293      	cmp	r3, r2
     220:	d923      	bls.n	26a <print_unsigned_int+0x66>
	else if ((data >= 1000000)   && (data <= 9999999))   size = 7;
     222:	4a5b      	ldr	r2, [pc, #364]	; (390 <print_unsigned_int+0x18c>)
     224:	4b5b      	ldr	r3, [pc, #364]	; (394 <print_unsigned_int+0x190>)
     226:	18c3      	adds	r3, r0, r3
     228:	4293      	cmp	r3, r2
     22a:	d920      	bls.n	26e <print_unsigned_int+0x6a>
	else if ((data >= 100000)    && (data <= 999999))    size = 6;
     22c:	4a5a      	ldr	r2, [pc, #360]	; (398 <print_unsigned_int+0x194>)
     22e:	4b5b      	ldr	r3, [pc, #364]	; (39c <print_unsigned_int+0x198>)
     230:	18c3      	adds	r3, r0, r3
     232:	4293      	cmp	r3, r2
     234:	d91d      	bls.n	272 <print_unsigned_int+0x6e>
	else if ((data >= 10000)     && (data <= 99999))     size = 5;
     236:	4a5a      	ldr	r2, [pc, #360]	; (3a0 <print_unsigned_int+0x19c>)
     238:	4b5a      	ldr	r3, [pc, #360]	; (3a4 <print_unsigned_int+0x1a0>)
     23a:	18c3      	adds	r3, r0, r3
     23c:	4293      	cmp	r3, r2
     23e:	d91a      	bls.n	276 <print_unsigned_int+0x72>
	else if ((data >= 1000)      && (data <= 9999))      size = 4;
     240:	4a59      	ldr	r2, [pc, #356]	; (3a8 <print_unsigned_int+0x1a4>)
     242:	4b5a      	ldr	r3, [pc, #360]	; (3ac <print_unsigned_int+0x1a8>)
     244:	18c3      	adds	r3, r0, r3
     246:	4293      	cmp	r3, r2
     248:	d917      	bls.n	27a <print_unsigned_int+0x76>
	else if ((data >= 100)       && (data <= 999))       size = 3;
     24a:	4a59      	ldr	r2, [pc, #356]	; (3b0 <print_unsigned_int+0x1ac>)
     24c:	0003      	movs	r3, r0
     24e:	3b64      	subs	r3, #100	; 0x64
     250:	4293      	cmp	r3, r2
     252:	d914      	bls.n	27e <print_unsigned_int+0x7a>
	else if ((data >= 10)        && (data <= 99))        size = 2;
     254:	335a      	adds	r3, #90	; 0x5a
     256:	2b59      	cmp	r3, #89	; 0x59
     258:	d913      	bls.n	282 <print_unsigned_int+0x7e>
	else if (                        data <= 9)          size = 1;
     25a:	2809      	cmp	r0, #9
     25c:	d81f      	bhi.n	29e <print_unsigned_int+0x9a>
     25e:	2401      	movs	r4, #1
     260:	e01d      	b.n	29e <print_unsigned_int+0x9a>
	if      ( data >= 1000000000)                        size = 10;
     262:	240a      	movs	r4, #10
     264:	e01b      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 100000000) && (data <= 999999999)) size = 9;
     266:	2409      	movs	r4, #9
     268:	e019      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 10000000)  && (data <= 99999999))  size = 8;
     26a:	2408      	movs	r4, #8
     26c:	e017      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 1000000)   && (data <= 9999999))   size = 7;
     26e:	2407      	movs	r4, #7
     270:	e015      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 100000)    && (data <= 999999))    size = 6;
     272:	2406      	movs	r4, #6
     274:	e013      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 10000)     && (data <= 99999))     size = 5;
     276:	2405      	movs	r4, #5
     278:	e011      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 1000)      && (data <= 9999))      size = 4;
     27a:	2404      	movs	r4, #4
     27c:	e00f      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 100)       && (data <= 999))       size = 3;
     27e:	2403      	movs	r4, #3
     280:	e00d      	b.n	29e <print_unsigned_int+0x9a>
	else if ((data >= 10)        && (data <= 99))        size = 2;
     282:	2402      	movs	r4, #2
     284:	e00b      	b.n	29e <print_unsigned_int+0x9a>

	while (size != 0) {
		switch (size) {
			case 10: print_decimal(data / 1000000000); data = data % 1000000000; break;
     286:	494b      	ldr	r1, [pc, #300]	; (3b4 <print_unsigned_int+0x1b0>)
     288:	0028      	movs	r0, r5
     28a:	4b4b      	ldr	r3, [pc, #300]	; (3b8 <print_unsigned_int+0x1b4>)
     28c:	4798      	blx	r3
     28e:	4b4b      	ldr	r3, [pc, #300]	; (3bc <print_unsigned_int+0x1b8>)
     290:	4798      	blx	r3
     292:	4948      	ldr	r1, [pc, #288]	; (3b4 <print_unsigned_int+0x1b0>)
     294:	0028      	movs	r0, r5
     296:	4b4a      	ldr	r3, [pc, #296]	; (3c0 <print_unsigned_int+0x1bc>)
     298:	4798      	blx	r3
     29a:	000d      	movs	r5, r1
			case 3:  print_decimal(data / 100);        data = data % 100;        break;
			case 2:  print_decimal(data / 10);         data = data % 10;         break;
			case 1:  print_decimal(data);                                        break;
			default:															 break;
		}
		size--;
     29c:	3c01      	subs	r4, #1
	while (size != 0) {
     29e:	2c00      	cmp	r4, #0
     2a0:	d06b      	beq.n	37a <print_unsigned_int+0x176>
		switch (size) {
     2a2:	2c0a      	cmp	r4, #10
     2a4:	d8fa      	bhi.n	29c <print_unsigned_int+0x98>
     2a6:	00a3      	lsls	r3, r4, #2
     2a8:	4a46      	ldr	r2, [pc, #280]	; (3c4 <print_unsigned_int+0x1c0>)
     2aa:	58d3      	ldr	r3, [r2, r3]
     2ac:	469f      	mov	pc, r3
			case 9:  print_decimal(data / 100000000);  data = data % 100000000;  break;
     2ae:	4946      	ldr	r1, [pc, #280]	; (3c8 <print_unsigned_int+0x1c4>)
     2b0:	0028      	movs	r0, r5
     2b2:	4b41      	ldr	r3, [pc, #260]	; (3b8 <print_unsigned_int+0x1b4>)
     2b4:	4798      	blx	r3
     2b6:	4b41      	ldr	r3, [pc, #260]	; (3bc <print_unsigned_int+0x1b8>)
     2b8:	4798      	blx	r3
     2ba:	4943      	ldr	r1, [pc, #268]	; (3c8 <print_unsigned_int+0x1c4>)
     2bc:	0028      	movs	r0, r5
     2be:	4b40      	ldr	r3, [pc, #256]	; (3c0 <print_unsigned_int+0x1bc>)
     2c0:	4798      	blx	r3
     2c2:	000d      	movs	r5, r1
     2c4:	e7ea      	b.n	29c <print_unsigned_int+0x98>
			case 8:  print_decimal(data / 10000000);   data = data % 10000000;   break;
     2c6:	4941      	ldr	r1, [pc, #260]	; (3cc <print_unsigned_int+0x1c8>)
     2c8:	0028      	movs	r0, r5
     2ca:	4b3b      	ldr	r3, [pc, #236]	; (3b8 <print_unsigned_int+0x1b4>)
     2cc:	4798      	blx	r3
     2ce:	4b3b      	ldr	r3, [pc, #236]	; (3bc <print_unsigned_int+0x1b8>)
     2d0:	4798      	blx	r3
     2d2:	493e      	ldr	r1, [pc, #248]	; (3cc <print_unsigned_int+0x1c8>)
     2d4:	0028      	movs	r0, r5
     2d6:	4b3a      	ldr	r3, [pc, #232]	; (3c0 <print_unsigned_int+0x1bc>)
     2d8:	4798      	blx	r3
     2da:	000d      	movs	r5, r1
     2dc:	e7de      	b.n	29c <print_unsigned_int+0x98>
			case 7:  print_decimal(data / 1000000);    data = data % 1000000;    break;
     2de:	493c      	ldr	r1, [pc, #240]	; (3d0 <print_unsigned_int+0x1cc>)
     2e0:	0028      	movs	r0, r5
     2e2:	4b35      	ldr	r3, [pc, #212]	; (3b8 <print_unsigned_int+0x1b4>)
     2e4:	4798      	blx	r3
     2e6:	4b35      	ldr	r3, [pc, #212]	; (3bc <print_unsigned_int+0x1b8>)
     2e8:	4798      	blx	r3
     2ea:	4939      	ldr	r1, [pc, #228]	; (3d0 <print_unsigned_int+0x1cc>)
     2ec:	0028      	movs	r0, r5
     2ee:	4b34      	ldr	r3, [pc, #208]	; (3c0 <print_unsigned_int+0x1bc>)
     2f0:	4798      	blx	r3
     2f2:	000d      	movs	r5, r1
     2f4:	e7d2      	b.n	29c <print_unsigned_int+0x98>
			case 6:  print_decimal(data / 100000);     data = data % 100000;     break;
     2f6:	4937      	ldr	r1, [pc, #220]	; (3d4 <print_unsigned_int+0x1d0>)
     2f8:	0028      	movs	r0, r5
     2fa:	4b2f      	ldr	r3, [pc, #188]	; (3b8 <print_unsigned_int+0x1b4>)
     2fc:	4798      	blx	r3
     2fe:	4b2f      	ldr	r3, [pc, #188]	; (3bc <print_unsigned_int+0x1b8>)
     300:	4798      	blx	r3
     302:	4934      	ldr	r1, [pc, #208]	; (3d4 <print_unsigned_int+0x1d0>)
     304:	0028      	movs	r0, r5
     306:	4b2e      	ldr	r3, [pc, #184]	; (3c0 <print_unsigned_int+0x1bc>)
     308:	4798      	blx	r3
     30a:	000d      	movs	r5, r1
     30c:	e7c6      	b.n	29c <print_unsigned_int+0x98>
			case 5:  print_decimal(data / 10000);      data = data % 10000;      break;
     30e:	4932      	ldr	r1, [pc, #200]	; (3d8 <print_unsigned_int+0x1d4>)
     310:	0028      	movs	r0, r5
     312:	4b29      	ldr	r3, [pc, #164]	; (3b8 <print_unsigned_int+0x1b4>)
     314:	4798      	blx	r3
     316:	4b29      	ldr	r3, [pc, #164]	; (3bc <print_unsigned_int+0x1b8>)
     318:	4798      	blx	r3
     31a:	492f      	ldr	r1, [pc, #188]	; (3d8 <print_unsigned_int+0x1d4>)
     31c:	0028      	movs	r0, r5
     31e:	4b28      	ldr	r3, [pc, #160]	; (3c0 <print_unsigned_int+0x1bc>)
     320:	4798      	blx	r3
     322:	000d      	movs	r5, r1
     324:	e7ba      	b.n	29c <print_unsigned_int+0x98>
			case 4:  print_decimal(data / 1000);       data = data % 1000;       break;
     326:	21fa      	movs	r1, #250	; 0xfa
     328:	0089      	lsls	r1, r1, #2
     32a:	0028      	movs	r0, r5
     32c:	4b22      	ldr	r3, [pc, #136]	; (3b8 <print_unsigned_int+0x1b4>)
     32e:	4798      	blx	r3
     330:	4b22      	ldr	r3, [pc, #136]	; (3bc <print_unsigned_int+0x1b8>)
     332:	4798      	blx	r3
     334:	21fa      	movs	r1, #250	; 0xfa
     336:	0089      	lsls	r1, r1, #2
     338:	0028      	movs	r0, r5
     33a:	4b21      	ldr	r3, [pc, #132]	; (3c0 <print_unsigned_int+0x1bc>)
     33c:	4798      	blx	r3
     33e:	000d      	movs	r5, r1
     340:	e7ac      	b.n	29c <print_unsigned_int+0x98>
			case 3:  print_decimal(data / 100);        data = data % 100;        break;
     342:	2164      	movs	r1, #100	; 0x64
     344:	0028      	movs	r0, r5
     346:	4b1c      	ldr	r3, [pc, #112]	; (3b8 <print_unsigned_int+0x1b4>)
     348:	4798      	blx	r3
     34a:	4b1c      	ldr	r3, [pc, #112]	; (3bc <print_unsigned_int+0x1b8>)
     34c:	4798      	blx	r3
     34e:	2164      	movs	r1, #100	; 0x64
     350:	0028      	movs	r0, r5
     352:	4b1b      	ldr	r3, [pc, #108]	; (3c0 <print_unsigned_int+0x1bc>)
     354:	4798      	blx	r3
     356:	000d      	movs	r5, r1
     358:	e7a0      	b.n	29c <print_unsigned_int+0x98>
			case 2:  print_decimal(data / 10);         data = data % 10;         break;
     35a:	210a      	movs	r1, #10
     35c:	0028      	movs	r0, r5
     35e:	4b16      	ldr	r3, [pc, #88]	; (3b8 <print_unsigned_int+0x1b4>)
     360:	4798      	blx	r3
     362:	4b16      	ldr	r3, [pc, #88]	; (3bc <print_unsigned_int+0x1b8>)
     364:	4798      	blx	r3
     366:	210a      	movs	r1, #10
     368:	0028      	movs	r0, r5
     36a:	4b15      	ldr	r3, [pc, #84]	; (3c0 <print_unsigned_int+0x1bc>)
     36c:	4798      	blx	r3
     36e:	000d      	movs	r5, r1
     370:	e794      	b.n	29c <print_unsigned_int+0x98>
			case 1:  print_decimal(data);                                        break;
     372:	0028      	movs	r0, r5
     374:	4b11      	ldr	r3, [pc, #68]	; (3bc <print_unsigned_int+0x1b8>)
     376:	4798      	blx	r3
     378:	e790      	b.n	29c <print_unsigned_int+0x98>
	}
};
     37a:	bd70      	pop	{r4, r5, r6, pc}
     37c:	3b9ac9ff 	.word	0x3b9ac9ff
     380:	35a4e8ff 	.word	0x35a4e8ff
     384:	fa0a1f00 	.word	0xfa0a1f00
     388:	055d4a7f 	.word	0x055d4a7f
     38c:	ff676980 	.word	0xff676980
     390:	0089543f 	.word	0x0089543f
     394:	fff0bdc0 	.word	0xfff0bdc0
     398:	000dbb9f 	.word	0x000dbb9f
     39c:	fffe7960 	.word	0xfffe7960
     3a0:	00015f8f 	.word	0x00015f8f
     3a4:	ffffd8f0 	.word	0xffffd8f0
     3a8:	00002327 	.word	0x00002327
     3ac:	fffffc18 	.word	0xfffffc18
     3b0:	00000383 	.word	0x00000383
     3b4:	3b9aca00 	.word	0x3b9aca00
     3b8:	000013d9 	.word	0x000013d9
     3bc:	000001ed 	.word	0x000001ed
     3c0:	000014e5 	.word	0x000014e5
     3c4:	00002858 	.word	0x00002858
     3c8:	05f5e100 	.word	0x05f5e100
     3cc:	00989680 	.word	0x00989680
     3d0:	000f4240 	.word	0x000f4240
     3d4:	000186a0 	.word	0x000186a0
     3d8:	00002710 	.word	0x00002710

000003dc <print_enter>:


void print_enter() {

	while (SERCOM0->USART.INTFLAG.bit.DRE != 1) ; // DRE (Data Register Empty) is set when DATA is empty
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <print_enter+0x20>)
     3de:	7e1b      	ldrb	r3, [r3, #24]
     3e0:	07db      	lsls	r3, r3, #31
     3e2:	d5fb      	bpl.n	3dc <print_enter>
	SERCOM0->USART.DATA.reg	= 10 ; // transmit LF (Line Feed)
     3e4:	220a      	movs	r2, #10
     3e6:	4b05      	ldr	r3, [pc, #20]	; (3fc <print_enter+0x20>)
     3e8:	851a      	strh	r2, [r3, #40]	; 0x28
	//
	while (SERCOM0->USART.INTFLAG.bit.DRE != 1) ;
     3ea:	4b04      	ldr	r3, [pc, #16]	; (3fc <print_enter+0x20>)
     3ec:	7e1b      	ldrb	r3, [r3, #24]
     3ee:	07db      	lsls	r3, r3, #31
     3f0:	d5fb      	bpl.n	3ea <print_enter+0xe>
	SERCOM0->USART.DATA.reg	= 13 ; // transmit CR (Carriage Return)
     3f2:	220d      	movs	r2, #13
     3f4:	4b01      	ldr	r3, [pc, #4]	; (3fc <print_enter+0x20>)
     3f6:	851a      	strh	r2, [r3, #40]	; 0x28
};
     3f8:	4770      	bx	lr
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	42000800 	.word	0x42000800

00000400 <print_string>:

void print_string(unsigned char * msg, unsigned int msg_size) {
     400:	b510      	push	{r4, lr}

	unsigned count;

	count = 0;
     402:	2200      	movs	r2, #0
	
	while (1) {
		if (SERCOM0->USART.INTFLAG.bit.DRE == 1) {
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <print_string+0x1c>)
     406:	7e1b      	ldrb	r3, [r3, #24]
     408:	07db      	lsls	r3, r3, #31
     40a:	d5fb      	bpl.n	404 <print_string+0x4>
			if (count == msg_size)  break;
     40c:	428a      	cmp	r2, r1
     40e:	d004      	beq.n	41a <print_string+0x1a>
			else {
				SERCOM0->USART.DATA.reg	= msg[count];
     410:	5c84      	ldrb	r4, [r0, r2]
     412:	4b02      	ldr	r3, [pc, #8]	; (41c <print_string+0x1c>)
     414:	851c      	strh	r4, [r3, #40]	; 0x28
				count++;
     416:	3201      	adds	r2, #1
     418:	e7f4      	b.n	404 <print_string+0x4>
			}
		}
	};
}
     41a:	bd10      	pop	{r4, pc}
     41c:	42000800 	.word	0x42000800

00000420 <GCLK_setup>:

   return (0);
}


void GCLK_setup() {
     420:	b530      	push	{r4, r5, lr}
   
   // OSC8M
   SYSCTRL->OSC8M.bit.PRESC = 0;  // prescalar to 1
     422:	4b25      	ldr	r3, [pc, #148]	; (4b8 <GCLK_setup+0x98>)
     424:	6a19      	ldr	r1, [r3, #32]
     426:	4a25      	ldr	r2, [pc, #148]	; (4bc <GCLK_setup+0x9c>)
     428:	400a      	ands	r2, r1
     42a:	621a      	str	r2, [r3, #32]
   SYSCTRL->OSC8M.bit.ONDEMAND = 0;   // oscillator always on
     42c:	6a19      	ldr	r1, [r3, #32]
     42e:	2280      	movs	r2, #128	; 0x80
     430:	4391      	bics	r1, r2
     432:	6219      	str	r1, [r3, #32]
   // * Generator #0 is feeding RTC
   // * Generator #0 is taking the clock source #6 (OSC8M: 8MHz clock input) as an input
   //
   // * EIC ID: #5
   //
   GCLK->GENCTRL.bit.ID = 0; // Generator #0
     434:	4b22      	ldr	r3, [pc, #136]	; (4c0 <GCLK_setup+0xa0>)
     436:	6859      	ldr	r1, [r3, #4]
     438:	220f      	movs	r2, #15
     43a:	4391      	bics	r1, r2
     43c:	6059      	str	r1, [r3, #4]
   GCLK->GENCTRL.bit.SRC = 6; // OSC8M
     43e:	6859      	ldr	r1, [r3, #4]
     440:	4a20      	ldr	r2, [pc, #128]	; (4c4 <GCLK_setup+0xa4>)
     442:	4011      	ands	r1, r2
     444:	22c0      	movs	r2, #192	; 0xc0
     446:	00d2      	lsls	r2, r2, #3
     448:	430a      	orrs	r2, r1
     44a:	605a      	str	r2, [r3, #4]
   GCLK->GENCTRL.bit.GENEN = 1; // Generator Enable
     44c:	6859      	ldr	r1, [r3, #4]
     44e:	2280      	movs	r2, #128	; 0x80
     450:	0252      	lsls	r2, r2, #9
     452:	430a      	orrs	r2, r1
     454:	605a      	str	r2, [r3, #4]
   
   GCLK->CLKCTRL.bit.ID = 4; // ID #4 (RTC)
     456:	885a      	ldrh	r2, [r3, #2]
     458:	203f      	movs	r0, #63	; 0x3f
     45a:	4382      	bics	r2, r0
     45c:	2104      	movs	r1, #4
     45e:	430a      	orrs	r2, r1
     460:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0; // Generator #0 selected for RTC
     462:	885a      	ldrh	r2, [r3, #2]
     464:	4c18      	ldr	r4, [pc, #96]	; (4c8 <GCLK_setup+0xa8>)
     466:	4022      	ands	r2, r4
     468:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1; // Now, clock is supplied to RTC!
     46a:	8859      	ldrh	r1, [r3, #2]
     46c:	2280      	movs	r2, #128	; 0x80
     46e:	01d2      	lsls	r2, r2, #7
     470:	4311      	orrs	r1, r2
     472:	8059      	strh	r1, [r3, #2]
   
   GCLK->CLKCTRL.bit.ID = 5; // ID #5 (EIC)
     474:	8859      	ldrh	r1, [r3, #2]
     476:	4381      	bics	r1, r0
     478:	2505      	movs	r5, #5
     47a:	4329      	orrs	r1, r5
     47c:	8059      	strh	r1, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0; // Generator #0 selected for RTC
     47e:	8859      	ldrh	r1, [r3, #2]
     480:	4021      	ands	r1, r4
     482:	8059      	strh	r1, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1; // Now, clock is supplied to RTC!
     484:	8859      	ldrh	r1, [r3, #2]
     486:	4311      	orrs	r1, r2
     488:	8059      	strh	r1, [r3, #2]
   
   GCLK->CLKCTRL.bit.ID = 0x14; // ID #0x14 (SERCOM0: USUART)
     48a:	8859      	ldrh	r1, [r3, #2]
     48c:	4381      	bics	r1, r0
     48e:	2514      	movs	r5, #20
     490:	4329      	orrs	r1, r5
     492:	8059      	strh	r1, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0; // Generator #2 selected for USART
     494:	8859      	ldrh	r1, [r3, #2]
     496:	4021      	ands	r1, r4
     498:	8059      	strh	r1, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1; // Now, clock is supplied to USART!
     49a:	8859      	ldrh	r1, [r3, #2]
     49c:	4311      	orrs	r1, r2
     49e:	8059      	strh	r1, [r3, #2]

   GCLK->CLKCTRL.bit.ID = 0x16; // ID #0x16 (SERCOM2: USUART)
     4a0:	8859      	ldrh	r1, [r3, #2]
     4a2:	4381      	bics	r1, r0
     4a4:	2016      	movs	r0, #22
     4a6:	4301      	orrs	r1, r0
     4a8:	8059      	strh	r1, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0; // Generator #2 selected for USART
     4aa:	8859      	ldrh	r1, [r3, #2]
     4ac:	400c      	ands	r4, r1
     4ae:	805c      	strh	r4, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1; // Now, clock is supplied to USART!
     4b0:	8859      	ldrh	r1, [r3, #2]
     4b2:	430a      	orrs	r2, r1
     4b4:	805a      	strh	r2, [r3, #2]

}
     4b6:	bd30      	pop	{r4, r5, pc}
     4b8:	40000800 	.word	0x40000800
     4bc:	fffffcff 	.word	0xfffffcff
     4c0:	40000c00 	.word	0x40000c00
     4c4:	ffffe0ff 	.word	0xffffe0ff
     4c8:	fffff0ff 	.word	0xfffff0ff

000004cc <PORT_setup>:

void PORT_setup() {
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   
   // PORT setup for PA18, PA19, PB08, PB09 for TC3, TC4 (motor driver)
   PORT->Group[0].PINCFG[18].reg = 0x41;      // peripheral mux: DRVSTR=1, PMUXEN = 1
     4ce:	4b28      	ldr	r3, [pc, #160]	; (570 <PORT_setup+0xa4>)
     4d0:	2141      	movs	r1, #65	; 0x41
     4d2:	2252      	movs	r2, #82	; 0x52
     4d4:	5499      	strb	r1, [r3, r2]
   PORT->Group[0].PINCFG[19].reg = 0x41;      // peripheral mux: DRVSTR=1, PMUXEN = 1
     4d6:	3201      	adds	r2, #1
     4d8:	5499      	strb	r1, [r3, r2]
   PORT->Group[0].PMUX[9].bit.PMUXE = 0x4;      // peripheral function E
     4da:	2539      	movs	r5, #57	; 0x39
     4dc:	5d5a      	ldrb	r2, [r3, r5]
     4de:	240f      	movs	r4, #15
     4e0:	43a2      	bics	r2, r4
     4e2:	2004      	movs	r0, #4
     4e4:	4302      	orrs	r2, r0
     4e6:	555a      	strb	r2, [r3, r5]
   PORT->Group[0].PMUX[9].bit.PMUXO = 0x4;      // peripheral function E
     4e8:	5d5e      	ldrb	r6, [r3, r5]
     4ea:	220f      	movs	r2, #15
     4ec:	4016      	ands	r6, r2
     4ee:	2740      	movs	r7, #64	; 0x40
     4f0:	433e      	orrs	r6, r7
     4f2:	555e      	strb	r6, [r3, r5]
   
   PORT->Group[1].PINCFG[8].reg = 0x41;      // peripheral mux: DRVSTR=1, PMUXEN = 1
     4f4:	358f      	adds	r5, #143	; 0x8f
     4f6:	5559      	strb	r1, [r3, r5]
   PORT->Group[1].PINCFG[9].reg = 0x41;      // peripheral mux: DRVSTR=1, PMUXEN = 1
     4f8:	3501      	adds	r5, #1
     4fa:	5559      	strb	r1, [r3, r5]
   PORT->Group[1].PMUX[4].bit.PMUXE = 0x4;   // peripheral function E
     4fc:	26b4      	movs	r6, #180	; 0xb4
     4fe:	5d9d      	ldrb	r5, [r3, r6]
     500:	43a5      	bics	r5, r4
     502:	4305      	orrs	r5, r0
     504:	559d      	strb	r5, [r3, r6]
   PORT->Group[1].PMUX[4].bit.PMUXO = 0x4;   // peripheral function E
     506:	5d98      	ldrb	r0, [r3, r6]
     508:	4010      	ands	r0, r2
     50a:	4338      	orrs	r0, r7
     50c:	5598      	strb	r0, [r3, r6]
   
   // PORT setup for PA04, PA05, PA08, PA09 for the direction of the motor
   PORT->Group[0].PINCFG[4].reg = 0x0;         // PMUXEN = 0, LEFT WHEEL (BACKWARD)
     50e:	2000      	movs	r0, #0
     510:	2544      	movs	r5, #68	; 0x44
     512:	5558      	strb	r0, [r3, r5]
   PORT->Group[0].PINCFG[5].reg = 0x0;         // PMUXEN = 0, LEFT WHEEL (FORWARD)
     514:	3501      	adds	r5, #1
     516:	5558      	strb	r0, [r3, r5]
   PORT->Group[0].PINCFG[8].reg = 0x0;         // PMUXEN = 0, RIGHT WHEEL (BACKWARD)
     518:	3503      	adds	r5, #3
     51a:	5558      	strb	r0, [r3, r5]
   PORT->Group[0].PINCFG[9].reg = 0x0;         // PMUXEN = 0, RIGHT WHEEL (FORWARD)
     51c:	3501      	adds	r5, #1
     51e:	5558      	strb	r0, [r3, r5]
   
   PORT->Group[0].DIRSET.reg = 0X3 << 8;      // use PA04, PA05, PA08, PA09 as output pin
     520:	20c0      	movs	r0, #192	; 0xc0
     522:	0080      	lsls	r0, r0, #2
     524:	6098      	str	r0, [r3, #8]
   PORT->Group[0].DIRSET.reg = 0X3 << 4;      // use PA04, PA05, PA08, PA09 as output pin
     526:	2030      	movs	r0, #48	; 0x30
     528:	6098      	str	r0, [r3, #8]
   PORT->Group[0].OUTSET.reg = 0X2 << 8;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     52a:	30d1      	adds	r0, #209	; 0xd1
     52c:	30ff      	adds	r0, #255	; 0xff
     52e:	6198      	str	r0, [r3, #24]
   PORT->Group[0].OUTSET.reg = 0X2 << 4;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     530:	38e1      	subs	r0, #225	; 0xe1
     532:	38ff      	subs	r0, #255	; 0xff
     534:	6198      	str	r0, [r3, #24]
   
   // PORT setup for PA10 and PA11 (USART): SERCOM2
   PORT->Group[0].PINCFG[10].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     536:	302a      	adds	r0, #42	; 0x2a
     538:	5419      	strb	r1, [r3, r0]
   PORT->Group[0].PINCFG[11].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     53a:	3001      	adds	r0, #1
     53c:	5419      	strb	r1, [r3, r0]

   PORT->Group[0].PMUX[5].bit.PMUXE = 0x03; // peripheral function D selected
     53e:	2735      	movs	r7, #53	; 0x35
     540:	5dd8      	ldrb	r0, [r3, r7]
     542:	43a0      	bics	r0, r4
     544:	2503      	movs	r5, #3
     546:	4328      	orrs	r0, r5
     548:	55d8      	strb	r0, [r3, r7]
   PORT->Group[0].PMUX[5].bit.PMUXO = 0x03; // peripheral function D selected
     54a:	5dd8      	ldrb	r0, [r3, r7]
     54c:	4010      	ands	r0, r2
     54e:	2630      	movs	r6, #48	; 0x30
     550:	4330      	orrs	r0, r6
     552:	55d8      	strb	r0, [r3, r7]
   
   // PORT setup for PA06 and PA07 (USART)
   PORT->Group[0].PINCFG[6].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     554:	2046      	movs	r0, #70	; 0x46
     556:	5419      	strb	r1, [r3, r0]
   PORT->Group[0].PINCFG[7].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     558:	3001      	adds	r0, #1
     55a:	5419      	strb	r1, [r3, r0]

   PORT->Group[0].PMUX[3].bit.PMUXE = 0x03; // peripheral function D selected
     55c:	3814      	subs	r0, #20
     55e:	5c19      	ldrb	r1, [r3, r0]
     560:	43a1      	bics	r1, r4
     562:	4329      	orrs	r1, r5
     564:	5419      	strb	r1, [r3, r0]
   PORT->Group[0].PMUX[3].bit.PMUXO = 0x03; // peripheral function D selected
     566:	5c19      	ldrb	r1, [r3, r0]
     568:	400a      	ands	r2, r1
     56a:	4332      	orrs	r2, r6
     56c:	541a      	strb	r2, [r3, r0]
}
     56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     570:	41004400 	.word	0x41004400

00000574 <RTC_setup>:
void RTC_setup() {
   //
   // RTC setup: MODE0 (32-bit counter) with COMPARE 0
   //

   RTC->MODE0.CTRL.bit.ENABLE = 0; // Disable first
     574:	4b11      	ldr	r3, [pc, #68]	; (5bc <RTC_setup+0x48>)
     576:	881a      	ldrh	r2, [r3, #0]
     578:	2102      	movs	r1, #2
     57a:	438a      	bics	r2, r1
     57c:	801a      	strh	r2, [r3, #0]
   RTC->MODE0.CTRL.bit.MODE = 0; // Mode 0
     57e:	881a      	ldrh	r2, [r3, #0]
     580:	310a      	adds	r1, #10
     582:	438a      	bics	r2, r1
     584:	801a      	strh	r2, [r3, #0]
   RTC->MODE0.CTRL.bit.MATCHCLR = 1; // match clear
     586:	881a      	ldrh	r2, [r3, #0]
     588:	2180      	movs	r1, #128	; 0x80
     58a:	430a      	orrs	r2, r1
     58c:	801a      	strh	r2, [r3, #0]
   
   RTC->MODE0.CTRL.bit.PRESCALER = 0x8;
     58e:	881a      	ldrh	r2, [r3, #0]
     590:	490b      	ldr	r1, [pc, #44]	; (5c0 <RTC_setup+0x4c>)
     592:	4011      	ands	r1, r2
     594:	2280      	movs	r2, #128	; 0x80
     596:	0112      	lsls	r2, r2, #4
     598:	430a      	orrs	r2, r1
     59a:	801a      	strh	r2, [r3, #0]
   RTC->MODE0.COMP->reg = 2000; // compare register to set up 10usec interval
     59c:	21fa      	movs	r1, #250	; 0xfa
     59e:	00c9      	lsls	r1, r1, #3
     5a0:	4a08      	ldr	r2, [pc, #32]	; (5c4 <RTC_setup+0x50>)
     5a2:	6011      	str	r1, [r2, #0]
   RTC->MODE0.COUNT.reg = 0x0; // initialize the counter to 0
     5a4:	2200      	movs	r2, #0
     5a6:	611a      	str	r2, [r3, #16]
   RTC->MODE0.INTENSET.bit.CMP0 = 1;
     5a8:	79da      	ldrb	r2, [r3, #7]
     5aa:	2101      	movs	r1, #1
     5ac:	430a      	orrs	r2, r1
     5ae:	71da      	strb	r2, [r3, #7]
   RTC->MODE0.CTRL.bit.ENABLE = 1; // Enable
     5b0:	881a      	ldrh	r2, [r3, #0]
     5b2:	2102      	movs	r1, #2
     5b4:	430a      	orrs	r2, r1
     5b6:	801a      	strh	r2, [r3, #0]
}
     5b8:	4770      	bx	lr
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	40001400 	.word	0x40001400
     5c0:	fffff0ff 	.word	0xfffff0ff
     5c4:	40001418 	.word	0x40001418

000005c8 <USART_setup>:

void USART_setup() {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	46de      	mov	lr, fp
     5cc:	4657      	mov	r7, sl
     5ce:	464e      	mov	r6, r9
     5d0:	4645      	mov	r5, r8
     5d2:	b5e0      	push	{r5, r6, r7, lr}

	// Power Manager
	PM->APBCMASK.bit.SERCOM0_ = 1 ; // Clock Enable (APBC clock)
     5d4:	4b36      	ldr	r3, [pc, #216]	; (6b0 <USART_setup+0xe8>)
     5d6:	6a18      	ldr	r0, [r3, #32]
     5d8:	2104      	movs	r1, #4
     5da:	0002      	movs	r2, r0
     5dc:	430a      	orrs	r2, r1
     5de:	621a      	str	r2, [r3, #32]
	PM->APBCMASK.bit.SERCOM2_ = 1 ; // Clock Enable (APBC clock)
     5e0:	6a18      	ldr	r0, [r3, #32]
     5e2:	2210      	movs	r2, #16
     5e4:	4302      	orrs	r2, r0
     5e6:	621a      	str	r2, [r3, #32]
	
	// USART setup
	SERCOM0->USART.CTRLA.bit.MODE = 1 ; // Internal Clock
     5e8:	4b32      	ldr	r3, [pc, #200]	; (6b4 <USART_setup+0xec>)
     5ea:	681a      	ldr	r2, [r3, #0]
     5ec:	201c      	movs	r0, #28
     5ee:	4682      	mov	sl, r0
     5f0:	4382      	bics	r2, r0
     5f2:	430a      	orrs	r2, r1
     5f4:	601a      	str	r2, [r3, #0]
	SERCOM0->USART.CTRLA.bit.CMODE = 0 ; // Asynchronous UART
     5f6:	6818      	ldr	r0, [r3, #0]
     5f8:	4a2f      	ldr	r2, [pc, #188]	; (6b8 <USART_setup+0xf0>)
     5fa:	4690      	mov	r8, r2
     5fc:	4002      	ands	r2, r0
     5fe:	601a      	str	r2, [r3, #0]
	SERCOM0->USART.CTRLA.bit.RXPO = 3 ; // PAD3
     600:	6818      	ldr	r0, [r3, #0]
     602:	26c0      	movs	r6, #192	; 0xc0
     604:	03b6      	lsls	r6, r6, #14
     606:	0002      	movs	r2, r0
     608:	4332      	orrs	r2, r6
     60a:	601a      	str	r2, [r3, #0]
	SERCOM0->USART.CTRLA.bit.TXPO = 1 ; // PAD2
     60c:	6818      	ldr	r0, [r3, #0]
     60e:	4a2b      	ldr	r2, [pc, #172]	; (6bc <USART_setup+0xf4>)
     610:	4694      	mov	ip, r2
     612:	4010      	ands	r0, r2
     614:	2280      	movs	r2, #128	; 0x80
     616:	0252      	lsls	r2, r2, #9
     618:	4310      	orrs	r0, r2
     61a:	6018      	str	r0, [r3, #0]
	SERCOM0->USART.CTRLB.bit.CHSIZE = 0 ; // 8-bit data
     61c:	685c      	ldr	r4, [r3, #4]
     61e:	2707      	movs	r7, #7
     620:	0020      	movs	r0, r4
     622:	43b8      	bics	r0, r7
     624:	6058      	str	r0, [r3, #4]
	SERCOM0->USART.CTRLA.bit.DORD = 1 ; // LSB first
     626:	681c      	ldr	r4, [r3, #0]
     628:	2580      	movs	r5, #128	; 0x80
     62a:	05ed      	lsls	r5, r5, #23
     62c:	0020      	movs	r0, r4
     62e:	4328      	orrs	r0, r5
     630:	6018      	str	r0, [r3, #0]

	SERCOM0->USART.BAUD.reg = 0Xfb15 ; // 9,600 bps (baud rate) with 8MHz input clock
     632:	4823      	ldr	r0, [pc, #140]	; (6c0 <USART_setup+0xf8>)
     634:	8198      	strh	r0, [r3, #12]

	SERCOM0->USART.CTRLB.bit.RXEN = 1 ;
     636:	6858      	ldr	r0, [r3, #4]
     638:	2480      	movs	r4, #128	; 0x80
     63a:	02a4      	lsls	r4, r4, #10
     63c:	4320      	orrs	r0, r4
     63e:	6058      	str	r0, [r3, #4]
	SERCOM0->USART.CTRLB.bit.TXEN = 1 ;
     640:	6858      	ldr	r0, [r3, #4]
     642:	4310      	orrs	r0, r2
     644:	6058      	str	r0, [r3, #4]

	SERCOM0->USART.CTRLA.bit.ENABLE = 1;
     646:	6818      	ldr	r0, [r3, #0]
     648:	0004      	movs	r4, r0
     64a:	2002      	movs	r0, #2
     64c:	4304      	orrs	r4, r0
     64e:	601c      	str	r4, [r3, #0]
	
	// USART setup: SERCOM2
	SERCOM2->USART.CTRLA.bit.MODE = 1 ; // Internal Clock
     650:	4b1c      	ldr	r3, [pc, #112]	; (6c4 <USART_setup+0xfc>)
     652:	681c      	ldr	r4, [r3, #0]
     654:	4650      	mov	r0, sl
     656:	4384      	bics	r4, r0
     658:	4321      	orrs	r1, r4
     65a:	6019      	str	r1, [r3, #0]
	SERCOM2->USART.CTRLA.bit.CMODE = 0 ; // Asynchronous UART
     65c:	6819      	ldr	r1, [r3, #0]
     65e:	4689      	mov	r9, r1
     660:	4641      	mov	r1, r8
     662:	4648      	mov	r0, r9
     664:	4001      	ands	r1, r0
     666:	6019      	str	r1, [r3, #0]
	SERCOM2->USART.CTRLA.bit.RXPO = 3 ; // PAD3
     668:	6819      	ldr	r1, [r3, #0]
     66a:	430e      	orrs	r6, r1
     66c:	601e      	str	r6, [r3, #0]
	SERCOM2->USART.CTRLA.bit.TXPO = 1 ; // PAD2
     66e:	6819      	ldr	r1, [r3, #0]
     670:	4660      	mov	r0, ip
     672:	4001      	ands	r1, r0
     674:	4311      	orrs	r1, r2
     676:	6019      	str	r1, [r3, #0]
	SERCOM2->USART.CTRLB.bit.CHSIZE = 0 ; // 8-bit data
     678:	685e      	ldr	r6, [r3, #4]
     67a:	0031      	movs	r1, r6
     67c:	43b9      	bics	r1, r7
     67e:	6059      	str	r1, [r3, #4]
	SERCOM2->USART.CTRLA.bit.DORD = 1 ; // LSB first
     680:	681e      	ldr	r6, [r3, #0]
     682:	4335      	orrs	r5, r6
     684:	601d      	str	r5, [r3, #0]

	SERCOM2->USART.BAUD.reg = 0X8a09 ; // 230,400 bps (baud rate) with 8MHz input clock
     686:	4910      	ldr	r1, [pc, #64]	; (6c8 <USART_setup+0x100>)
     688:	8199      	strh	r1, [r3, #12]
	SERCOM2->USART.CTRLB.bit.RXEN = 1 ;
     68a:	685d      	ldr	r5, [r3, #4]
     68c:	2480      	movs	r4, #128	; 0x80
     68e:	02a4      	lsls	r4, r4, #10
     690:	432c      	orrs	r4, r5
     692:	605c      	str	r4, [r3, #4]
	SERCOM2->USART.CTRLB.bit.TXEN = 1 ;
     694:	6859      	ldr	r1, [r3, #4]
     696:	430a      	orrs	r2, r1
     698:	605a      	str	r2, [r3, #4]

	SERCOM2->USART.CTRLA.bit.ENABLE = 1;	
     69a:	6819      	ldr	r1, [r3, #0]
     69c:	2002      	movs	r0, #2
     69e:	4308      	orrs	r0, r1
     6a0:	6018      	str	r0, [r3, #0]
	
}
     6a2:	bc3c      	pop	{r2, r3, r4, r5}
     6a4:	4690      	mov	r8, r2
     6a6:	4699      	mov	r9, r3
     6a8:	46a2      	mov	sl, r4
     6aa:	46ab      	mov	fp, r5
     6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	40000400 	.word	0x40000400
     6b4:	42000800 	.word	0x42000800
     6b8:	efffffff 	.word	0xefffffff
     6bc:	fffcffff 	.word	0xfffcffff
     6c0:	fffffb15 	.word	0xfffffb15
     6c4:	42001000 	.word	0x42001000
     6c8:	ffff8a09 	.word	0xffff8a09

000006cc <TC3_setup>:

void TC3_setup()
{
   GCLK->CLKCTRL.bit.ID = 0x1B;            // select TC3
     6cc:	4b19      	ldr	r3, [pc, #100]	; (734 <TC3_setup+0x68>)
     6ce:	885a      	ldrh	r2, [r3, #2]
     6d0:	213f      	movs	r1, #63	; 0x3f
     6d2:	438a      	bics	r2, r1
     6d4:	211b      	movs	r1, #27
     6d6:	430a      	orrs	r2, r1
     6d8:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0;            // select generator 0
     6da:	885a      	ldrh	r2, [r3, #2]
     6dc:	4916      	ldr	r1, [pc, #88]	; (738 <TC3_setup+0x6c>)
     6de:	400a      	ands	r2, r1
     6e0:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1;            // enable clock (8MHz)
     6e2:	8859      	ldrh	r1, [r3, #2]
     6e4:	2280      	movs	r2, #128	; 0x80
     6e6:	01d2      	lsls	r2, r2, #7
     6e8:	430a      	orrs	r2, r1
     6ea:	805a      	strh	r2, [r3, #2]
   
   PM->APBCMASK.bit.TC3_ = 1;            // clock enable (APBC clock) for TC3
     6ec:	4a13      	ldr	r2, [pc, #76]	; (73c <TC3_setup+0x70>)
     6ee:	6a11      	ldr	r1, [r2, #32]
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	011b      	lsls	r3, r3, #4
     6f4:	430b      	orrs	r3, r1
     6f6:	6213      	str	r3, [r2, #32]
   
   TC3->COUNT16.CTRLA.bit.MODE = 0;         // 16bit counter mode
     6f8:	4b11      	ldr	r3, [pc, #68]	; (740 <TC3_setup+0x74>)
     6fa:	881a      	ldrh	r2, [r3, #0]
     6fc:	210c      	movs	r1, #12
     6fe:	438a      	bics	r2, r1
     700:	801a      	strh	r2, [r3, #0]
   TC3->COUNT16.CTRLA.bit.WAVEGEN = 3;      // match pwm
     702:	881a      	ldrh	r2, [r3, #0]
     704:	2160      	movs	r1, #96	; 0x60
     706:	430a      	orrs	r2, r1
     708:	801a      	strh	r2, [r3, #0]
   TC3->COUNT16.CTRLA.bit.PRESCALER = 6;   // prescaler 256
     70a:	881a      	ldrh	r2, [r3, #0]
     70c:	490d      	ldr	r1, [pc, #52]	; (744 <TC3_setup+0x78>)
     70e:	4011      	ands	r1, r2
     710:	22c0      	movs	r2, #192	; 0xc0
     712:	00d2      	lsls	r2, r2, #3
     714:	430a      	orrs	r2, r1
     716:	801a      	strh	r2, [r3, #0]
   
   TC3->COUNT16.COUNT.reg = 0;            // count start from 0
     718:	2200      	movs	r2, #0
     71a:	821a      	strh	r2, [r3, #16]
   TC3->COUNT16.CC[0].reg = 1000;         // total period = 1000
     71c:	22fa      	movs	r2, #250	; 0xfa
     71e:	0092      	lsls	r2, r2, #2
     720:	831a      	strh	r2, [r3, #24]
   TC3->COUNT16.CC[1].reg = 450;            // on duration = 0
     722:	22e1      	movs	r2, #225	; 0xe1
     724:	0052      	lsls	r2, r2, #1
     726:	835a      	strh	r2, [r3, #26]
   TC3->COUNT16.CTRLA.bit.ENABLE = 1;      // enable TC3
     728:	881a      	ldrh	r2, [r3, #0]
     72a:	2102      	movs	r1, #2
     72c:	430a      	orrs	r2, r1
     72e:	801a      	strh	r2, [r3, #0]
}
     730:	4770      	bx	lr
     732:	46c0      	nop			; (mov r8, r8)
     734:	40000c00 	.word	0x40000c00
     738:	fffff0ff 	.word	0xfffff0ff
     73c:	40000400 	.word	0x40000400
     740:	42002c00 	.word	0x42002c00
     744:	fffff8ff 	.word	0xfffff8ff

00000748 <TC4_setup>:

void TC4_setup()
{
   GCLK->CLKCTRL.bit.ID = 0x1C;            // select TC4, TC5
     748:	4b19      	ldr	r3, [pc, #100]	; (7b0 <TC4_setup+0x68>)
     74a:	885a      	ldrh	r2, [r3, #2]
     74c:	213f      	movs	r1, #63	; 0x3f
     74e:	438a      	bics	r2, r1
     750:	211c      	movs	r1, #28
     752:	430a      	orrs	r2, r1
     754:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.GEN = 0;            // select generator 0
     756:	885a      	ldrh	r2, [r3, #2]
     758:	4916      	ldr	r1, [pc, #88]	; (7b4 <TC4_setup+0x6c>)
     75a:	400a      	ands	r2, r1
     75c:	805a      	strh	r2, [r3, #2]
   GCLK->CLKCTRL.bit.CLKEN = 1;            // enable clock (8MHz)
     75e:	8859      	ldrh	r1, [r3, #2]
     760:	2280      	movs	r2, #128	; 0x80
     762:	01d2      	lsls	r2, r2, #7
     764:	430a      	orrs	r2, r1
     766:	805a      	strh	r2, [r3, #2]
   
   PM->APBCMASK.bit.TC4_ = 1;            // clock enable (APBC clock) for TC4
     768:	4a13      	ldr	r2, [pc, #76]	; (7b8 <TC4_setup+0x70>)
     76a:	6a11      	ldr	r1, [r2, #32]
     76c:	2380      	movs	r3, #128	; 0x80
     76e:	015b      	lsls	r3, r3, #5
     770:	430b      	orrs	r3, r1
     772:	6213      	str	r3, [r2, #32]
   
   TC4->COUNT16.CTRLA.bit.MODE = 0;         // 16bit counter mode
     774:	4b11      	ldr	r3, [pc, #68]	; (7bc <TC4_setup+0x74>)
     776:	881a      	ldrh	r2, [r3, #0]
     778:	210c      	movs	r1, #12
     77a:	438a      	bics	r2, r1
     77c:	801a      	strh	r2, [r3, #0]
   TC4->COUNT16.CTRLA.bit.WAVEGEN = 3;      // match pwm
     77e:	881a      	ldrh	r2, [r3, #0]
     780:	2160      	movs	r1, #96	; 0x60
     782:	430a      	orrs	r2, r1
     784:	801a      	strh	r2, [r3, #0]
   TC4->COUNT16.CTRLA.bit.PRESCALER = 6;   // prescaler 256
     786:	881a      	ldrh	r2, [r3, #0]
     788:	490d      	ldr	r1, [pc, #52]	; (7c0 <TC4_setup+0x78>)
     78a:	4011      	ands	r1, r2
     78c:	22c0      	movs	r2, #192	; 0xc0
     78e:	00d2      	lsls	r2, r2, #3
     790:	430a      	orrs	r2, r1
     792:	801a      	strh	r2, [r3, #0]
   
   TC4->COUNT16.COUNT.reg = 0;            // count start from 0
     794:	2200      	movs	r2, #0
     796:	821a      	strh	r2, [r3, #16]
   TC4->COUNT16.CC[0].reg = 1000;         // total period = 1000
     798:	22fa      	movs	r2, #250	; 0xfa
     79a:	0092      	lsls	r2, r2, #2
     79c:	831a      	strh	r2, [r3, #24]
   TC4->COUNT16.CC[1].reg = 450;            // on duration = 0
     79e:	22e1      	movs	r2, #225	; 0xe1
     7a0:	0052      	lsls	r2, r2, #1
     7a2:	835a      	strh	r2, [r3, #26]
   TC4->COUNT16.CTRLA.bit.ENABLE = 1;      // enable tc4
     7a4:	881a      	ldrh	r2, [r3, #0]
     7a6:	2102      	movs	r1, #2
     7a8:	430a      	orrs	r2, r1
     7aa:	801a      	strh	r2, [r3, #0]
}
     7ac:	4770      	bx	lr
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	40000c00 	.word	0x40000c00
     7b4:	fffff0ff 	.word	0xfffff0ff
     7b8:	40000400 	.word	0x40000400
     7bc:	42003000 	.word	0x42003000
     7c0:	fffff8ff 	.word	0xfffff8ff

000007c4 <TC5_setup>:

void TC5_setup()
{
   PM->APBCMASK.bit.TC5_ = 1;               // clock enable (APBC clock) for TC5
     7c4:	4a12      	ldr	r2, [pc, #72]	; (810 <TC5_setup+0x4c>)
     7c6:	6a11      	ldr	r1, [r2, #32]
     7c8:	2380      	movs	r3, #128	; 0x80
     7ca:	019b      	lsls	r3, r3, #6
     7cc:	430b      	orrs	r3, r1
     7ce:	6213      	str	r3, [r2, #32]
   
   TC5->COUNT16.CTRLA.bit.MODE = 0;         // 16bit counter mode
     7d0:	4b10      	ldr	r3, [pc, #64]	; (814 <TC5_setup+0x50>)
     7d2:	881a      	ldrh	r2, [r3, #0]
     7d4:	210c      	movs	r1, #12
     7d6:	438a      	bics	r2, r1
     7d8:	801a      	strh	r2, [r3, #0]
   TC5->COUNT16.CTRLA.bit.WAVEGEN = 1;      // MFRQ
     7da:	881a      	ldrh	r2, [r3, #0]
     7dc:	3154      	adds	r1, #84	; 0x54
     7de:	438a      	bics	r2, r1
     7e0:	2120      	movs	r1, #32
     7e2:	430a      	orrs	r2, r1
     7e4:	801a      	strh	r2, [r3, #0]
   TC5->COUNT16.CTRLA.bit.PRESCALER = 6;    // prescaler = 256, 8MHz / 256 = 31250
     7e6:	881a      	ldrh	r2, [r3, #0]
     7e8:	490b      	ldr	r1, [pc, #44]	; (818 <TC5_setup+0x54>)
     7ea:	4011      	ands	r1, r2
     7ec:	22c0      	movs	r2, #192	; 0xc0
     7ee:	00d2      	lsls	r2, r2, #3
     7f0:	430a      	orrs	r2, r1
     7f2:	801a      	strh	r2, [r3, #0]
   
   TC5->COUNT16.INTENSET.bit.OVF = 1;       // Enable interrupt
     7f4:	7b5a      	ldrb	r2, [r3, #13]
     7f6:	2101      	movs	r1, #1
     7f8:	430a      	orrs	r2, r1
     7fa:	735a      	strb	r2, [r3, #13]
   
   TC5->COUNT16.COUNT.reg = 0;            // count from 0
     7fc:	2200      	movs	r2, #0
     7fe:	821a      	strh	r2, [r3, #16]
   TC5->COUNT16.CC[0].reg = 3125;          // count until cc0 and overflow(interrupt)
     800:	4a06      	ldr	r2, [pc, #24]	; (81c <TC5_setup+0x58>)
     802:	831a      	strh	r2, [r3, #24]
   TC5->COUNT16.CTRLA.bit.ENABLE = 1;       // start counter
     804:	881a      	ldrh	r2, [r3, #0]
     806:	2102      	movs	r1, #2
     808:	430a      	orrs	r2, r1
     80a:	801a      	strh	r2, [r3, #0]
}
     80c:	4770      	bx	lr
     80e:	46c0      	nop			; (mov r8, r8)
     810:	40000400 	.word	0x40000400
     814:	42003400 	.word	0x42003400
     818:	fffff8ff 	.word	0xfffff8ff
     81c:	00000c35 	.word	0x00000c35

00000820 <turn_right>:

void turn_right()
{
	uint16_t speed, start_angle, end_angle, distance_lidar;
	
	turning = 1;
     820:	2201      	movs	r2, #1
     822:	4b08      	ldr	r3, [pc, #32]	; (844 <turn_right+0x24>)
     824:	601a      	str	r2, [r3, #0]
	PORT->Group[0].OUTCLR.reg = 0x33 << 4;     //
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <turn_right+0x28>)
     828:	22cc      	movs	r2, #204	; 0xcc
     82a:	0092      	lsls	r2, r2, #2
     82c:	615a      	str	r2, [r3, #20]
	PORT->Group[0].OUTSET.reg = 0x12 << 4;      // PA04 : 0, PA05 : 1, PA08 : 1, PA09 : 0 (LEFT BACKWARD, RIGHT FORWARD)
     82e:	2290      	movs	r2, #144	; 0x90
     830:	0052      	lsls	r2, r2, #1
     832:	619a      	str	r2, [r3, #24]
	
	TC3->COUNT16.CC[1].reg = 480;         // mid speed: on duration 600 / 1000
     834:	23f0      	movs	r3, #240	; 0xf0
     836:	005b      	lsls	r3, r3, #1
     838:	4a04      	ldr	r2, [pc, #16]	; (84c <turn_right+0x2c>)
     83a:	8353      	strh	r3, [r2, #26]
	TC4->COUNT16.CC[1].reg = 480;         // mid speed: on duration 600 / 1000
     83c:	4a04      	ldr	r2, [pc, #16]	; (850 <turn_right+0x30>)
     83e:	8353      	strh	r3, [r2, #26]
	
	//for(int i = 0; i < 300000; i++);
}
     840:	4770      	bx	lr
     842:	46c0      	nop			; (mov r8, r8)
     844:	20000450 	.word	0x20000450
     848:	41004400 	.word	0x41004400
     84c:	42002c00 	.word	0x42002c00
     850:	42003000 	.word	0x42003000

00000854 <TC5_Handler>:
void TC5_Handler(void) {
     854:	b5f0      	push	{r4, r5, r6, r7, lr}
     856:	46c6      	mov	lr, r8
     858:	b500      	push	{lr}
	TC5->COUNT16.INTFLAG.bit.OVF = 1 ;         // Clear the interrupt flag
     85a:	4a69      	ldr	r2, [pc, #420]	; (a00 <TC5_Handler+0x1ac>)
     85c:	7b93      	ldrb	r3, [r2, #14]
     85e:	2101      	movs	r1, #1
     860:	430b      	orrs	r3, r1
     862:	7393      	strb	r3, [r2, #14]
	if(stop)
     864:	4b67      	ldr	r3, [pc, #412]	; (a04 <TC5_Handler+0x1b0>)
     866:	685b      	ldr	r3, [r3, #4]
     868:	2b00      	cmp	r3, #0
     86a:	d000      	beq.n	86e <TC5_Handler+0x1a>
     86c:	e0c5      	b.n	9fa <TC5_Handler+0x1a6>
     86e:	2400      	movs	r4, #0
     870:	2500      	movs	r5, #0
     872:	e098      	b.n	9a6 <TC5_Handler+0x152>
		for(int j = 0; j < 12; j++)
     874:	3301      	adds	r3, #1
     876:	2b0b      	cmp	r3, #11
     878:	dc15      	bgt.n	8a6 <TC5_Handler+0x52>
			if(distance_lidar >= 9999 || distance_lidar == 0)
     87a:	1e72      	subs	r2, r6, #1
     87c:	b292      	uxth	r2, r2
     87e:	4962      	ldr	r1, [pc, #392]	; (a08 <TC5_Handler+0x1b4>)
     880:	428a      	cmp	r2, r1
     882:	d8f7      	bhi.n	874 <TC5_Handler+0x20>
			distance_lidar += ld19packet[i].point[j].distance;
     884:	0058      	lsls	r0, r3, #1
     886:	18c0      	adds	r0, r0, r3
     888:	0061      	lsls	r1, r4, #1
     88a:	1909      	adds	r1, r1, r4
     88c:	0109      	lsls	r1, r1, #4
     88e:	1b0a      	subs	r2, r1, r4
     890:	1882      	adds	r2, r0, r2
     892:	495e      	ldr	r1, [pc, #376]	; (a0c <TC5_Handler+0x1b8>)
     894:	188a      	adds	r2, r1, r2
     896:	7991      	ldrb	r1, [r2, #6]
     898:	79d0      	ldrb	r0, [r2, #7]
     89a:	0200      	lsls	r0, r0, #8
     89c:	4308      	orrs	r0, r1
     89e:	1836      	adds	r6, r6, r0
     8a0:	b2b6      	uxth	r6, r6
			count++;
     8a2:	3501      	adds	r5, #1
     8a4:	e7e6      	b.n	874 <TC5_Handler+0x20>
		distance_lidar /= count;
     8a6:	0029      	movs	r1, r5
     8a8:	0030      	movs	r0, r6
     8aa:	4b59      	ldr	r3, [pc, #356]	; (a10 <TC5_Handler+0x1bc>)
     8ac:	4798      	blx	r3
     8ae:	b286      	uxth	r6, r0
		if(distance_lidar >= 9999 || distance_lidar <= 100 || intensity <= 165 && intensity >= 270)
     8b0:	0033      	movs	r3, r6
     8b2:	3b65      	subs	r3, #101	; 0x65
     8b4:	b29b      	uxth	r3, r3
     8b6:	4a57      	ldr	r2, [pc, #348]	; (a14 <TC5_Handler+0x1c0>)
     8b8:	4293      	cmp	r3, r2
     8ba:	d873      	bhi.n	9a4 <TC5_Handler+0x150>
		start_angle = ld19packet[i].start_angle;
     8bc:	0063      	lsls	r3, r4, #1
     8be:	191b      	adds	r3, r3, r4
     8c0:	011b      	lsls	r3, r3, #4
     8c2:	1b1a      	subs	r2, r3, r4
     8c4:	4b51      	ldr	r3, [pc, #324]	; (a0c <TC5_Handler+0x1b8>)
     8c6:	189b      	adds	r3, r3, r2
     8c8:	791a      	ldrb	r2, [r3, #4]
     8ca:	795f      	ldrb	r7, [r3, #5]
     8cc:	023f      	lsls	r7, r7, #8
     8ce:	4317      	orrs	r7, r2
		end_angle = ld19packet[i].end_angle;
     8d0:	3328      	adds	r3, #40	; 0x28
     8d2:	789a      	ldrb	r2, [r3, #2]
     8d4:	78db      	ldrb	r3, [r3, #3]
     8d6:	021b      	lsls	r3, r3, #8
     8d8:	4313      	orrs	r3, r2
     8da:	4698      	mov	r8, r3
		if(start_angle >= 8800 && end_angle <= 9500)
     8dc:	4b4e      	ldr	r3, [pc, #312]	; (a18 <TC5_Handler+0x1c4>)
     8de:	429f      	cmp	r7, r3
     8e0:	d927      	bls.n	932 <TC5_Handler+0xde>
     8e2:	4b4e      	ldr	r3, [pc, #312]	; (a1c <TC5_Handler+0x1c8>)
     8e4:	4598      	cmp	r8, r3
     8e6:	d824      	bhi.n	932 <TC5_Handler+0xde>
			if(distance_lidar < 220)
     8e8:	2edb      	cmp	r6, #219	; 0xdb
     8ea:	d839      	bhi.n	960 <TC5_Handler+0x10c>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;     //
     8ec:	4b4c      	ldr	r3, [pc, #304]	; (a20 <TC5_Handler+0x1cc>)
     8ee:	22cc      	movs	r2, #204	; 0xcc
     8f0:	0092      	lsls	r2, r2, #2
     8f2:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0x21 << 4;     // PA06 : 1, PA07 : 0, PA08 : 0, PA09 : 1 (LEFT FORWARD, RIGHT BACKWARD)
     8f4:	3a21      	subs	r2, #33	; 0x21
     8f6:	3aff      	subs	r2, #255	; 0xff
     8f8:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 650;
     8fa:	4a4a      	ldr	r2, [pc, #296]	; (a24 <TC5_Handler+0x1d0>)
     8fc:	4b4a      	ldr	r3, [pc, #296]	; (a28 <TC5_Handler+0x1d4>)
     8fe:	835a      	strh	r2, [r3, #26]
				TC4->COUNT16.CC[1].reg = 450;
     900:	3ac8      	subs	r2, #200	; 0xc8
     902:	4b4a      	ldr	r3, [pc, #296]	; (a2c <TC5_Handler+0x1d8>)
     904:	835a      	strh	r2, [r3, #26]
				for(int i = 0; i < 32000; i++);
     906:	2300      	movs	r3, #0
     908:	e000      	b.n	90c <TC5_Handler+0xb8>
     90a:	3301      	adds	r3, #1
     90c:	4a48      	ldr	r2, [pc, #288]	; (a30 <TC5_Handler+0x1dc>)
     90e:	4293      	cmp	r3, r2
     910:	ddfb      	ble.n	90a <TC5_Handler+0xb6>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;
     912:	4b43      	ldr	r3, [pc, #268]	; (a20 <TC5_Handler+0x1cc>)
     914:	22cc      	movs	r2, #204	; 0xcc
     916:	0092      	lsls	r2, r2, #2
     918:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0X2 << 8;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     91a:	3a31      	subs	r2, #49	; 0x31
     91c:	3aff      	subs	r2, #255	; 0xff
     91e:	619a      	str	r2, [r3, #24]
				PORT->Group[0].OUTSET.reg = 0X2 << 4;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     920:	3ae1      	subs	r2, #225	; 0xe1
     922:	3aff      	subs	r2, #255	; 0xff
     924:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     926:	23e1      	movs	r3, #225	; 0xe1
     928:	005b      	lsls	r3, r3, #1
     92a:	4a3f      	ldr	r2, [pc, #252]	; (a28 <TC5_Handler+0x1d4>)
     92c:	8353      	strh	r3, [r2, #26]
				TC4->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     92e:	4a3f      	ldr	r2, [pc, #252]	; (a2c <TC5_Handler+0x1d8>)
     930:	8353      	strh	r3, [r2, #26]
		if(start_angle >= 3500 && end_angle <= 3700)
     932:	4b40      	ldr	r3, [pc, #256]	; (a34 <TC5_Handler+0x1e0>)
     934:	429f      	cmp	r7, r3
     936:	d935      	bls.n	9a4 <TC5_Handler+0x150>
     938:	4b3f      	ldr	r3, [pc, #252]	; (a38 <TC5_Handler+0x1e4>)
     93a:	4598      	cmp	r8, r3
     93c:	d832      	bhi.n	9a4 <TC5_Handler+0x150>
			if(distance_lidar > 200)
     93e:	2ec8      	cmp	r6, #200	; 0xc8
     940:	d935      	bls.n	9ae <TC5_Handler+0x15a>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;     //
     942:	4b37      	ldr	r3, [pc, #220]	; (a20 <TC5_Handler+0x1cc>)
     944:	22cc      	movs	r2, #204	; 0xcc
     946:	0092      	lsls	r2, r2, #2
     948:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0x12 << 4;     // PA06 : 1, PA07 : 0, PA08 : 0, PA09 : 1 (LEFT FORWARD, RIGHT BACKWARD)
     94a:	2290      	movs	r2, #144	; 0x90
     94c:	0052      	lsls	r2, r2, #1
     94e:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 450;
     950:	23e1      	movs	r3, #225	; 0xe1
     952:	005b      	lsls	r3, r3, #1
     954:	4a34      	ldr	r2, [pc, #208]	; (a28 <TC5_Handler+0x1d4>)
     956:	8353      	strh	r3, [r2, #26]
				TC4->COUNT16.CC[1].reg = 450;
     958:	4a34      	ldr	r2, [pc, #208]	; (a2c <TC5_Handler+0x1d8>)
     95a:	8353      	strh	r3, [r2, #26]
				for(int i = 0; i < 20000; i++);
     95c:	2300      	movs	r3, #0
     95e:	e00e      	b.n	97e <TC5_Handler+0x12a>
			else if(distance_lidar > 600)
     960:	2396      	movs	r3, #150	; 0x96
     962:	009b      	lsls	r3, r3, #2
     964:	429e      	cmp	r6, r3
     966:	d806      	bhi.n	976 <TC5_Handler+0x122>
				TC3->COUNT16.CC[1].reg = 450;
     968:	23e1      	movs	r3, #225	; 0xe1
     96a:	005b      	lsls	r3, r3, #1
     96c:	4a2e      	ldr	r2, [pc, #184]	; (a28 <TC5_Handler+0x1d4>)
     96e:	8353      	strh	r3, [r2, #26]
				TC4->COUNT16.CC[1].reg = 450;
     970:	4a2e      	ldr	r2, [pc, #184]	; (a2c <TC5_Handler+0x1d8>)
     972:	8353      	strh	r3, [r2, #26]
     974:	e7dd      	b.n	932 <TC5_Handler+0xde>
				turn_right();
     976:	4b31      	ldr	r3, [pc, #196]	; (a3c <TC5_Handler+0x1e8>)
     978:	4798      	blx	r3
     97a:	e7da      	b.n	932 <TC5_Handler+0xde>
				for(int i = 0; i < 20000; i++);
     97c:	3301      	adds	r3, #1
     97e:	4a30      	ldr	r2, [pc, #192]	; (a40 <TC5_Handler+0x1ec>)
     980:	4293      	cmp	r3, r2
     982:	ddfb      	ble.n	97c <TC5_Handler+0x128>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;
     984:	4b26      	ldr	r3, [pc, #152]	; (a20 <TC5_Handler+0x1cc>)
     986:	22cc      	movs	r2, #204	; 0xcc
     988:	0092      	lsls	r2, r2, #2
     98a:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0X2 << 8;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     98c:	3a31      	subs	r2, #49	; 0x31
     98e:	3aff      	subs	r2, #255	; 0xff
     990:	619a      	str	r2, [r3, #24]
				PORT->Group[0].OUTSET.reg = 0X2 << 4;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     992:	3ae1      	subs	r2, #225	; 0xe1
     994:	3aff      	subs	r2, #255	; 0xff
     996:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     998:	23e1      	movs	r3, #225	; 0xe1
     99a:	005b      	lsls	r3, r3, #1
     99c:	4a22      	ldr	r2, [pc, #136]	; (a28 <TC5_Handler+0x1d4>)
     99e:	8353      	strh	r3, [r2, #26]
				TC4->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     9a0:	4a22      	ldr	r2, [pc, #136]	; (a2c <TC5_Handler+0x1d8>)
     9a2:	8353      	strh	r3, [r2, #26]
	for(int i = 0; i < 100; i++)
     9a4:	3401      	adds	r4, #1
     9a6:	2c63      	cmp	r4, #99	; 0x63
     9a8:	dc27      	bgt.n	9fa <TC5_Handler+0x1a6>
     9aa:	2300      	movs	r3, #0
     9ac:	e763      	b.n	876 <TC5_Handler+0x22>
			else if(distance_lidar < 160)
     9ae:	2e9f      	cmp	r6, #159	; 0x9f
     9b0:	d8f8      	bhi.n	9a4 <TC5_Handler+0x150>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;     //
     9b2:	4b1b      	ldr	r3, [pc, #108]	; (a20 <TC5_Handler+0x1cc>)
     9b4:	22cc      	movs	r2, #204	; 0xcc
     9b6:	0092      	lsls	r2, r2, #2
     9b8:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0x21 << 4;     // PA06 : 1, PA07 : 0, PA08 : 0, PA09 : 1 (LEFT FORWARD, RIGHT BACKWARD)
     9ba:	3a21      	subs	r2, #33	; 0x21
     9bc:	3aff      	subs	r2, #255	; 0xff
     9be:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 650;
     9c0:	4a18      	ldr	r2, [pc, #96]	; (a24 <TC5_Handler+0x1d0>)
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <TC5_Handler+0x1d4>)
     9c4:	835a      	strh	r2, [r3, #26]
				TC4->COUNT16.CC[1].reg = 450;
     9c6:	3ac8      	subs	r2, #200	; 0xc8
     9c8:	4b18      	ldr	r3, [pc, #96]	; (a2c <TC5_Handler+0x1d8>)
     9ca:	835a      	strh	r2, [r3, #26]
				for(int i = 0; i < 30000; i++);
     9cc:	2300      	movs	r3, #0
     9ce:	e000      	b.n	9d2 <TC5_Handler+0x17e>
     9d0:	3301      	adds	r3, #1
     9d2:	4a1c      	ldr	r2, [pc, #112]	; (a44 <TC5_Handler+0x1f0>)
     9d4:	4293      	cmp	r3, r2
     9d6:	ddfb      	ble.n	9d0 <TC5_Handler+0x17c>
				PORT->Group[0].OUTCLR.reg = 0x33 << 4;
     9d8:	4b11      	ldr	r3, [pc, #68]	; (a20 <TC5_Handler+0x1cc>)
     9da:	22cc      	movs	r2, #204	; 0xcc
     9dc:	0092      	lsls	r2, r2, #2
     9de:	615a      	str	r2, [r3, #20]
				PORT->Group[0].OUTSET.reg = 0X2 << 8;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     9e0:	3a31      	subs	r2, #49	; 0x31
     9e2:	3aff      	subs	r2, #255	; 0xff
     9e4:	619a      	str	r2, [r3, #24]
				PORT->Group[0].OUTSET.reg = 0X2 << 4;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     9e6:	3ae1      	subs	r2, #225	; 0xe1
     9e8:	3aff      	subs	r2, #255	; 0xff
     9ea:	619a      	str	r2, [r3, #24]
				TC3->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     9ec:	23e1      	movs	r3, #225	; 0xe1
     9ee:	005b      	lsls	r3, r3, #1
     9f0:	4a0d      	ldr	r2, [pc, #52]	; (a28 <TC5_Handler+0x1d4>)
     9f2:	8353      	strh	r3, [r2, #26]
				TC4->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     9f4:	4a0d      	ldr	r2, [pc, #52]	; (a2c <TC5_Handler+0x1d8>)
     9f6:	8353      	strh	r3, [r2, #26]
     9f8:	e7d4      	b.n	9a4 <TC5_Handler+0x150>
}
     9fa:	bc04      	pop	{r2}
     9fc:	4690      	mov	r8, r2
     9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a00:	42003400 	.word	0x42003400
     a04:	20000450 	.word	0x20000450
     a08:	0000270d 	.word	0x0000270d
     a0c:	20000460 	.word	0x20000460
     a10:	000014ed 	.word	0x000014ed
     a14:	000026a9 	.word	0x000026a9
     a18:	0000225f 	.word	0x0000225f
     a1c:	0000251c 	.word	0x0000251c
     a20:	41004400 	.word	0x41004400
     a24:	0000028a 	.word	0x0000028a
     a28:	42002c00 	.word	0x42002c00
     a2c:	42003000 	.word	0x42003000
     a30:	00007cff 	.word	0x00007cff
     a34:	00000dab 	.word	0x00000dab
     a38:	00000e74 	.word	0x00000e74
     a3c:	00000821 	.word	0x00000821
     a40:	00004e1f 	.word	0x00004e1f
     a44:	0000752f 	.word	0x0000752f

00000a48 <turn_left>:

void turn_left()
{
	uint16_t speed, start_angle, end_angle, distance_lidar;
	
	turning = 1;
     a48:	2201      	movs	r2, #1
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <turn_left+0x24>)
     a4c:	601a      	str	r2, [r3, #0]
	PORT->Group[0].OUTCLR.reg = 0x33 << 4;     //
     a4e:	4b08      	ldr	r3, [pc, #32]	; (a70 <turn_left+0x28>)
     a50:	22cc      	movs	r2, #204	; 0xcc
     a52:	0092      	lsls	r2, r2, #2
     a54:	615a      	str	r2, [r3, #20]
	PORT->Group[0].OUTSET.reg = 0x21 << 4;     // PA06 : 1, PA07 : 0, PA08 : 0, PA09 : 1 (LEFT FORWARD, RIGHT BACKWARD)
     a56:	3a21      	subs	r2, #33	; 0x21
     a58:	3aff      	subs	r2, #255	; 0xff
     a5a:	619a      	str	r2, [r3, #24]
	
	TC3->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     a5c:	23e1      	movs	r3, #225	; 0xe1
     a5e:	005b      	lsls	r3, r3, #1
     a60:	4a04      	ldr	r2, [pc, #16]	; (a74 <turn_left+0x2c>)
     a62:	8353      	strh	r3, [r2, #26]
	TC4->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     a64:	4a04      	ldr	r2, [pc, #16]	; (a78 <turn_left+0x30>)
     a66:	8353      	strh	r3, [r2, #26]
	
	//for(int i = 0; i < 300000; i++);
}
     a68:	4770      	bx	lr
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	20000450 	.word	0x20000450
     a70:	41004400 	.word	0x41004400
     a74:	42002c00 	.word	0x42002c00
     a78:	42003000 	.word	0x42003000

00000a7c <RTC_Handler>:
void RTC_Handler(void) {
     a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7e:	b083      	sub	sp, #12
	RTC->MODE0.INTFLAG.bit.CMP0 = 1;
     a80:	4a3f      	ldr	r2, [pc, #252]	; (b80 <RTC_Handler+0x104>)
     a82:	7a13      	ldrb	r3, [r2, #8]
     a84:	2501      	movs	r5, #1
     a86:	432b      	orrs	r3, r5
     a88:	7213      	strb	r3, [r2, #8]
	for(int i = 0; i < 100; i++)
     a8a:	2500      	movs	r5, #0
     a8c:	e00f      	b.n	aae <RTC_Handler+0x32>
		if(start_angle >= 8200 && start_angle <= 9500)
     a8e:	4c3d      	ldr	r4, [pc, #244]	; (b84 <RTC_Handler+0x108>)
     a90:	1916      	adds	r6, r2, r4
     a92:	b2b6      	uxth	r6, r6
     a94:	4f3c      	ldr	r7, [pc, #240]	; (b88 <RTC_Handler+0x10c>)
     a96:	42be      	cmp	r6, r7
     a98:	d800      	bhi.n	a9c <RTC_Handler+0x20>
			right = distance_lidar;
     a9a:	0019      	movs	r1, r3
		if(start_angle >= 26000 && start_angle <= 28500)
     a9c:	4c3b      	ldr	r4, [pc, #236]	; (b8c <RTC_Handler+0x110>)
     a9e:	46a4      	mov	ip, r4
     aa0:	4462      	add	r2, ip
     aa2:	b292      	uxth	r2, r2
     aa4:	4e3a      	ldr	r6, [pc, #232]	; (b90 <RTC_Handler+0x114>)
     aa6:	42b2      	cmp	r2, r6
     aa8:	d800      	bhi.n	aac <RTC_Handler+0x30>
			left = distance_lidar;
     aaa:	0018      	movs	r0, r3
	for(int i = 0; i < 100; i++)
     aac:	3501      	adds	r5, #1
     aae:	2d63      	cmp	r5, #99	; 0x63
     ab0:	dc24      	bgt.n	afc <RTC_Handler+0x80>
		start_angle = ld19packet[i].start_angle;
     ab2:	006b      	lsls	r3, r5, #1
     ab4:	195b      	adds	r3, r3, r5
     ab6:	011b      	lsls	r3, r3, #4
     ab8:	1b5b      	subs	r3, r3, r5
     aba:	4a36      	ldr	r2, [pc, #216]	; (b94 <RTC_Handler+0x118>)
     abc:	18d3      	adds	r3, r2, r3
     abe:	791e      	ldrb	r6, [r3, #4]
     ac0:	795a      	ldrb	r2, [r3, #5]
     ac2:	0212      	lsls	r2, r2, #8
     ac4:	4332      	orrs	r2, r6
		end_angle = ld19packet[i].end_angle;
     ac6:	001f      	movs	r7, r3
     ac8:	3728      	adds	r7, #40	; 0x28
     aca:	78bc      	ldrb	r4, [r7, #2]
     acc:	78fe      	ldrb	r6, [r7, #3]
     ace:	0236      	lsls	r6, r6, #8
     ad0:	4326      	orrs	r6, r4
     ad2:	0037      	movs	r7, r6
		distance_lidar = ld19packet[i].point[6].distance;
     ad4:	7e1e      	ldrb	r6, [r3, #24]
     ad6:	3312      	adds	r3, #18
     ad8:	79db      	ldrb	r3, [r3, #7]
     ada:	021b      	lsls	r3, r3, #8
     adc:	4333      	orrs	r3, r6
		if(distance_lidar >= 8000 || distance_lidar == 0 || distance_lidar < 100 || intensity <= 165 && intensity >= 270)
     ade:	001e      	movs	r6, r3
     ae0:	3e64      	subs	r6, #100	; 0x64
     ae2:	b2b6      	uxth	r6, r6
     ae4:	4c2c      	ldr	r4, [pc, #176]	; (b98 <RTC_Handler+0x11c>)
     ae6:	42a6      	cmp	r6, r4
     ae8:	d8e0      	bhi.n	aac <RTC_Handler+0x30>
		if(start_angle >= 35000 && end_angle <= 260)
     aea:	4e2c      	ldr	r6, [pc, #176]	; (b9c <RTC_Handler+0x120>)
     aec:	42b2      	cmp	r2, r6
     aee:	d9ce      	bls.n	a8e <RTC_Handler+0x12>
     af0:	2682      	movs	r6, #130	; 0x82
     af2:	0076      	lsls	r6, r6, #1
     af4:	42b7      	cmp	r7, r6
     af6:	d8ca      	bhi.n	a8e <RTC_Handler+0x12>
			front = distance_lidar;
     af8:	9301      	str	r3, [sp, #4]
     afa:	e7c8      	b.n	a8e <RTC_Handler+0x12>
	if((turning == 0 || turning == 1) && front < 350)
     afc:	4b28      	ldr	r3, [pc, #160]	; (ba0 <RTC_Handler+0x124>)
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	2b01      	cmp	r3, #1
     b02:	d905      	bls.n	b10 <RTC_Handler+0x94>
	if(turning == 1 && front > 350)
     b04:	4b26      	ldr	r3, [pc, #152]	; (ba0 <RTC_Handler+0x124>)
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	2b01      	cmp	r3, #1
     b0a:	d01e      	beq.n	b4a <RTC_Handler+0xce>
}
     b0c:	b003      	add	sp, #12
     b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((turning == 0 || turning == 1) && front < 350)
     b10:	235e      	movs	r3, #94	; 0x5e
     b12:	33ff      	adds	r3, #255	; 0xff
     b14:	9a01      	ldr	r2, [sp, #4]
     b16:	429a      	cmp	r2, r3
     b18:	d8f4      	bhi.n	b04 <RTC_Handler+0x88>
		TC3->COUNT16.CC[1].reg = 0;
     b1a:	2300      	movs	r3, #0
     b1c:	4a21      	ldr	r2, [pc, #132]	; (ba4 <RTC_Handler+0x128>)
     b1e:	8353      	strh	r3, [r2, #26]
		TC4->COUNT16.CC[1].reg = 0;
     b20:	4a21      	ldr	r2, [pc, #132]	; (ba8 <RTC_Handler+0x12c>)
     b22:	8353      	strh	r3, [r2, #26]
		stop = 1;
     b24:	2201      	movs	r2, #1
     b26:	4b1e      	ldr	r3, [pc, #120]	; (ba0 <RTC_Handler+0x124>)
     b28:	605a      	str	r2, [r3, #4]
		if(right > 200 && left > 200)
     b2a:	29c8      	cmp	r1, #200	; 0xc8
     b2c:	d901      	bls.n	b32 <RTC_Handler+0xb6>
     b2e:	28c8      	cmp	r0, #200	; 0xc8
     b30:	d805      	bhi.n	b3e <RTC_Handler+0xc2>
		else if(right > left)
     b32:	4288      	cmp	r0, r1
     b34:	d306      	bcc.n	b44 <RTC_Handler+0xc8>
		else if(left > right)
     b36:	d9e5      	bls.n	b04 <RTC_Handler+0x88>
			turn_left();
     b38:	4b1c      	ldr	r3, [pc, #112]	; (bac <RTC_Handler+0x130>)
     b3a:	4798      	blx	r3
     b3c:	e7e2      	b.n	b04 <RTC_Handler+0x88>
			turn_right();
     b3e:	4b1c      	ldr	r3, [pc, #112]	; (bb0 <RTC_Handler+0x134>)
     b40:	4798      	blx	r3
     b42:	e7df      	b.n	b04 <RTC_Handler+0x88>
			turn_right();
     b44:	4b1a      	ldr	r3, [pc, #104]	; (bb0 <RTC_Handler+0x134>)
     b46:	4798      	blx	r3
     b48:	e7dc      	b.n	b04 <RTC_Handler+0x88>
	if(turning == 1 && front > 350)
     b4a:	335e      	adds	r3, #94	; 0x5e
     b4c:	33ff      	adds	r3, #255	; 0xff
     b4e:	9a01      	ldr	r2, [sp, #4]
     b50:	429a      	cmp	r2, r3
     b52:	d9db      	bls.n	b0c <RTC_Handler+0x90>
		turning = 0;
     b54:	4a12      	ldr	r2, [pc, #72]	; (ba0 <RTC_Handler+0x124>)
     b56:	2100      	movs	r1, #0
     b58:	6011      	str	r1, [r2, #0]
		PORT->Group[0].OUTCLR.reg = 0x33 << 4;
     b5a:	4b16      	ldr	r3, [pc, #88]	; (bb4 <RTC_Handler+0x138>)
     b5c:	20cc      	movs	r0, #204	; 0xcc
     b5e:	0080      	lsls	r0, r0, #2
     b60:	6158      	str	r0, [r3, #20]
		PORT->Group[0].OUTSET.reg = 0X2 << 8;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     b62:	3831      	subs	r0, #49	; 0x31
     b64:	38ff      	subs	r0, #255	; 0xff
     b66:	6198      	str	r0, [r3, #24]
		PORT->Group[0].OUTSET.reg = 0X2 << 4;      // PA05 : 1, PA04 : 0, PA09 : 1, PA08 : 0
     b68:	38e1      	subs	r0, #225	; 0xe1
     b6a:	38ff      	subs	r0, #255	; 0xff
     b6c:	6198      	str	r0, [r3, #24]
		TC3->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     b6e:	23e1      	movs	r3, #225	; 0xe1
     b70:	005b      	lsls	r3, r3, #1
     b72:	480c      	ldr	r0, [pc, #48]	; (ba4 <RTC_Handler+0x128>)
     b74:	8343      	strh	r3, [r0, #26]
		TC4->COUNT16.CC[1].reg = 450;         // mid speed: on duration 600 / 1000
     b76:	480c      	ldr	r0, [pc, #48]	; (ba8 <RTC_Handler+0x12c>)
     b78:	8343      	strh	r3, [r0, #26]
		stop = 0;
     b7a:	6051      	str	r1, [r2, #4]
}
     b7c:	e7c6      	b.n	b0c <RTC_Handler+0x90>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	40001400 	.word	0x40001400
     b84:	ffffdff8 	.word	0xffffdff8
     b88:	00000514 	.word	0x00000514
     b8c:	ffff9a70 	.word	0xffff9a70
     b90:	000009c4 	.word	0x000009c4
     b94:	20000460 	.word	0x20000460
     b98:	00001edb 	.word	0x00001edb
     b9c:	000088b7 	.word	0x000088b7
     ba0:	20000450 	.word	0x20000450
     ba4:	42002c00 	.word	0x42002c00
     ba8:	42003000 	.word	0x42003000
     bac:	00000a49 	.word	0x00000a49
     bb0:	00000821 	.word	0x00000821
     bb4:	41004400 	.word	0x41004400

00000bb8 <initializeSystemFor48MHz>:
}

void initializeSystemFor48MHz()
{
	// Change the timing of the NVM access
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val; // 1 wait state for operating at 2.7-3.3V at 48MHz.
     bb8:	4948      	ldr	r1, [pc, #288]	; (cdc <initializeSystemFor48MHz+0x124>)
     bba:	684a      	ldr	r2, [r1, #4]
     bbc:	231e      	movs	r3, #30
     bbe:	439a      	bics	r2, r3
     bc0:	3b1c      	subs	r3, #28
     bc2:	4313      	orrs	r3, r2
     bc4:	604b      	str	r3, [r1, #4]

	// Enable the bus clock for the clock system.
	//PM->APBAMASK.bit.GCLK_ = true;
	PM->APBAMASK.bit.GCLK_ = 1;
     bc6:	4a46      	ldr	r2, [pc, #280]	; (ce0 <initializeSystemFor48MHz+0x128>)
     bc8:	6991      	ldr	r1, [r2, #24]
     bca:	2308      	movs	r3, #8
     bcc:	430b      	orrs	r3, r1
     bce:	6193      	str	r3, [r2, #24]

	// Initialise the DFLL to run in closed-loop mode at 48MHz
	// 1. Make a software reset of the clock system.
	//GCLK->CTRL.bit.SWRST = true;
	GCLK->CTRL.bit.SWRST = 1;
     bd0:	4a44      	ldr	r2, [pc, #272]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     bd2:	7813      	ldrb	r3, [r2, #0]
     bd4:	2101      	movs	r1, #1
     bd6:	430b      	orrs	r3, r1
     bd8:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.bit.SWRST && GCLK->STATUS.bit.SYNCBUSY) {};
     bda:	4b42      	ldr	r3, [pc, #264]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	07db      	lsls	r3, r3, #31
     be0:	d503      	bpl.n	bea <initializeSystemFor48MHz+0x32>
     be2:	4b40      	ldr	r3, [pc, #256]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     be4:	785b      	ldrb	r3, [r3, #1]
     be6:	09db      	lsrs	r3, r3, #7
     be8:	d1f7      	bne.n	bda <initializeSystemFor48MHz+0x22>
	// 2. Make sure the OCM8M keeps running.
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     bea:	4b3f      	ldr	r3, [pc, #252]	; (ce8 <initializeSystemFor48MHz+0x130>)
     bec:	6a19      	ldr	r1, [r3, #32]
     bee:	2280      	movs	r2, #128	; 0x80
     bf0:	4391      	bics	r1, r2
     bf2:	6219      	str	r1, [r3, #32]
	
	// 3. Set the division factor to 64, which reduces the 1MHz source to 15.625kHz
	GCLK->GENDIV.reg =
     bf4:	4b3b      	ldr	r3, [pc, #236]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     bf6:	4a3d      	ldr	r2, [pc, #244]	; (cec <initializeSystemFor48MHz+0x134>)
     bf8:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(3) | // Select generator 3
	GCLK_GENDIV_DIV(64); // Set the division factor to 64
	
	// 4. Create generic clock generator 3 for the 15KHz signal of the DFLL
	GCLK->GENCTRL.reg =
     bfa:	4a3d      	ldr	r2, [pc, #244]	; (cf0 <initializeSystemFor48MHz+0x138>)
     bfc:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_ID(3) | // Select generator 3
	GCLK_GENCTRL_SRC_OSC8M | // Select source OSC8M
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     bfe:	4b39      	ldr	r3, [pc, #228]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     c00:	785b      	ldrb	r3, [r3, #1]
     c02:	09db      	lsrs	r3, r3, #7
     c04:	d1fb      	bne.n	bfe <initializeSystemFor48MHz+0x46>
	
	// 5. Configure DFLL with the
	GCLK->CLKCTRL.reg =
     c06:	2286      	movs	r2, #134	; 0x86
     c08:	01d2      	lsls	r2, r2, #7
     c0a:	4b36      	ldr	r3, [pc, #216]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     c0c:	805a      	strh	r2, [r3, #2]
	//GCLK_CLKCTRL_ID_DFLL48M | // Target is DFLL48M
	0x00 | // Target is DFLL48M
	GCLK_CLKCTRL_GEN(3) | // Select generator 3 as source.
	GCLK_CLKCTRL_CLKEN; // Enable the DFLL48M
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     c0e:	4b35      	ldr	r3, [pc, #212]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     c10:	785b      	ldrb	r3, [r3, #1]
     c12:	09db      	lsrs	r3, r3, #7
     c14:	d1fb      	bne.n	c0e <initializeSystemFor48MHz+0x56>
	
	// 6. Workaround to be able to configure the DFLL.
	//SYSCTRL->DFLLCTRL.bit.ONDEMAND = false;
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     c16:	4a34      	ldr	r2, [pc, #208]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c18:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c1a:	2180      	movs	r1, #128	; 0x80
     c1c:	438b      	bics	r3, r1
     c1e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     c20:	4b31      	ldr	r3, [pc, #196]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c22:	68db      	ldr	r3, [r3, #12]
     c24:	06db      	lsls	r3, r3, #27
     c26:	d5fb      	bpl.n	c20 <initializeSystemFor48MHz+0x68>
	
	// 7. Change the multiplication factor.
	SYSCTRL->DFLLMUL.bit.MUL = 3072; // 48MHz / (1MHz / 64)
     c28:	4b2f      	ldr	r3, [pc, #188]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c2c:	0c12      	lsrs	r2, r2, #16
     c2e:	0412      	lsls	r2, r2, #16
     c30:	21c0      	movs	r1, #192	; 0xc0
     c32:	0109      	lsls	r1, r1, #4
     c34:	4311      	orrs	r1, r2
     c36:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.CSTEP = 1; // Coarse step = 1
     c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c3a:	0192      	lsls	r2, r2, #6
     c3c:	0992      	lsrs	r2, r2, #6
     c3e:	2180      	movs	r1, #128	; 0x80
     c40:	04c9      	lsls	r1, r1, #19
     c42:	4311      	orrs	r1, r2
     c44:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLMUL.bit.FSTEP = 1; // Fine step = 1
     c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     c48:	4a2a      	ldr	r2, [pc, #168]	; (cf4 <initializeSystemFor48MHz+0x13c>)
     c4a:	4011      	ands	r1, r2
     c4c:	2280      	movs	r2, #128	; 0x80
     c4e:	0252      	lsls	r2, r2, #9
     c50:	430a      	orrs	r2, r1
     c52:	62da      	str	r2, [r3, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     c54:	4b24      	ldr	r3, [pc, #144]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c56:	68db      	ldr	r3, [r3, #12]
     c58:	06db      	lsls	r3, r3, #27
     c5a:	d5fb      	bpl.n	c54 <initializeSystemFor48MHz+0x9c>
	
	// 8. Start closed-loop mode
	SYSCTRL->DFLLCTRL.reg |=
     c5c:	4a22      	ldr	r2, [pc, #136]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c5e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c60:	2181      	movs	r1, #129	; 0x81
     c62:	0089      	lsls	r1, r1, #2
     c64:	430b      	orrs	r3, r1
     c66:	8493      	strh	r3, [r2, #36]	; 0x24
	SYSCTRL_DFLLCTRL_MODE | // 1 = Closed loop mode.
	SYSCTRL_DFLLCTRL_QLDIS; // 1 = Disable quick lock.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     c68:	4b1f      	ldr	r3, [pc, #124]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c6a:	68db      	ldr	r3, [r3, #12]
     c6c:	06db      	lsls	r3, r3, #27
     c6e:	d5fb      	bpl.n	c68 <initializeSystemFor48MHz+0xb0>
	
	// 9. Clear the lock flags.
	SYSCTRL->INTFLAG.bit.DFLLLCKC = 1;
     c70:	4b1d      	ldr	r3, [pc, #116]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c72:	6899      	ldr	r1, [r3, #8]
     c74:	2280      	movs	r2, #128	; 0x80
     c76:	430a      	orrs	r2, r1
     c78:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLLCKF = 1;
     c7a:	6899      	ldr	r1, [r3, #8]
     c7c:	2240      	movs	r2, #64	; 0x40
     c7e:	430a      	orrs	r2, r1
     c80:	609a      	str	r2, [r3, #8]
	SYSCTRL->INTFLAG.bit.DFLLRDY = 1;
     c82:	6899      	ldr	r1, [r3, #8]
     c84:	2210      	movs	r2, #16
     c86:	430a      	orrs	r2, r1
     c88:	609a      	str	r2, [r3, #8]
	
	// 10. Enable the DFLL
	//SYSCTRL->DFLLCTRL.bit.ENABLE = true;
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
     c8a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     c8c:	2102      	movs	r1, #2
     c8e:	430a      	orrs	r2, r1
     c90:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {}; // Wait for synchronization.
     c92:	4b15      	ldr	r3, [pc, #84]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c94:	68db      	ldr	r3, [r3, #12]
     c96:	06db      	lsls	r3, r3, #27
     c98:	d5fb      	bpl.n	c92 <initializeSystemFor48MHz+0xda>
	
	// 11. Wait for the fine and coarse locks.
	while (!SYSCTRL->INTFLAG.bit.DFLLLCKC && !SYSCTRL->INTFLAG.bit.DFLLLCKF) {};
     c9a:	4b13      	ldr	r3, [pc, #76]	; (ce8 <initializeSystemFor48MHz+0x130>)
     c9c:	689b      	ldr	r3, [r3, #8]
     c9e:	061b      	lsls	r3, r3, #24
     ca0:	d403      	bmi.n	caa <initializeSystemFor48MHz+0xf2>
     ca2:	4b11      	ldr	r3, [pc, #68]	; (ce8 <initializeSystemFor48MHz+0x130>)
     ca4:	689b      	ldr	r3, [r3, #8]
     ca6:	065b      	lsls	r3, r3, #25
     ca8:	d5f7      	bpl.n	c9a <initializeSystemFor48MHz+0xe2>
	
	// 12. Wait until the DFLL is ready.
	while (!SYSCTRL->INTFLAG.bit.DFLLRDY) {};
     caa:	4b0f      	ldr	r3, [pc, #60]	; (ce8 <initializeSystemFor48MHz+0x130>)
     cac:	689b      	ldr	r3, [r3, #8]
     cae:	06db      	lsls	r3, r3, #27
     cb0:	d5fb      	bpl.n	caa <initializeSystemFor48MHz+0xf2>

	// Switch the main clock speed.
	// 1. Set the divisor of generic clock 0 to 0
	GCLK->GENDIV.reg =
     cb2:	2200      	movs	r2, #0
     cb4:	4b0b      	ldr	r3, [pc, #44]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     cb6:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(0) | // Select generator 0
	GCLK_GENDIV_DIV(0);
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     cb8:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     cba:	785b      	ldrb	r3, [r3, #1]
     cbc:	09db      	lsrs	r3, r3, #7
     cbe:	d1fb      	bne.n	cb8 <initializeSystemFor48MHz+0x100>
	
	// 2. Switch generic clock 0 to the DFLL
	GCLK->GENCTRL.reg =
     cc0:	4a08      	ldr	r2, [pc, #32]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     cc2:	4b0d      	ldr	r3, [pc, #52]	; (cf8 <initializeSystemFor48MHz+0x140>)
     cc4:	6053      	str	r3, [r2, #4]
	GCLK_GENCTRL_ID(0) | // Select generator 0
	GCLK_GENCTRL_SRC_DFLL48M | // Select source DFLL
	GCLK_GENCTRL_IDC | // Set improved duty cycle 50/50
	GCLK_GENCTRL_GENEN; // Enable this generic clock generator
	GCLK->GENCTRL.bit.OE = 1 ;  // Output Enable: GCLK_I
     cc6:	6851      	ldr	r1, [r2, #4]
     cc8:	2380      	movs	r3, #128	; 0x80
     cca:	031b      	lsls	r3, r3, #12
     ccc:	430b      	orrs	r3, r1
     cce:	6053      	str	r3, [r2, #4]
	// Prof. Suh added start
	//GCLK->GENDIV.bit.DIV = 8 ;  // 48MHz / 8 (divided by 8), check out DIVSEL for details
	//GCLK->GENCTRL.bit.DIVSEL = 0;  //
	// Prof. Suh added end
	
	while (GCLK->STATUS.bit.SYNCBUSY) {}; // Wait for synchronization
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <initializeSystemFor48MHz+0x12c>)
     cd2:	785b      	ldrb	r3, [r3, #1]
     cd4:	09db      	lsrs	r3, r3, #7
     cd6:	d1fb      	bne.n	cd0 <initializeSystemFor48MHz+0x118>
}
     cd8:	4770      	bx	lr
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	41004000 	.word	0x41004000
     ce0:	40000400 	.word	0x40000400
     ce4:	40000c00 	.word	0x40000c00
     ce8:	40000800 	.word	0x40000800
     cec:	00004003 	.word	0x00004003
     cf0:	00010603 	.word	0x00010603
     cf4:	fc00ffff 	.word	0xfc00ffff
     cf8:	00030700 	.word	0x00030700

00000cfc <I2C_setup>:

void I2C_setup() {
     cfc:	b530      	push	{r4, r5, lr}

	//
	// PORT setup for PA22 and PA23 (I2C)
	//

	PORT->Group[0].PINCFG[22].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <I2C_setup+0x94>)
     d00:	2241      	movs	r2, #65	; 0x41
     d02:	2156      	movs	r1, #86	; 0x56
     d04:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[23].reg = 0x41; // peripheral mux: DRVSTR=1, PMUXEN = 1
     d06:	3101      	adds	r1, #1
     d08:	545a      	strb	r2, [r3, r1]

	PORT->Group[0].PMUX[11].bit.PMUXE = 0x02; // peripheral function C selected
     d0a:	243b      	movs	r4, #59	; 0x3b
     d0c:	5d19      	ldrb	r1, [r3, r4]
     d0e:	3a32      	subs	r2, #50	; 0x32
     d10:	4391      	bics	r1, r2
     d12:	3a0d      	subs	r2, #13
     d14:	2002      	movs	r0, #2
     d16:	4301      	orrs	r1, r0
     d18:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].PMUX[11].bit.PMUXO = 0x02; // peripheral function C selected
     d1a:	5d19      	ldrb	r1, [r3, r4]
     d1c:	200f      	movs	r0, #15
     d1e:	4008      	ands	r0, r1
     d20:	2120      	movs	r1, #32
     d22:	2520      	movs	r5, #32
     d24:	4328      	orrs	r0, r5
     d26:	5518      	strb	r0, [r3, r4]

	// Power Manager
	PM->APBCMASK.bit.SERCOM3_ = 1 ; // Clock Enable for I2C
     d28:	4b1a      	ldr	r3, [pc, #104]	; (d94 <I2C_setup+0x98>)
     d2a:	6a1c      	ldr	r4, [r3, #32]
     d2c:	0020      	movs	r0, r4
     d2e:	4308      	orrs	r0, r1
     d30:	6218      	str	r0, [r3, #32]
	
	//
	// * SERCOM3: I2C
	// * Generator #0 is feeding I2C

	GCLK->CLKCTRL.bit.ID = 0x17; // ID #17 (SERCOM3: I2C)
     d32:	4b19      	ldr	r3, [pc, #100]	; (d98 <I2C_setup+0x9c>)
     d34:	8858      	ldrh	r0, [r3, #2]
     d36:	243f      	movs	r4, #63	; 0x3f
     d38:	43a0      	bics	r0, r4
     d3a:	2417      	movs	r4, #23
     d3c:	4320      	orrs	r0, r4
     d3e:	8058      	strh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0; // Generator #0 selected for I2C
     d40:	8858      	ldrh	r0, [r3, #2]
     d42:	4c16      	ldr	r4, [pc, #88]	; (d9c <I2C_setup+0xa0>)
     d44:	4020      	ands	r0, r4
     d46:	8058      	strh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.CLKEN = 1; // Now, clock is supplied to I2C!
     d48:	885c      	ldrh	r4, [r3, #2]
     d4a:	2080      	movs	r0, #128	; 0x80
     d4c:	01c0      	lsls	r0, r0, #7
     d4e:	4320      	orrs	r0, r4
     d50:	8058      	strh	r0, [r3, #2]
	
	// I2C Setup (Host mode)
	SERCOM3->I2CM.CTRLA.bit.SWRST = 1 ; // software reset
     d52:	4b13      	ldr	r3, [pc, #76]	; (da0 <I2C_setup+0xa4>)
     d54:	681c      	ldr	r4, [r3, #0]
     d56:	2001      	movs	r0, #1
     d58:	4320      	orrs	r0, r4
     d5a:	6018      	str	r0, [r3, #0]
	SERCOM3->I2CM.CTRLA.bit.ENABLE = 0 ; // Disable
     d5c:	681c      	ldr	r4, [r3, #0]
     d5e:	0020      	movs	r0, r4
     d60:	4390      	bics	r0, r2
     d62:	6018      	str	r0, [r3, #0]
	//	SERCOM3->I2CM.CTRLA.bit.LOWTOUTEN = 1 ; // SCL Low Timeout Enable

	SERCOM3->I2CM.CTRLA.bit.MODE = 0x5 ; // Host mode
     d64:	681c      	ldr	r4, [r3, #0]
     d66:	201c      	movs	r0, #28
     d68:	4384      	bics	r4, r0
     d6a:	3808      	subs	r0, #8
     d6c:	4320      	orrs	r0, r4
     d6e:	6018      	str	r0, [r3, #0]
	//SERCOM3->I2CM.BAUD.bit.BAUD = 0x27 ; // 100KHz SCL (0x27 = d'39)
	SERCOM3->I2CM.BAUD.bit.BAUD = 0x20 ; // 100KHz SCL (0x20 = d'32)
     d70:	68d8      	ldr	r0, [r3, #12]
     d72:	24ff      	movs	r4, #255	; 0xff
     d74:	43a0      	bics	r0, r4
     d76:	4301      	orrs	r1, r0
     d78:	60d9      	str	r1, [r3, #12]
	SERCOM3->I2CM.CTRLA.bit.ENABLE = 1 ; // Enable
     d7a:	6819      	ldr	r1, [r3, #0]
     d7c:	430a      	orrs	r2, r1
     d7e:	601a      	str	r2, [r3, #0]
	SERCOM3->I2CM.STATUS.bit.BUSSTATE = 1 ; // IDLE state
     d80:	8b5a      	ldrh	r2, [r3, #26]
     d82:	2130      	movs	r1, #48	; 0x30
     d84:	438a      	bics	r2, r1
     d86:	2110      	movs	r1, #16
     d88:	430a      	orrs	r2, r1
     d8a:	835a      	strh	r2, [r3, #26]
}
     d8c:	bd30      	pop	{r4, r5, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	41004400 	.word	0x41004400
     d94:	40000400 	.word	0x40000400
     d98:	40000c00 	.word	0x40000c00
     d9c:	fffff0ff 	.word	0xfffff0ff
     da0:	42001400 	.word	0x42001400

00000da4 <main>:
{	
     da4:	b5f0      	push	{r4, r5, r6, r7, lr}
     da6:	46de      	mov	lr, fp
     da8:	4657      	mov	r7, sl
     daa:	4646      	mov	r6, r8
     dac:	b5c0      	push	{r6, r7, lr}
     dae:	b088      	sub	sp, #32
   char msg[] = {"Hello World!"};
     db0:	ab04      	add	r3, sp, #16
     db2:	4a7d      	ldr	r2, [pc, #500]	; (fa8 <main+0x204>)
     db4:	ca13      	ldmia	r2!, {r0, r1, r4}
     db6:	c313      	stmia	r3!, {r0, r1, r4}
     db8:	0019      	movs	r1, r3
     dba:	7813      	ldrb	r3, [r2, #0]
     dbc:	700b      	strb	r3, [r1, #0]
   SystemInit();
     dbe:	4b7b      	ldr	r3, [pc, #492]	; (fac <main+0x208>)
     dc0:	4798      	blx	r3
   initializeSystemFor48MHz();
     dc2:	4b7b      	ldr	r3, [pc, #492]	; (fb0 <main+0x20c>)
     dc4:	4798      	blx	r3
   GCLK_setup();
     dc6:	4b7b      	ldr	r3, [pc, #492]	; (fb4 <main+0x210>)
     dc8:	4798      	blx	r3
   USART_setup();
     dca:	4b7b      	ldr	r3, [pc, #492]	; (fb8 <main+0x214>)
     dcc:	4798      	blx	r3
   PORT_setup();
     dce:	4b7b      	ldr	r3, [pc, #492]	; (fbc <main+0x218>)
     dd0:	4798      	blx	r3
   TC3_setup();
     dd2:	4b7b      	ldr	r3, [pc, #492]	; (fc0 <main+0x21c>)
     dd4:	4798      	blx	r3
   TC4_setup();
     dd6:	4b7b      	ldr	r3, [pc, #492]	; (fc4 <main+0x220>)
     dd8:	4798      	blx	r3
   TC5_setup();
     dda:	4b7b      	ldr	r3, [pc, #492]	; (fc8 <main+0x224>)
     ddc:	4798      	blx	r3
   RTC_setup();
     dde:	4b7b      	ldr	r3, [pc, #492]	; (fcc <main+0x228>)
     de0:	4798      	blx	r3
   I2C_setup();
     de2:	4b7b      	ldr	r3, [pc, #492]	; (fd0 <main+0x22c>)
     de4:	4798      	blx	r3
   count = 0;
     de6:	2300      	movs	r3, #0
	   if (SERCOM0->USART.INTFLAG.bit.DRE == 1) {
     de8:	4a7a      	ldr	r2, [pc, #488]	; (fd4 <main+0x230>)
     dea:	7e12      	ldrb	r2, [r2, #24]
     dec:	07d2      	lsls	r2, r2, #31
     dee:	d5fb      	bpl.n	de8 <main+0x44>
		   if (count == msg_size) {
     df0:	2b0d      	cmp	r3, #13
     df2:	d005      	beq.n	e00 <main+0x5c>
			   SERCOM0->USART.DATA.reg	= msg[count];
     df4:	aa04      	add	r2, sp, #16
     df6:	5cd1      	ldrb	r1, [r2, r3]
     df8:	4a76      	ldr	r2, [pc, #472]	; (fd4 <main+0x230>)
     dfa:	8511      	strh	r1, [r2, #40]	; 0x28
			   count++;
     dfc:	3301      	adds	r3, #1
     dfe:	e7f3      	b.n	de8 <main+0x44>
			   SERCOM0->USART.DATA.reg	= 10; // Line Feed
     e00:	220a      	movs	r2, #10
     e02:	4b74      	ldr	r3, [pc, #464]	; (fd4 <main+0x230>)
     e04:	851a      	strh	r2, [r3, #40]	; 0x28
			   while (!SERCOM0->USART.INTFLAG.bit.DRE); // wait until data register is empty
     e06:	4b73      	ldr	r3, [pc, #460]	; (fd4 <main+0x230>)
     e08:	7e1b      	ldrb	r3, [r3, #24]
     e0a:	07db      	lsls	r3, r3, #31
     e0c:	d5fb      	bpl.n	e06 <main+0x62>
			   SERCOM0->USART.DATA.reg	= 13; // Carriage Return
     e0e:	220d      	movs	r2, #13
     e10:	4b70      	ldr	r3, [pc, #448]	; (fd4 <main+0x230>)
     e12:	851a      	strh	r2, [r3, #40]	; 0x28
   NVIC->ISER[0] = (1 << 3) | (1 << 20) | (1 << 17);  // Interrupt Set Enable
     e14:	4b70      	ldr	r3, [pc, #448]	; (fd8 <main+0x234>)
     e16:	4a71      	ldr	r2, [pc, #452]	; (fdc <main+0x238>)
     e18:	601a      	str	r2, [r3, #0]
   NVIC->IP[5] = 0x10 << 0;            // priority for TC5: IP5[7:0] = 0x80 (=b1000_0000, 2-bit MSBs)
     e1a:	2110      	movs	r1, #16
     e1c:	22c5      	movs	r2, #197	; 0xc5
     e1e:	0092      	lsls	r2, r2, #2
     e20:	5099      	str	r1, [r3, r2]
   NVIC->IP[0] = 0x80 << 24;            // priority for RTC: IP5[7:0] = 0x80 (=b1000_0000, 2-bit MSBs)
     e22:	2180      	movs	r1, #128	; 0x80
     e24:	0609      	lsls	r1, r1, #24
     e26:	3a14      	subs	r2, #20
     e28:	5099      	str	r1, [r3, r2]
   NVIC->IP[4] = 0xC0 << 0;            // priority for RTC: IP5[7:0] = 0x80 (=b1000_0000, 2-bit MSBs)
     e2a:	21c0      	movs	r1, #192	; 0xc0
     e2c:	3210      	adds	r2, #16
     e2e:	5099      	str	r1, [r3, r2]
   uart_count = 0;
     e30:	2400      	movs	r4, #0
   num_packet = 0;
     e32:	2700      	movs	r7, #0
   started = 0;
     e34:	2600      	movs	r6, #0
     e36:	e089      	b.n	f4c <main+0x1a8>
			   num_packet = 0;
     e38:	2700      	movs	r7, #0
     e3a:	e087      	b.n	f4c <main+0x1a8>
			   case 1:	ld19packet[num_packet].ver_len = rx_data;
     e3c:	007b      	lsls	r3, r7, #1
     e3e:	19db      	adds	r3, r3, r7
     e40:	011b      	lsls	r3, r3, #4
     e42:	1bdb      	subs	r3, r3, r7
     e44:	4a66      	ldr	r2, [pc, #408]	; (fe0 <main+0x23c>)
     e46:	18d3      	adds	r3, r2, r3
     e48:	705d      	strb	r5, [r3, #1]
			   break;
     e4a:	e06f      	b.n	f2c <main+0x188>
			   case 3: ld19packet[num_packet].speed = (uint16_t) ((rx_data << 8) | speed_low);
     e4c:	022b      	lsls	r3, r5, #8
     e4e:	4652      	mov	r2, sl
     e50:	4313      	orrs	r3, r2
     e52:	b29b      	uxth	r3, r3
     e54:	007a      	lsls	r2, r7, #1
     e56:	19d2      	adds	r2, r2, r7
     e58:	0112      	lsls	r2, r2, #4
     e5a:	1bd2      	subs	r2, r2, r7
     e5c:	4960      	ldr	r1, [pc, #384]	; (fe0 <main+0x23c>)
     e5e:	188a      	adds	r2, r1, r2
     e60:	7093      	strb	r3, [r2, #2]
     e62:	0a1b      	lsrs	r3, r3, #8
     e64:	70d3      	strb	r3, [r2, #3]
			   break;
     e66:	e061      	b.n	f2c <main+0x188>
			   case 5: ld19packet[num_packet].start_angle = (uint16_t) ((rx_data << 8) | speed_low);
     e68:	022b      	lsls	r3, r5, #8
     e6a:	4652      	mov	r2, sl
     e6c:	4313      	orrs	r3, r2
     e6e:	b29b      	uxth	r3, r3
     e70:	007a      	lsls	r2, r7, #1
     e72:	19d2      	adds	r2, r2, r7
     e74:	0112      	lsls	r2, r2, #4
     e76:	1bd2      	subs	r2, r2, r7
     e78:	4959      	ldr	r1, [pc, #356]	; (fe0 <main+0x23c>)
     e7a:	188a      	adds	r2, r1, r2
     e7c:	7113      	strb	r3, [r2, #4]
     e7e:	0a1b      	lsrs	r3, r3, #8
     e80:	7153      	strb	r3, [r2, #5]
			   break;
     e82:	e053      	b.n	f2c <main+0x188>
			   npoint = (uart_count - 6) / 3 ;
     e84:	1fa3      	subs	r3, r4, #6
     e86:	2103      	movs	r1, #3
     e88:	9301      	str	r3, [sp, #4]
     e8a:	0018      	movs	r0, r3
     e8c:	4b55      	ldr	r3, [pc, #340]	; (fe4 <main+0x240>)
     e8e:	4798      	blx	r3
     e90:	9002      	str	r0, [sp, #8]
			   offset = (uart_count - 6) % 3 ;
     e92:	2103      	movs	r1, #3
     e94:	9801      	ldr	r0, [sp, #4]
     e96:	4b54      	ldr	r3, [pc, #336]	; (fe8 <main+0x244>)
     e98:	4798      	blx	r3
			   if      (offset == 0) distance_low = rx_data;
     e9a:	2900      	cmp	r1, #0
     e9c:	d063      	beq.n	f66 <main+0x1c2>
			   else if (offset == 1) ld19packet[num_packet].point[npoint].distance =
     e9e:	2901      	cmp	r1, #1
     ea0:	d00e      	beq.n	ec0 <main+0x11c>
			   else if (offset == 2) ld19packet[num_packet].point[npoint].intensity =
     ea2:	2902      	cmp	r1, #2
     ea4:	d142      	bne.n	f2c <main+0x188>
     ea6:	9b02      	ldr	r3, [sp, #8]
     ea8:	005a      	lsls	r2, r3, #1
     eaa:	469c      	mov	ip, r3
     eac:	4462      	add	r2, ip
     eae:	007b      	lsls	r3, r7, #1
     eb0:	19db      	adds	r3, r3, r7
     eb2:	011b      	lsls	r3, r3, #4
     eb4:	1bdb      	subs	r3, r3, r7
     eb6:	18d3      	adds	r3, r2, r3
     eb8:	4a49      	ldr	r2, [pc, #292]	; (fe0 <main+0x23c>)
     eba:	18d3      	adds	r3, r2, r3
     ebc:	721d      	strb	r5, [r3, #8]
     ebe:	e035      	b.n	f2c <main+0x188>
			   (uint16_t) ((rx_data << 8) | distance_low);
     ec0:	022b      	lsls	r3, r5, #8
     ec2:	9a03      	ldr	r2, [sp, #12]
     ec4:	4313      	orrs	r3, r2
     ec6:	b29b      	uxth	r3, r3
			   else if (offset == 1) ld19packet[num_packet].point[npoint].distance =
     ec8:	9a02      	ldr	r2, [sp, #8]
     eca:	0051      	lsls	r1, r2, #1
     ecc:	4694      	mov	ip, r2
     ece:	4461      	add	r1, ip
     ed0:	007a      	lsls	r2, r7, #1
     ed2:	19d2      	adds	r2, r2, r7
     ed4:	0112      	lsls	r2, r2, #4
     ed6:	1bd2      	subs	r2, r2, r7
     ed8:	188a      	adds	r2, r1, r2
     eda:	4941      	ldr	r1, [pc, #260]	; (fe0 <main+0x23c>)
     edc:	188a      	adds	r2, r1, r2
     ede:	7193      	strb	r3, [r2, #6]
     ee0:	0a1b      	lsrs	r3, r3, #8
     ee2:	71d3      	strb	r3, [r2, #7]
     ee4:	e022      	b.n	f2c <main+0x188>
			   case 42: end_angle_low = rx_data;
     ee6:	46a8      	mov	r8, r5
			   break;
     ee8:	e020      	b.n	f2c <main+0x188>
			   case 43: ld19packet[num_packet].end_angle = (uint16_t) ((rx_data << 8) | end_angle_low);
     eea:	022b      	lsls	r3, r5, #8
     eec:	4642      	mov	r2, r8
     eee:	4313      	orrs	r3, r2
     ef0:	b29b      	uxth	r3, r3
     ef2:	007a      	lsls	r2, r7, #1
     ef4:	19d2      	adds	r2, r2, r7
     ef6:	0112      	lsls	r2, r2, #4
     ef8:	1bd2      	subs	r2, r2, r7
     efa:	4939      	ldr	r1, [pc, #228]	; (fe0 <main+0x23c>)
     efc:	188a      	adds	r2, r1, r2
     efe:	3228      	adds	r2, #40	; 0x28
     f00:	7093      	strb	r3, [r2, #2]
     f02:	0a1b      	lsrs	r3, r3, #8
     f04:	70d3      	strb	r3, [r2, #3]
			   break;
     f06:	e011      	b.n	f2c <main+0x188>
			   case 44: timestamp_low = rx_data;
     f08:	46ab      	mov	fp, r5
			   break;
     f0a:	e00f      	b.n	f2c <main+0x188>
			   case 45: ld19packet[num_packet].timestamp = (uint16_t) ((rx_data << 8) | timestamp_low);
     f0c:	022b      	lsls	r3, r5, #8
     f0e:	465a      	mov	r2, fp
     f10:	4313      	orrs	r3, r2
     f12:	b29b      	uxth	r3, r3
     f14:	007a      	lsls	r2, r7, #1
     f16:	19d2      	adds	r2, r2, r7
     f18:	0112      	lsls	r2, r2, #4
     f1a:	1bd2      	subs	r2, r2, r7
     f1c:	4930      	ldr	r1, [pc, #192]	; (fe0 <main+0x23c>)
     f1e:	188a      	adds	r2, r1, r2
     f20:	3228      	adds	r2, #40	; 0x28
     f22:	7113      	strb	r3, [r2, #4]
     f24:	0a1b      	lsrs	r3, r3, #8
     f26:	7153      	strb	r3, [r2, #5]
			   break;
     f28:	e000      	b.n	f2c <main+0x188>
			   case 2: speed_low = rx_data;
     f2a:	46aa      	mov	sl, r5
		   if ((uart_count == 1) & rx_data == 0x2C) { // VerLen: 0x2C
     f2c:	1e63      	subs	r3, r4, #1
     f2e:	425a      	negs	r2, r3
     f30:	415a      	adcs	r2, r3
     f32:	002b      	movs	r3, r5
     f34:	3b2c      	subs	r3, #44	; 0x2c
     f36:	4259      	negs	r1, r3
     f38:	414b      	adcs	r3, r1
     f3a:	4013      	ands	r3, r2
     f3c:	d015      	beq.n	f6a <main+0x1c6>
			   uart_count++;
     f3e:	3401      	adds	r4, #1
			   started = 1;
     f40:	001e      	movs	r6, r3
		   if (num_packet == PACKET_COUNT)	{
     f42:	2f64      	cmp	r7, #100	; 0x64
     f44:	d100      	bne.n	f48 <main+0x1a4>
     f46:	e777      	b.n	e38 <main+0x94>
			   } else if (uart_count == (packet_len-1)) {
     f48:	2c2e      	cmp	r4, #46	; 0x2e
     f4a:	d02a      	beq.n	fa2 <main+0x1fe>
	   rxc_flag = SERCOM2->USART.INTFLAG.bit.RXC; // check out RXC (Receive Complete) flag
     f4c:	4b27      	ldr	r3, [pc, #156]	; (fec <main+0x248>)
     f4e:	7e1b      	ldrb	r3, [r3, #24]
	   if (rxc_flag == 1)	{
     f50:	075b      	lsls	r3, r3, #29
     f52:	d5fb      	bpl.n	f4c <main+0x1a8>
		   rx_data	= SERCOM2->USART.DATA.reg; // Read the received data
     f54:	4b25      	ldr	r3, [pc, #148]	; (fec <main+0x248>)
     f56:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
     f58:	b2ed      	uxtb	r5, r5
		   switch (uart_count)
     f5a:	2c2d      	cmp	r4, #45	; 0x2d
     f5c:	d8e6      	bhi.n	f2c <main+0x188>
     f5e:	00a3      	lsls	r3, r4, #2
     f60:	4a23      	ldr	r2, [pc, #140]	; (ff0 <main+0x24c>)
     f62:	58d3      	ldr	r3, [r2, r3]
     f64:	469f      	mov	pc, r3
			   if      (offset == 0) distance_low = rx_data;
     f66:	9503      	str	r5, [sp, #12]
     f68:	e7e0      	b.n	f2c <main+0x188>
			   } else if (started & (uart_count > 0) & (uart_count < (packet_len-1))) {
     f6a:	0022      	movs	r2, r4
     f6c:	1e53      	subs	r3, r2, #1
     f6e:	419a      	sbcs	r2, r3
     f70:	2300      	movs	r3, #0
     f72:	212d      	movs	r1, #45	; 0x2d
     f74:	42a1      	cmp	r1, r4
     f76:	415b      	adcs	r3, r3
     f78:	4032      	ands	r2, r6
     f7a:	4013      	ands	r3, r2
     f7c:	d001      	beq.n	f82 <main+0x1de>
			   uart_count++;
     f7e:	3401      	adds	r4, #1
     f80:	e7df      	b.n	f42 <main+0x19e>
			   } else if (started & (uart_count == (packet_len-1))) {
     f82:	0022      	movs	r2, r4
     f84:	3a2e      	subs	r2, #46	; 0x2e
     f86:	4251      	negs	r1, r2
     f88:	414a      	adcs	r2, r1
     f8a:	b2d2      	uxtb	r2, r2
     f8c:	2e00      	cmp	r6, #0
     f8e:	d004      	beq.n	f9a <main+0x1f6>
     f90:	2a00      	cmp	r2, #0
     f92:	d002      	beq.n	f9a <main+0x1f6>
			   started = 0;
     f94:	001e      	movs	r6, r3
			   uart_count = 0;
     f96:	2400      	movs	r4, #0
     f98:	e7d3      	b.n	f42 <main+0x19e>
			   } else if (rx_data == PKG_HEADER) { // header: 0x54
     f9a:	2d54      	cmp	r5, #84	; 0x54
     f9c:	d1d1      	bne.n	f42 <main+0x19e>
			   uart_count++;
     f9e:	2401      	movs	r4, #1
     fa0:	e7cf      	b.n	f42 <main+0x19e>
			   num_packet++;
     fa2:	3701      	adds	r7, #1
     fa4:	e7d2      	b.n	f4c <main+0x1a8>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	00002974 	.word	0x00002974
     fac:	000001dd 	.word	0x000001dd
     fb0:	00000bb9 	.word	0x00000bb9
     fb4:	00000421 	.word	0x00000421
     fb8:	000005c9 	.word	0x000005c9
     fbc:	000004cd 	.word	0x000004cd
     fc0:	000006cd 	.word	0x000006cd
     fc4:	00000749 	.word	0x00000749
     fc8:	000007c5 	.word	0x000007c5
     fcc:	00000575 	.word	0x00000575
     fd0:	00000cfd 	.word	0x00000cfd
     fd4:	42000800 	.word	0x42000800
     fd8:	e000e100 	.word	0xe000e100
     fdc:	00120008 	.word	0x00120008
     fe0:	20000460 	.word	0x20000460
     fe4:	000013d9 	.word	0x000013d9
     fe8:	000014e5 	.word	0x000014e5
     fec:	42001000 	.word	0x42001000
     ff0:	00002884 	.word	0x00002884

00000ff4 <LIS2DH_I2C_write>:

void LIS2DH_I2C_write(unsigned char reg_addr, unsigned char data) {
     ff4:	b510      	push	{r4, lr}
	
	//
	SERCOM3->I2CM.ADDR.bit.ADDR = 0x30 ; // LIS2DH address (0x18) + Write (0)
     ff6:	4c13      	ldr	r4, [pc, #76]	; (1044 <LIS2DH_I2C_write+0x50>)
     ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ffa:	0adb      	lsrs	r3, r3, #11
     ffc:	02db      	lsls	r3, r3, #11
     ffe:	2230      	movs	r2, #48	; 0x30
    1000:	431a      	orrs	r2, r3
    1002:	6262      	str	r2, [r4, #36]	; 0x24
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    1004:	4b0f      	ldr	r3, [pc, #60]	; (1044 <LIS2DH_I2C_write+0x50>)
    1006:	7e1b      	ldrb	r3, [r3, #24]
    1008:	07db      	lsls	r3, r3, #31
    100a:	d5fb      	bpl.n	1004 <LIS2DH_I2C_write+0x10>
    100c:	4b0d      	ldr	r3, [pc, #52]	; (1044 <LIS2DH_I2C_write+0x50>)
    100e:	8b5b      	ldrh	r3, [r3, #26]
    1010:	075b      	lsls	r3, r3, #29
    1012:	d4f7      	bmi.n	1004 <LIS2DH_I2C_write+0x10>
	SERCOM3->I2CM.DATA.bit.DATA = reg_addr ; //
    1014:	2328      	movs	r3, #40	; 0x28
    1016:	4a0b      	ldr	r2, [pc, #44]	; (1044 <LIS2DH_I2C_write+0x50>)
    1018:	54d0      	strb	r0, [r2, r3]
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <LIS2DH_I2C_write+0x50>)
    101c:	7e1b      	ldrb	r3, [r3, #24]
    101e:	07db      	lsls	r3, r3, #31
    1020:	d5fb      	bpl.n	101a <LIS2DH_I2C_write+0x26>
    1022:	4b08      	ldr	r3, [pc, #32]	; (1044 <LIS2DH_I2C_write+0x50>)
    1024:	8b5b      	ldrh	r3, [r3, #26]
    1026:	075b      	lsls	r3, r3, #29
    1028:	d4f7      	bmi.n	101a <LIS2DH_I2C_write+0x26>

	//
	SERCOM3->I2CM.DATA.bit.DATA = data ; //
    102a:	2328      	movs	r3, #40	; 0x28
    102c:	4a05      	ldr	r2, [pc, #20]	; (1044 <LIS2DH_I2C_write+0x50>)
    102e:	54d1      	strb	r1, [r2, r3]
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <LIS2DH_I2C_write+0x50>)
    1032:	7e1b      	ldrb	r3, [r3, #24]
    1034:	07db      	lsls	r3, r3, #31
    1036:	d5fb      	bpl.n	1030 <LIS2DH_I2C_write+0x3c>
    1038:	4b02      	ldr	r3, [pc, #8]	; (1044 <LIS2DH_I2C_write+0x50>)
    103a:	8b5b      	ldrh	r3, [r3, #26]
    103c:	075b      	lsls	r3, r3, #29
    103e:	d4f7      	bmi.n	1030 <LIS2DH_I2C_write+0x3c>
	
}
    1040:	bd10      	pop	{r4, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	42001400 	.word	0x42001400

00001048 <LIS2DH_I2C_read>:

unsigned char LIS2DH_I2C_read(unsigned char reg_addr) {
	
	//
	SERCOM3->I2CM.ADDR.bit.ADDR = 0x30 ; // LIS2DH address (0x18) + Write (0)
    1048:	4919      	ldr	r1, [pc, #100]	; (10b0 <LIS2DH_I2C_read+0x68>)
    104a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    104c:	0adb      	lsrs	r3, r3, #11
    104e:	02db      	lsls	r3, r3, #11
    1050:	2230      	movs	r2, #48	; 0x30
    1052:	431a      	orrs	r2, r3
    1054:	624a      	str	r2, [r1, #36]	; 0x24
	// MB (Host on Bus) is set when a byte is transmitted in Host Write mode.
	// RXNAK (Received Not Acknowledge) indicates whether the last address or data packet sent was acked or not
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    1056:	4b16      	ldr	r3, [pc, #88]	; (10b0 <LIS2DH_I2C_read+0x68>)
    1058:	7e1b      	ldrb	r3, [r3, #24]
    105a:	07db      	lsls	r3, r3, #31
    105c:	d5fb      	bpl.n	1056 <LIS2DH_I2C_read+0xe>
    105e:	4b14      	ldr	r3, [pc, #80]	; (10b0 <LIS2DH_I2C_read+0x68>)
    1060:	8b5b      	ldrh	r3, [r3, #26]
    1062:	075b      	lsls	r3, r3, #29
    1064:	d4f7      	bmi.n	1056 <LIS2DH_I2C_read+0xe>

	SERCOM3->I2CM.DATA.bit.DATA = reg_addr ; //
    1066:	2328      	movs	r3, #40	; 0x28
    1068:	4a11      	ldr	r2, [pc, #68]	; (10b0 <LIS2DH_I2C_read+0x68>)
    106a:	54d0      	strb	r0, [r2, r3]
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    106c:	4b10      	ldr	r3, [pc, #64]	; (10b0 <LIS2DH_I2C_read+0x68>)
    106e:	7e1b      	ldrb	r3, [r3, #24]
    1070:	07db      	lsls	r3, r3, #31
    1072:	d5fb      	bpl.n	106c <LIS2DH_I2C_read+0x24>
    1074:	4b0e      	ldr	r3, [pc, #56]	; (10b0 <LIS2DH_I2C_read+0x68>)
    1076:	8b5b      	ldrh	r3, [r3, #26]
    1078:	075b      	lsls	r3, r3, #29
    107a:	d4f7      	bmi.n	106c <LIS2DH_I2C_read+0x24>

	//
	SERCOM3->I2CM.ADDR.bit.ADDR = 0x31 ; // LIS2DH address (0x18) + Read (1)
    107c:	490c      	ldr	r1, [pc, #48]	; (10b0 <LIS2DH_I2C_read+0x68>)
    107e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1080:	0adb      	lsrs	r3, r3, #11
    1082:	02db      	lsls	r3, r3, #11
    1084:	2231      	movs	r2, #49	; 0x31
    1086:	431a      	orrs	r2, r3
    1088:	624a      	str	r2, [r1, #36]	; 0x24
	// SB (Client on Bus) is set when a byte is successfully received in Host Read mode
	while (SERCOM3->I2CM.INTFLAG.bit.SB != 1); // Check out SB (Client on Bus) flag
    108a:	4b09      	ldr	r3, [pc, #36]	; (10b0 <LIS2DH_I2C_read+0x68>)
    108c:	7e1b      	ldrb	r3, [r3, #24]
    108e:	079b      	lsls	r3, r3, #30
    1090:	d5fb      	bpl.n	108a <LIS2DH_I2C_read+0x42>
	
	SERCOM3->I2CM.CTRLB.bit.ACKACT = 1 ; // Send NACK
    1092:	4b07      	ldr	r3, [pc, #28]	; (10b0 <LIS2DH_I2C_read+0x68>)
    1094:	6859      	ldr	r1, [r3, #4]
    1096:	2280      	movs	r2, #128	; 0x80
    1098:	02d2      	lsls	r2, r2, #11
    109a:	430a      	orrs	r2, r1
    109c:	605a      	str	r2, [r3, #4]
	SERCOM3->I2CM.CTRLB.bit.CMD = 3 ; // Execute ACK succeeded by STOP condition
    109e:	6859      	ldr	r1, [r3, #4]
    10a0:	22c0      	movs	r2, #192	; 0xc0
    10a2:	0292      	lsls	r2, r2, #10
    10a4:	430a      	orrs	r2, r1
    10a6:	605a      	str	r2, [r3, #4]
	return (SERCOM3->I2CM.DATA.bit.DATA); //
    10a8:	2228      	movs	r2, #40	; 0x28
    10aa:	5c98      	ldrb	r0, [r3, r2]
    10ac:	b2c0      	uxtb	r0, r0
}
    10ae:	4770      	bx	lr
    10b0:	42001400 	.word	0x42001400

000010b4 <LIS2DH_I2C_read_multiple_data>:

void LIS2DH_I2C_read_multiple_data(unsigned char reg_addr, unsigned char size, unsigned char * buffer) {
    10b4:	b530      	push	{r4, r5, lr}
	
	//
	SERCOM3->I2CM.ADDR.bit.ADDR = 0x30 ; // LIS2DH address (0x18) + Write (0)
    10b6:	4d27      	ldr	r5, [pc, #156]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10ba:	0adb      	lsrs	r3, r3, #11
    10bc:	02db      	lsls	r3, r3, #11
    10be:	2430      	movs	r4, #48	; 0x30
    10c0:	431c      	orrs	r4, r3
    10c2:	626c      	str	r4, [r5, #36]	; 0x24
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    10c4:	4b23      	ldr	r3, [pc, #140]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10c6:	7e1b      	ldrb	r3, [r3, #24]
    10c8:	07db      	lsls	r3, r3, #31
    10ca:	d5fb      	bpl.n	10c4 <LIS2DH_I2C_read_multiple_data+0x10>
    10cc:	4b21      	ldr	r3, [pc, #132]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10ce:	8b5b      	ldrh	r3, [r3, #26]
    10d0:	075b      	lsls	r3, r3, #29
    10d2:	d4f7      	bmi.n	10c4 <LIS2DH_I2C_read_multiple_data+0x10>

	SERCOM3->I2CM.DATA.bit.DATA = reg_addr | 0x80; // MSB in register address should be '1'
    10d4:	2380      	movs	r3, #128	; 0x80
    10d6:	425b      	negs	r3, r3
    10d8:	4303      	orrs	r3, r0
    10da:	b2db      	uxtb	r3, r3
    10dc:	2028      	movs	r0, #40	; 0x28
    10de:	4c1d      	ldr	r4, [pc, #116]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10e0:	5423      	strb	r3, [r4, r0]
	while((SERCOM3->I2CM.INTFLAG.bit.MB != 1) || (SERCOM3->I2CM.STATUS.bit.RXNACK != 0));
    10e2:	4b1c      	ldr	r3, [pc, #112]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10e4:	7e1b      	ldrb	r3, [r3, #24]
    10e6:	07db      	lsls	r3, r3, #31
    10e8:	d5fb      	bpl.n	10e2 <LIS2DH_I2C_read_multiple_data+0x2e>
    10ea:	4b1a      	ldr	r3, [pc, #104]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10ec:	8b5b      	ldrh	r3, [r3, #26]
    10ee:	075b      	lsls	r3, r3, #29
    10f0:	d4f7      	bmi.n	10e2 <LIS2DH_I2C_read_multiple_data+0x2e>

	//
	SERCOM3->I2CM.ADDR.bit.ADDR = 0x31 ; // LIS2DH address (0x18) + Read (1)
    10f2:	4c18      	ldr	r4, [pc, #96]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    10f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    10f6:	0adb      	lsrs	r3, r3, #11
    10f8:	02db      	lsls	r3, r3, #11
    10fa:	2031      	movs	r0, #49	; 0x31
    10fc:	4318      	orrs	r0, r3
    10fe:	6260      	str	r0, [r4, #36]	; 0x24

	while (size != 0 ) {
    1100:	e018      	b.n	1134 <LIS2DH_I2C_read_multiple_data+0x80>

		while (SERCOM3->I2CM.INTFLAG.bit.SB != 1); // Check out SB (Client on Bus) flag: a byte is successfully received!
    1102:	4b14      	ldr	r3, [pc, #80]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    1104:	7e1b      	ldrb	r3, [r3, #24]
    1106:	079b      	lsls	r3, r3, #30
    1108:	d5fb      	bpl.n	1102 <LIS2DH_I2C_read_multiple_data+0x4e>
		
		*buffer = SERCOM3->I2CM.DATA.reg;
    110a:	2328      	movs	r3, #40	; 0x28
    110c:	4811      	ldr	r0, [pc, #68]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    110e:	5cc3      	ldrb	r3, [r0, r3]
    1110:	7013      	strb	r3, [r2, #0]
		buffer++;
    1112:	3201      	adds	r2, #1
		
		if (size == 1) {
    1114:	2901      	cmp	r1, #1
    1116:	d010      	beq.n	113a <LIS2DH_I2C_read_multiple_data+0x86>
			SERCOM3->I2CM.CTRLB.bit.ACKACT = 1 ; // Send NACK
			SERCOM3->I2CM.CTRLB.bit.CMD = 3 ; // Execute ACK succeeded by STOP condition
		}
		else {
			SERCOM3->I2CM.CTRLB.bit.ACKACT = 0; // Send ACK
    1118:	4b0e      	ldr	r3, [pc, #56]	; (1154 <LIS2DH_I2C_read_multiple_data+0xa0>)
    111a:	685c      	ldr	r4, [r3, #4]
    111c:	480e      	ldr	r0, [pc, #56]	; (1158 <LIS2DH_I2C_read_multiple_data+0xa4>)
    111e:	4020      	ands	r0, r4
    1120:	6058      	str	r0, [r3, #4]
			SERCOM3->I2CM.CTRLB.bit.CMD = 2 ; // Execute ACK
    1122:	685c      	ldr	r4, [r3, #4]
    1124:	480d      	ldr	r0, [pc, #52]	; (115c <LIS2DH_I2C_read_multiple_data+0xa8>)
    1126:	4004      	ands	r4, r0
    1128:	2080      	movs	r0, #128	; 0x80
    112a:	0280      	lsls	r0, r0, #10
    112c:	4320      	orrs	r0, r4
    112e:	6058      	str	r0, [r3, #4]
			
		}
		
		size--;
    1130:	3901      	subs	r1, #1
    1132:	b2c9      	uxtb	r1, r1
	while (size != 0 ) {
    1134:	2900      	cmp	r1, #0
    1136:	d1e4      	bne.n	1102 <LIS2DH_I2C_read_multiple_data+0x4e>
	};
}
    1138:	bd30      	pop	{r4, r5, pc}
			SERCOM3->I2CM.CTRLB.bit.ACKACT = 1 ; // Send NACK
    113a:	0003      	movs	r3, r0
    113c:	6844      	ldr	r4, [r0, #4]
    113e:	2080      	movs	r0, #128	; 0x80
    1140:	02c0      	lsls	r0, r0, #11
    1142:	4320      	orrs	r0, r4
    1144:	6058      	str	r0, [r3, #4]
			SERCOM3->I2CM.CTRLB.bit.CMD = 3 ; // Execute ACK succeeded by STOP condition
    1146:	685c      	ldr	r4, [r3, #4]
    1148:	20c0      	movs	r0, #192	; 0xc0
    114a:	0280      	lsls	r0, r0, #10
    114c:	4320      	orrs	r0, r4
    114e:	6058      	str	r0, [r3, #4]
    1150:	e7ee      	b.n	1130 <LIS2DH_I2C_read_multiple_data+0x7c>
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	42001400 	.word	0x42001400
    1158:	fffbffff 	.word	0xfffbffff
    115c:	fffcffff 	.word	0xfffcffff

00001160 <bytes_to_ints>:

void bytes_to_ints(unsigned char * buffer, short * x_mg, short * y_mg, short * z_mg) {
    1160:	b570      	push	{r4, r5, r6, lr}

	short x, y, z ;

	x = (short) ((buffer[1] << 8) | buffer[0]) >> 6; // 10-bit data
    1162:	7845      	ldrb	r5, [r0, #1]
    1164:	022d      	lsls	r5, r5, #8
    1166:	7804      	ldrb	r4, [r0, #0]
    1168:	4325      	orrs	r5, r4
    116a:	b22d      	sxth	r5, r5
    116c:	11ad      	asrs	r5, r5, #6
	y = (short) ((buffer[3] << 8) | buffer[2]) >> 6; // 10-bit data
    116e:	78c6      	ldrb	r6, [r0, #3]
    1170:	0236      	lsls	r6, r6, #8
    1172:	7884      	ldrb	r4, [r0, #2]
    1174:	4334      	orrs	r4, r6
    1176:	b224      	sxth	r4, r4
    1178:	11a4      	asrs	r4, r4, #6
	z = (short) ((buffer[5] << 8) | buffer[4]) >> 6; // 10-bit data
    117a:	7946      	ldrb	r6, [r0, #5]
    117c:	0236      	lsls	r6, r6, #8
    117e:	7900      	ldrb	r0, [r0, #4]
    1180:	4330      	orrs	r0, r6
    1182:	b200      	sxth	r0, r0
    1184:	1180      	asrs	r0, r0, #6
	
	*x_mg = x << 2 ; // in normal mode: +-2g, 4mg/digit
    1186:	00ad      	lsls	r5, r5, #2
    1188:	800d      	strh	r5, [r1, #0]
	*y_mg = y << 2 ; // in normal mode: +-2g, 4mg/digit
    118a:	00a4      	lsls	r4, r4, #2
    118c:	8014      	strh	r4, [r2, #0]
	*z_mg = z << 2 ; // in normal mode: +-2g, 4mg/digit
    118e:	0080      	lsls	r0, r0, #2
    1190:	8018      	strh	r0, [r3, #0]
}
    1192:	bd70      	pop	{r4, r5, r6, pc}

00001194 <TCC2_Handler>:
	
	TCC2->CTRLA.bit.ENABLE = 1;				 // start counter
	while (TCC2->SYNCBUSY.bit.ENABLE);
}

void TCC2_Handler(void) {
    1194:	b5f0      	push	{r4, r5, r6, r7, lr}
    1196:	46de      	mov	lr, fp
    1198:	4657      	mov	r7, sl
    119a:	464e      	mov	r6, r9
    119c:	4645      	mov	r5, r8
    119e:	b5e0      	push	{r5, r6, r7, lr}
    11a0:	b093      	sub	sp, #76	; 0x4c
	
	char rx_data;
	unsigned char reg_data;
	unsigned char buffer[6];
	short x_mg, y_mg, z_mg;
	unsigned char speed_msg[] = {" -- speed measurement --"};
    11a2:	4975      	ldr	r1, [pc, #468]	; (1378 <TCC2_Handler+0x1e4>)
    11a4:	ab08      	add	r3, sp, #32
    11a6:	000a      	movs	r2, r1
    11a8:	ca13      	ldmia	r2!, {r0, r1, r4}
    11aa:	c313      	stmia	r3!, {r0, r1, r4}
    11ac:	ca13      	ldmia	r2!, {r0, r1, r4}
    11ae:	c313      	stmia	r3!, {r0, r1, r4}
    11b0:	7812      	ldrb	r2, [r2, #0]
    11b2:	701a      	strb	r2, [r3, #0]
	unsigned char x_msg[] = {"x = "};
    11b4:	4b71      	ldr	r3, [pc, #452]	; (137c <TCC2_Handler+0x1e8>)
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	9206      	str	r2, [sp, #24]
    11ba:	791b      	ldrb	r3, [r3, #4]
    11bc:	aa02      	add	r2, sp, #8
    11be:	7513      	strb	r3, [r2, #20]
	unsigned char y_msg[] = {"y = "};
    11c0:	4b6f      	ldr	r3, [pc, #444]	; (1380 <TCC2_Handler+0x1ec>)
    11c2:	681a      	ldr	r2, [r3, #0]
    11c4:	9204      	str	r2, [sp, #16]
    11c6:	791a      	ldrb	r2, [r3, #4]
    11c8:	ab04      	add	r3, sp, #16
    11ca:	711a      	strb	r2, [r3, #4]
	unsigned char z_msg[] = {"z = "};
    11cc:	4b6d      	ldr	r3, [pc, #436]	; (1384 <TCC2_Handler+0x1f0>)
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	9202      	str	r2, [sp, #8]
    11d2:	791b      	ldrb	r3, [r3, #4]
    11d4:	aa02      	add	r2, sp, #8
    11d6:	7113      	strb	r3, [r2, #4]
	
	TCC2->INTFLAG.bit.OVF = 1 ;         // Clear the interrupt flag
    11d8:	4a6b      	ldr	r2, [pc, #428]	; (1388 <TCC2_Handler+0x1f4>)
    11da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    11dc:	2301      	movs	r3, #1
    11de:	430b      	orrs	r3, r1
    11e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	
	reg_data = LIS2DH_I2C_read(0x0f); // read from 0x0f (=WHO_AM_I) register
    11e2:	200f      	movs	r0, #15
    11e4:	4c69      	ldr	r4, [pc, #420]	; (138c <TCC2_Handler+0x1f8>)
    11e6:	47a0      	blx	r4

	//  * temperature sensor configuration
	//    set TEMP_EN1, TEMP_EN0 to b'11 in TEMP_CFG_REG (0x1F)
	LIS2DH_I2C_write(0x23, 0x80); // write 0x80 (BDU) to 0x23 (=CTRL_REG4) register
    11e8:	2180      	movs	r1, #128	; 0x80
    11ea:	2023      	movs	r0, #35	; 0x23
    11ec:	4d68      	ldr	r5, [pc, #416]	; (1390 <TCC2_Handler+0x1fc>)
    11ee:	47a8      	blx	r5
	LIS2DH_I2C_write(0x1f, 0xc0); // write 0xC0 to 0x1F (=TEMP_CFG_REG) register
    11f0:	21c0      	movs	r1, #192	; 0xc0
    11f2:	201f      	movs	r0, #31
    11f4:	47a8      	blx	r5


	// * 3-axis accelerometer configuration
	//   ODR = 0101 --> 100Hz, Normal Mode (LPen = 0, HR = 0), X,Y,Z enable
	LIS2DH_I2C_write(0x20, 0x57); // write 0x50 to 0x20 (=CTRL_REG1) register
    11f6:	2157      	movs	r1, #87	; 0x57
    11f8:	2020      	movs	r0, #32
    11fa:	47a8      	blx	r5
	
	// Read temperature
	reg_data = LIS2DH_I2C_read(0x0c); // read from 0x0c (=OUT_TEMP_L) register
    11fc:	200c      	movs	r0, #12
    11fe:	47a0      	blx	r4
	reg_data = LIS2DH_I2C_read(0x0d); // read from 0x0d (=OUT_TEMP_H) register
    1200:	200d      	movs	r0, #13
    1202:	47a0      	blx	r4
	
	// Read accelerometer
	LIS2DH_I2C_read_multiple_data(0x28, 6, buffer); //
    1204:	aa10      	add	r2, sp, #64	; 0x40
    1206:	2106      	movs	r1, #6
    1208:	2028      	movs	r0, #40	; 0x28
    120a:	4b62      	ldr	r3, [pc, #392]	; (1394 <TCC2_Handler+0x200>)
    120c:	4798      	blx	r3
	bytes_to_ints(buffer, &x_mg, &y_mg, &z_mg);
    120e:	ab0f      	add	r3, sp, #60	; 0x3c
    1210:	469a      	mov	sl, r3
    1212:	2332      	movs	r3, #50	; 0x32
    1214:	aa02      	add	r2, sp, #8
    1216:	4694      	mov	ip, r2
    1218:	4463      	add	r3, ip
    121a:	4652      	mov	r2, sl
    121c:	2136      	movs	r1, #54	; 0x36
    121e:	4461      	add	r1, ip
    1220:	a810      	add	r0, sp, #64	; 0x40
    1222:	4c5d      	ldr	r4, [pc, #372]	; (1398 <TCC2_Handler+0x204>)
    1224:	47a0      	blx	r4
	
	previous_speed_x = previous_speed_x + (x_mg * 0.0098f * 0.2);
    1226:	ab02      	add	r3, sp, #8
    1228:	2036      	movs	r0, #54	; 0x36
    122a:	5e18      	ldrsh	r0, [r3, r0]
    122c:	4b5b      	ldr	r3, [pc, #364]	; (139c <TCC2_Handler+0x208>)
    122e:	4699      	mov	r9, r3
    1230:	4798      	blx	r3
    1232:	4f5b      	ldr	r7, [pc, #364]	; (13a0 <TCC2_Handler+0x20c>)
    1234:	495b      	ldr	r1, [pc, #364]	; (13a4 <TCC2_Handler+0x210>)
    1236:	47b8      	blx	r7
    1238:	4c5b      	ldr	r4, [pc, #364]	; (13a8 <TCC2_Handler+0x214>)
    123a:	47a0      	blx	r4
    123c:	4e5b      	ldr	r6, [pc, #364]	; (13ac <TCC2_Handler+0x218>)
    123e:	4a5c      	ldr	r2, [pc, #368]	; (13b0 <TCC2_Handler+0x21c>)
    1240:	4b5c      	ldr	r3, [pc, #368]	; (13b4 <TCC2_Handler+0x220>)
    1242:	47b0      	blx	r6
    1244:	9000      	str	r0, [sp, #0]
    1246:	9101      	str	r1, [sp, #4]
    1248:	4b5b      	ldr	r3, [pc, #364]	; (13b8 <TCC2_Handler+0x224>)
    124a:	469b      	mov	fp, r3
    124c:	6818      	ldr	r0, [r3, #0]
    124e:	47a0      	blx	r4
    1250:	4b5a      	ldr	r3, [pc, #360]	; (13bc <TCC2_Handler+0x228>)
    1252:	4698      	mov	r8, r3
    1254:	9a00      	ldr	r2, [sp, #0]
    1256:	9b01      	ldr	r3, [sp, #4]
    1258:	47c0      	blx	r8
    125a:	4d59      	ldr	r5, [pc, #356]	; (13c0 <TCC2_Handler+0x22c>)
    125c:	47a8      	blx	r5
    125e:	465b      	mov	r3, fp
    1260:	6018      	str	r0, [r3, #0]
	previous_speed_y = previous_speed_y + (y_mg * 0.0098f * 0.2);
    1262:	4653      	mov	r3, sl
    1264:	2000      	movs	r0, #0
    1266:	5e18      	ldrsh	r0, [r3, r0]
    1268:	47c8      	blx	r9
    126a:	494e      	ldr	r1, [pc, #312]	; (13a4 <TCC2_Handler+0x210>)
    126c:	47b8      	blx	r7
    126e:	47a0      	blx	r4
    1270:	4a4f      	ldr	r2, [pc, #316]	; (13b0 <TCC2_Handler+0x21c>)
    1272:	4b50      	ldr	r3, [pc, #320]	; (13b4 <TCC2_Handler+0x220>)
    1274:	47b0      	blx	r6
    1276:	9000      	str	r0, [sp, #0]
    1278:	9101      	str	r1, [sp, #4]
    127a:	4b52      	ldr	r3, [pc, #328]	; (13c4 <TCC2_Handler+0x230>)
    127c:	469a      	mov	sl, r3
    127e:	6818      	ldr	r0, [r3, #0]
    1280:	47a0      	blx	r4
    1282:	9a00      	ldr	r2, [sp, #0]
    1284:	9b01      	ldr	r3, [sp, #4]
    1286:	47c0      	blx	r8
    1288:	47a8      	blx	r5
    128a:	4653      	mov	r3, sl
    128c:	6018      	str	r0, [r3, #0]
	previous_speed_z = previous_speed_z + (z_mg * 0.0098f * 0.2);
    128e:	ab02      	add	r3, sp, #8
    1290:	2032      	movs	r0, #50	; 0x32
    1292:	5e18      	ldrsh	r0, [r3, r0]
    1294:	47c8      	blx	r9
    1296:	4943      	ldr	r1, [pc, #268]	; (13a4 <TCC2_Handler+0x210>)
    1298:	47b8      	blx	r7
    129a:	47a0      	blx	r4
    129c:	4a44      	ldr	r2, [pc, #272]	; (13b0 <TCC2_Handler+0x21c>)
    129e:	4b45      	ldr	r3, [pc, #276]	; (13b4 <TCC2_Handler+0x220>)
    12a0:	47b0      	blx	r6
    12a2:	9000      	str	r0, [sp, #0]
    12a4:	9101      	str	r1, [sp, #4]
    12a6:	4e48      	ldr	r6, [pc, #288]	; (13c8 <TCC2_Handler+0x234>)
    12a8:	6830      	ldr	r0, [r6, #0]
    12aa:	47a0      	blx	r4
    12ac:	9a00      	ldr	r2, [sp, #0]
    12ae:	9b01      	ldr	r3, [sp, #4]
    12b0:	47c0      	blx	r8
    12b2:	47a8      	blx	r5
    12b4:	6030      	str	r0, [r6, #0]

	
	print_string(speed_msg, sizeof(speed_msg));
    12b6:	2119      	movs	r1, #25
    12b8:	a808      	add	r0, sp, #32
    12ba:	4c44      	ldr	r4, [pc, #272]	; (13cc <TCC2_Handler+0x238>)
    12bc:	47a0      	blx	r4
	print_enter();
    12be:	4b44      	ldr	r3, [pc, #272]	; (13d0 <TCC2_Handler+0x23c>)
    12c0:	4798      	blx	r3
	
	print_string(x_msg, sizeof(x_msg));
    12c2:	2105      	movs	r1, #5
    12c4:	a806      	add	r0, sp, #24
    12c6:	47a0      	blx	r4
	if(x_mg < 0)
    12c8:	ab02      	add	r3, sp, #8
    12ca:	2236      	movs	r2, #54	; 0x36
    12cc:	5e9b      	ldrsh	r3, [r3, r2]
    12ce:	2b00      	cmp	r3, #0
    12d0:	db36      	blt.n	1340 <TCC2_Handler+0x1ac>
	{
		x_mg *= -1;
		print_string('-', sizeof('-'));
	}
	print_unsigned_int(x_mg);
    12d2:	2336      	movs	r3, #54	; 0x36
    12d4:	aa02      	add	r2, sp, #8
    12d6:	4694      	mov	ip, r2
    12d8:	4463      	add	r3, ip
    12da:	2000      	movs	r0, #0
    12dc:	5e18      	ldrsh	r0, [r3, r0]
    12de:	4b3d      	ldr	r3, [pc, #244]	; (13d4 <TCC2_Handler+0x240>)
    12e0:	4798      	blx	r3
	print_enter();
    12e2:	4b3b      	ldr	r3, [pc, #236]	; (13d0 <TCC2_Handler+0x23c>)
    12e4:	4798      	blx	r3
	
	print_string(y_msg, sizeof(y_msg));
    12e6:	2105      	movs	r1, #5
    12e8:	a804      	add	r0, sp, #16
    12ea:	4b38      	ldr	r3, [pc, #224]	; (13cc <TCC2_Handler+0x238>)
    12ec:	4798      	blx	r3
	if(y_mg < 0)
    12ee:	ab0f      	add	r3, sp, #60	; 0x3c
    12f0:	2200      	movs	r2, #0
    12f2:	5e9b      	ldrsh	r3, [r3, r2]
    12f4:	2b00      	cmp	r3, #0
    12f6:	db2e      	blt.n	1356 <TCC2_Handler+0x1c2>
	{
		y_mg *= -1;
		print_string('-', sizeof('-'));
	}
	print_unsigned_int(y_mg);
    12f8:	ab0f      	add	r3, sp, #60	; 0x3c
    12fa:	2000      	movs	r0, #0
    12fc:	5e18      	ldrsh	r0, [r3, r0]
    12fe:	4b35      	ldr	r3, [pc, #212]	; (13d4 <TCC2_Handler+0x240>)
    1300:	4798      	blx	r3
	print_enter();
    1302:	4b33      	ldr	r3, [pc, #204]	; (13d0 <TCC2_Handler+0x23c>)
    1304:	4798      	blx	r3
	
	print_string(z_msg, sizeof(z_msg));
    1306:	2105      	movs	r1, #5
    1308:	a802      	add	r0, sp, #8
    130a:	4b30      	ldr	r3, [pc, #192]	; (13cc <TCC2_Handler+0x238>)
    130c:	4798      	blx	r3
	if(z_mg < 0)
    130e:	2332      	movs	r3, #50	; 0x32
    1310:	aa02      	add	r2, sp, #8
    1312:	4694      	mov	ip, r2
    1314:	4463      	add	r3, ip
    1316:	2200      	movs	r2, #0
    1318:	5e9b      	ldrsh	r3, [r3, r2]
    131a:	2b00      	cmp	r3, #0
    131c:	db23      	blt.n	1366 <TCC2_Handler+0x1d2>
	{
		z_mg *= -1;
		print_string('-', sizeof('-'));
	}
	print_unsigned_int(z_mg);
    131e:	2332      	movs	r3, #50	; 0x32
    1320:	aa02      	add	r2, sp, #8
    1322:	4694      	mov	ip, r2
    1324:	4463      	add	r3, ip
    1326:	2000      	movs	r0, #0
    1328:	5e18      	ldrsh	r0, [r3, r0]
    132a:	4b2a      	ldr	r3, [pc, #168]	; (13d4 <TCC2_Handler+0x240>)
    132c:	4798      	blx	r3
	print_enter();
    132e:	4b28      	ldr	r3, [pc, #160]	; (13d0 <TCC2_Handler+0x23c>)
    1330:	4798      	blx	r3
	
	
    1332:	b013      	add	sp, #76	; 0x4c
    1334:	bc3c      	pop	{r2, r3, r4, r5}
    1336:	4690      	mov	r8, r2
    1338:	4699      	mov	r9, r3
    133a:	46a2      	mov	sl, r4
    133c:	46ab      	mov	fp, r5
    133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		x_mg *= -1;
    1340:	425b      	negs	r3, r3
    1342:	2236      	movs	r2, #54	; 0x36
    1344:	a902      	add	r1, sp, #8
    1346:	468c      	mov	ip, r1
    1348:	4462      	add	r2, ip
    134a:	8013      	strh	r3, [r2, #0]
		print_string('-', sizeof('-'));
    134c:	2104      	movs	r1, #4
    134e:	202d      	movs	r0, #45	; 0x2d
    1350:	4b1e      	ldr	r3, [pc, #120]	; (13cc <TCC2_Handler+0x238>)
    1352:	4798      	blx	r3
    1354:	e7bd      	b.n	12d2 <TCC2_Handler+0x13e>
		y_mg *= -1;
    1356:	425b      	negs	r3, r3
    1358:	aa0f      	add	r2, sp, #60	; 0x3c
    135a:	8013      	strh	r3, [r2, #0]
		print_string('-', sizeof('-'));
    135c:	2104      	movs	r1, #4
    135e:	202d      	movs	r0, #45	; 0x2d
    1360:	4b1a      	ldr	r3, [pc, #104]	; (13cc <TCC2_Handler+0x238>)
    1362:	4798      	blx	r3
    1364:	e7c8      	b.n	12f8 <TCC2_Handler+0x164>
		z_mg *= -1;
    1366:	425b      	negs	r3, r3
    1368:	2232      	movs	r2, #50	; 0x32
    136a:	4462      	add	r2, ip
    136c:	8013      	strh	r3, [r2, #0]
		print_string('-', sizeof('-'));
    136e:	2104      	movs	r1, #4
    1370:	202d      	movs	r0, #45	; 0x2d
    1372:	4b16      	ldr	r3, [pc, #88]	; (13cc <TCC2_Handler+0x238>)
    1374:	4798      	blx	r3
    1376:	e7d2      	b.n	131e <TCC2_Handler+0x18a>
    1378:	00002984 	.word	0x00002984
    137c:	000029a0 	.word	0x000029a0
    1380:	000029a8 	.word	0x000029a8
    1384:	000029b0 	.word	0x000029b0
    1388:	42002800 	.word	0x42002800
    138c:	00001049 	.word	0x00001049
    1390:	00000ff5 	.word	0x00000ff5
    1394:	000010b5 	.word	0x000010b5
    1398:	00001161 	.word	0x00001161
    139c:	00001905 	.word	0x00001905
    13a0:	000016c5 	.word	0x000016c5
    13a4:	3c20902e 	.word	0x3c20902e
    13a8:	000024c5 	.word	0x000024c5
    13ac:	00001fc5 	.word	0x00001fc5
    13b0:	9999999a 	.word	0x9999999a
    13b4:	3fc99999 	.word	0x3fc99999
    13b8:	200016bc 	.word	0x200016bc
    13bc:	000019a5 	.word	0x000019a5
    13c0:	00002569 	.word	0x00002569
    13c4:	2000045c 	.word	0x2000045c
    13c8:	20000458 	.word	0x20000458
    13cc:	00000401 	.word	0x00000401
    13d0:	000003dd 	.word	0x000003dd
    13d4:	00000205 	.word	0x00000205

000013d8 <__udivsi3>:
    13d8:	2200      	movs	r2, #0
    13da:	0843      	lsrs	r3, r0, #1
    13dc:	428b      	cmp	r3, r1
    13de:	d374      	bcc.n	14ca <__udivsi3+0xf2>
    13e0:	0903      	lsrs	r3, r0, #4
    13e2:	428b      	cmp	r3, r1
    13e4:	d35f      	bcc.n	14a6 <__udivsi3+0xce>
    13e6:	0a03      	lsrs	r3, r0, #8
    13e8:	428b      	cmp	r3, r1
    13ea:	d344      	bcc.n	1476 <__udivsi3+0x9e>
    13ec:	0b03      	lsrs	r3, r0, #12
    13ee:	428b      	cmp	r3, r1
    13f0:	d328      	bcc.n	1444 <__udivsi3+0x6c>
    13f2:	0c03      	lsrs	r3, r0, #16
    13f4:	428b      	cmp	r3, r1
    13f6:	d30d      	bcc.n	1414 <__udivsi3+0x3c>
    13f8:	22ff      	movs	r2, #255	; 0xff
    13fa:	0209      	lsls	r1, r1, #8
    13fc:	ba12      	rev	r2, r2
    13fe:	0c03      	lsrs	r3, r0, #16
    1400:	428b      	cmp	r3, r1
    1402:	d302      	bcc.n	140a <__udivsi3+0x32>
    1404:	1212      	asrs	r2, r2, #8
    1406:	0209      	lsls	r1, r1, #8
    1408:	d065      	beq.n	14d6 <__udivsi3+0xfe>
    140a:	0b03      	lsrs	r3, r0, #12
    140c:	428b      	cmp	r3, r1
    140e:	d319      	bcc.n	1444 <__udivsi3+0x6c>
    1410:	e000      	b.n	1414 <__udivsi3+0x3c>
    1412:	0a09      	lsrs	r1, r1, #8
    1414:	0bc3      	lsrs	r3, r0, #15
    1416:	428b      	cmp	r3, r1
    1418:	d301      	bcc.n	141e <__udivsi3+0x46>
    141a:	03cb      	lsls	r3, r1, #15
    141c:	1ac0      	subs	r0, r0, r3
    141e:	4152      	adcs	r2, r2
    1420:	0b83      	lsrs	r3, r0, #14
    1422:	428b      	cmp	r3, r1
    1424:	d301      	bcc.n	142a <__udivsi3+0x52>
    1426:	038b      	lsls	r3, r1, #14
    1428:	1ac0      	subs	r0, r0, r3
    142a:	4152      	adcs	r2, r2
    142c:	0b43      	lsrs	r3, r0, #13
    142e:	428b      	cmp	r3, r1
    1430:	d301      	bcc.n	1436 <__udivsi3+0x5e>
    1432:	034b      	lsls	r3, r1, #13
    1434:	1ac0      	subs	r0, r0, r3
    1436:	4152      	adcs	r2, r2
    1438:	0b03      	lsrs	r3, r0, #12
    143a:	428b      	cmp	r3, r1
    143c:	d301      	bcc.n	1442 <__udivsi3+0x6a>
    143e:	030b      	lsls	r3, r1, #12
    1440:	1ac0      	subs	r0, r0, r3
    1442:	4152      	adcs	r2, r2
    1444:	0ac3      	lsrs	r3, r0, #11
    1446:	428b      	cmp	r3, r1
    1448:	d301      	bcc.n	144e <__udivsi3+0x76>
    144a:	02cb      	lsls	r3, r1, #11
    144c:	1ac0      	subs	r0, r0, r3
    144e:	4152      	adcs	r2, r2
    1450:	0a83      	lsrs	r3, r0, #10
    1452:	428b      	cmp	r3, r1
    1454:	d301      	bcc.n	145a <__udivsi3+0x82>
    1456:	028b      	lsls	r3, r1, #10
    1458:	1ac0      	subs	r0, r0, r3
    145a:	4152      	adcs	r2, r2
    145c:	0a43      	lsrs	r3, r0, #9
    145e:	428b      	cmp	r3, r1
    1460:	d301      	bcc.n	1466 <__udivsi3+0x8e>
    1462:	024b      	lsls	r3, r1, #9
    1464:	1ac0      	subs	r0, r0, r3
    1466:	4152      	adcs	r2, r2
    1468:	0a03      	lsrs	r3, r0, #8
    146a:	428b      	cmp	r3, r1
    146c:	d301      	bcc.n	1472 <__udivsi3+0x9a>
    146e:	020b      	lsls	r3, r1, #8
    1470:	1ac0      	subs	r0, r0, r3
    1472:	4152      	adcs	r2, r2
    1474:	d2cd      	bcs.n	1412 <__udivsi3+0x3a>
    1476:	09c3      	lsrs	r3, r0, #7
    1478:	428b      	cmp	r3, r1
    147a:	d301      	bcc.n	1480 <__udivsi3+0xa8>
    147c:	01cb      	lsls	r3, r1, #7
    147e:	1ac0      	subs	r0, r0, r3
    1480:	4152      	adcs	r2, r2
    1482:	0983      	lsrs	r3, r0, #6
    1484:	428b      	cmp	r3, r1
    1486:	d301      	bcc.n	148c <__udivsi3+0xb4>
    1488:	018b      	lsls	r3, r1, #6
    148a:	1ac0      	subs	r0, r0, r3
    148c:	4152      	adcs	r2, r2
    148e:	0943      	lsrs	r3, r0, #5
    1490:	428b      	cmp	r3, r1
    1492:	d301      	bcc.n	1498 <__udivsi3+0xc0>
    1494:	014b      	lsls	r3, r1, #5
    1496:	1ac0      	subs	r0, r0, r3
    1498:	4152      	adcs	r2, r2
    149a:	0903      	lsrs	r3, r0, #4
    149c:	428b      	cmp	r3, r1
    149e:	d301      	bcc.n	14a4 <__udivsi3+0xcc>
    14a0:	010b      	lsls	r3, r1, #4
    14a2:	1ac0      	subs	r0, r0, r3
    14a4:	4152      	adcs	r2, r2
    14a6:	08c3      	lsrs	r3, r0, #3
    14a8:	428b      	cmp	r3, r1
    14aa:	d301      	bcc.n	14b0 <__udivsi3+0xd8>
    14ac:	00cb      	lsls	r3, r1, #3
    14ae:	1ac0      	subs	r0, r0, r3
    14b0:	4152      	adcs	r2, r2
    14b2:	0883      	lsrs	r3, r0, #2
    14b4:	428b      	cmp	r3, r1
    14b6:	d301      	bcc.n	14bc <__udivsi3+0xe4>
    14b8:	008b      	lsls	r3, r1, #2
    14ba:	1ac0      	subs	r0, r0, r3
    14bc:	4152      	adcs	r2, r2
    14be:	0843      	lsrs	r3, r0, #1
    14c0:	428b      	cmp	r3, r1
    14c2:	d301      	bcc.n	14c8 <__udivsi3+0xf0>
    14c4:	004b      	lsls	r3, r1, #1
    14c6:	1ac0      	subs	r0, r0, r3
    14c8:	4152      	adcs	r2, r2
    14ca:	1a41      	subs	r1, r0, r1
    14cc:	d200      	bcs.n	14d0 <__udivsi3+0xf8>
    14ce:	4601      	mov	r1, r0
    14d0:	4152      	adcs	r2, r2
    14d2:	4610      	mov	r0, r2
    14d4:	4770      	bx	lr
    14d6:	e7ff      	b.n	14d8 <__udivsi3+0x100>
    14d8:	b501      	push	{r0, lr}
    14da:	2000      	movs	r0, #0
    14dc:	f000 f8f0 	bl	16c0 <__aeabi_idiv0>
    14e0:	bd02      	pop	{r1, pc}
    14e2:	46c0      	nop			; (mov r8, r8)

000014e4 <__aeabi_uidivmod>:
    14e4:	2900      	cmp	r1, #0
    14e6:	d0f7      	beq.n	14d8 <__udivsi3+0x100>
    14e8:	e776      	b.n	13d8 <__udivsi3>
    14ea:	4770      	bx	lr

000014ec <__divsi3>:
    14ec:	4603      	mov	r3, r0
    14ee:	430b      	orrs	r3, r1
    14f0:	d47f      	bmi.n	15f2 <__divsi3+0x106>
    14f2:	2200      	movs	r2, #0
    14f4:	0843      	lsrs	r3, r0, #1
    14f6:	428b      	cmp	r3, r1
    14f8:	d374      	bcc.n	15e4 <__divsi3+0xf8>
    14fa:	0903      	lsrs	r3, r0, #4
    14fc:	428b      	cmp	r3, r1
    14fe:	d35f      	bcc.n	15c0 <__divsi3+0xd4>
    1500:	0a03      	lsrs	r3, r0, #8
    1502:	428b      	cmp	r3, r1
    1504:	d344      	bcc.n	1590 <__divsi3+0xa4>
    1506:	0b03      	lsrs	r3, r0, #12
    1508:	428b      	cmp	r3, r1
    150a:	d328      	bcc.n	155e <__divsi3+0x72>
    150c:	0c03      	lsrs	r3, r0, #16
    150e:	428b      	cmp	r3, r1
    1510:	d30d      	bcc.n	152e <__divsi3+0x42>
    1512:	22ff      	movs	r2, #255	; 0xff
    1514:	0209      	lsls	r1, r1, #8
    1516:	ba12      	rev	r2, r2
    1518:	0c03      	lsrs	r3, r0, #16
    151a:	428b      	cmp	r3, r1
    151c:	d302      	bcc.n	1524 <__divsi3+0x38>
    151e:	1212      	asrs	r2, r2, #8
    1520:	0209      	lsls	r1, r1, #8
    1522:	d065      	beq.n	15f0 <__divsi3+0x104>
    1524:	0b03      	lsrs	r3, r0, #12
    1526:	428b      	cmp	r3, r1
    1528:	d319      	bcc.n	155e <__divsi3+0x72>
    152a:	e000      	b.n	152e <__divsi3+0x42>
    152c:	0a09      	lsrs	r1, r1, #8
    152e:	0bc3      	lsrs	r3, r0, #15
    1530:	428b      	cmp	r3, r1
    1532:	d301      	bcc.n	1538 <__divsi3+0x4c>
    1534:	03cb      	lsls	r3, r1, #15
    1536:	1ac0      	subs	r0, r0, r3
    1538:	4152      	adcs	r2, r2
    153a:	0b83      	lsrs	r3, r0, #14
    153c:	428b      	cmp	r3, r1
    153e:	d301      	bcc.n	1544 <__divsi3+0x58>
    1540:	038b      	lsls	r3, r1, #14
    1542:	1ac0      	subs	r0, r0, r3
    1544:	4152      	adcs	r2, r2
    1546:	0b43      	lsrs	r3, r0, #13
    1548:	428b      	cmp	r3, r1
    154a:	d301      	bcc.n	1550 <__divsi3+0x64>
    154c:	034b      	lsls	r3, r1, #13
    154e:	1ac0      	subs	r0, r0, r3
    1550:	4152      	adcs	r2, r2
    1552:	0b03      	lsrs	r3, r0, #12
    1554:	428b      	cmp	r3, r1
    1556:	d301      	bcc.n	155c <__divsi3+0x70>
    1558:	030b      	lsls	r3, r1, #12
    155a:	1ac0      	subs	r0, r0, r3
    155c:	4152      	adcs	r2, r2
    155e:	0ac3      	lsrs	r3, r0, #11
    1560:	428b      	cmp	r3, r1
    1562:	d301      	bcc.n	1568 <__divsi3+0x7c>
    1564:	02cb      	lsls	r3, r1, #11
    1566:	1ac0      	subs	r0, r0, r3
    1568:	4152      	adcs	r2, r2
    156a:	0a83      	lsrs	r3, r0, #10
    156c:	428b      	cmp	r3, r1
    156e:	d301      	bcc.n	1574 <__divsi3+0x88>
    1570:	028b      	lsls	r3, r1, #10
    1572:	1ac0      	subs	r0, r0, r3
    1574:	4152      	adcs	r2, r2
    1576:	0a43      	lsrs	r3, r0, #9
    1578:	428b      	cmp	r3, r1
    157a:	d301      	bcc.n	1580 <__divsi3+0x94>
    157c:	024b      	lsls	r3, r1, #9
    157e:	1ac0      	subs	r0, r0, r3
    1580:	4152      	adcs	r2, r2
    1582:	0a03      	lsrs	r3, r0, #8
    1584:	428b      	cmp	r3, r1
    1586:	d301      	bcc.n	158c <__divsi3+0xa0>
    1588:	020b      	lsls	r3, r1, #8
    158a:	1ac0      	subs	r0, r0, r3
    158c:	4152      	adcs	r2, r2
    158e:	d2cd      	bcs.n	152c <__divsi3+0x40>
    1590:	09c3      	lsrs	r3, r0, #7
    1592:	428b      	cmp	r3, r1
    1594:	d301      	bcc.n	159a <__divsi3+0xae>
    1596:	01cb      	lsls	r3, r1, #7
    1598:	1ac0      	subs	r0, r0, r3
    159a:	4152      	adcs	r2, r2
    159c:	0983      	lsrs	r3, r0, #6
    159e:	428b      	cmp	r3, r1
    15a0:	d301      	bcc.n	15a6 <__divsi3+0xba>
    15a2:	018b      	lsls	r3, r1, #6
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	4152      	adcs	r2, r2
    15a8:	0943      	lsrs	r3, r0, #5
    15aa:	428b      	cmp	r3, r1
    15ac:	d301      	bcc.n	15b2 <__divsi3+0xc6>
    15ae:	014b      	lsls	r3, r1, #5
    15b0:	1ac0      	subs	r0, r0, r3
    15b2:	4152      	adcs	r2, r2
    15b4:	0903      	lsrs	r3, r0, #4
    15b6:	428b      	cmp	r3, r1
    15b8:	d301      	bcc.n	15be <__divsi3+0xd2>
    15ba:	010b      	lsls	r3, r1, #4
    15bc:	1ac0      	subs	r0, r0, r3
    15be:	4152      	adcs	r2, r2
    15c0:	08c3      	lsrs	r3, r0, #3
    15c2:	428b      	cmp	r3, r1
    15c4:	d301      	bcc.n	15ca <__divsi3+0xde>
    15c6:	00cb      	lsls	r3, r1, #3
    15c8:	1ac0      	subs	r0, r0, r3
    15ca:	4152      	adcs	r2, r2
    15cc:	0883      	lsrs	r3, r0, #2
    15ce:	428b      	cmp	r3, r1
    15d0:	d301      	bcc.n	15d6 <__divsi3+0xea>
    15d2:	008b      	lsls	r3, r1, #2
    15d4:	1ac0      	subs	r0, r0, r3
    15d6:	4152      	adcs	r2, r2
    15d8:	0843      	lsrs	r3, r0, #1
    15da:	428b      	cmp	r3, r1
    15dc:	d301      	bcc.n	15e2 <__divsi3+0xf6>
    15de:	004b      	lsls	r3, r1, #1
    15e0:	1ac0      	subs	r0, r0, r3
    15e2:	4152      	adcs	r2, r2
    15e4:	1a41      	subs	r1, r0, r1
    15e6:	d200      	bcs.n	15ea <__divsi3+0xfe>
    15e8:	4601      	mov	r1, r0
    15ea:	4152      	adcs	r2, r2
    15ec:	4610      	mov	r0, r2
    15ee:	4770      	bx	lr
    15f0:	e05d      	b.n	16ae <__divsi3+0x1c2>
    15f2:	0fca      	lsrs	r2, r1, #31
    15f4:	d000      	beq.n	15f8 <__divsi3+0x10c>
    15f6:	4249      	negs	r1, r1
    15f8:	1003      	asrs	r3, r0, #32
    15fa:	d300      	bcc.n	15fe <__divsi3+0x112>
    15fc:	4240      	negs	r0, r0
    15fe:	4053      	eors	r3, r2
    1600:	2200      	movs	r2, #0
    1602:	469c      	mov	ip, r3
    1604:	0903      	lsrs	r3, r0, #4
    1606:	428b      	cmp	r3, r1
    1608:	d32d      	bcc.n	1666 <__divsi3+0x17a>
    160a:	0a03      	lsrs	r3, r0, #8
    160c:	428b      	cmp	r3, r1
    160e:	d312      	bcc.n	1636 <__divsi3+0x14a>
    1610:	22fc      	movs	r2, #252	; 0xfc
    1612:	0189      	lsls	r1, r1, #6
    1614:	ba12      	rev	r2, r2
    1616:	0a03      	lsrs	r3, r0, #8
    1618:	428b      	cmp	r3, r1
    161a:	d30c      	bcc.n	1636 <__divsi3+0x14a>
    161c:	0189      	lsls	r1, r1, #6
    161e:	1192      	asrs	r2, r2, #6
    1620:	428b      	cmp	r3, r1
    1622:	d308      	bcc.n	1636 <__divsi3+0x14a>
    1624:	0189      	lsls	r1, r1, #6
    1626:	1192      	asrs	r2, r2, #6
    1628:	428b      	cmp	r3, r1
    162a:	d304      	bcc.n	1636 <__divsi3+0x14a>
    162c:	0189      	lsls	r1, r1, #6
    162e:	d03a      	beq.n	16a6 <__divsi3+0x1ba>
    1630:	1192      	asrs	r2, r2, #6
    1632:	e000      	b.n	1636 <__divsi3+0x14a>
    1634:	0989      	lsrs	r1, r1, #6
    1636:	09c3      	lsrs	r3, r0, #7
    1638:	428b      	cmp	r3, r1
    163a:	d301      	bcc.n	1640 <__divsi3+0x154>
    163c:	01cb      	lsls	r3, r1, #7
    163e:	1ac0      	subs	r0, r0, r3
    1640:	4152      	adcs	r2, r2
    1642:	0983      	lsrs	r3, r0, #6
    1644:	428b      	cmp	r3, r1
    1646:	d301      	bcc.n	164c <__divsi3+0x160>
    1648:	018b      	lsls	r3, r1, #6
    164a:	1ac0      	subs	r0, r0, r3
    164c:	4152      	adcs	r2, r2
    164e:	0943      	lsrs	r3, r0, #5
    1650:	428b      	cmp	r3, r1
    1652:	d301      	bcc.n	1658 <__divsi3+0x16c>
    1654:	014b      	lsls	r3, r1, #5
    1656:	1ac0      	subs	r0, r0, r3
    1658:	4152      	adcs	r2, r2
    165a:	0903      	lsrs	r3, r0, #4
    165c:	428b      	cmp	r3, r1
    165e:	d301      	bcc.n	1664 <__divsi3+0x178>
    1660:	010b      	lsls	r3, r1, #4
    1662:	1ac0      	subs	r0, r0, r3
    1664:	4152      	adcs	r2, r2
    1666:	08c3      	lsrs	r3, r0, #3
    1668:	428b      	cmp	r3, r1
    166a:	d301      	bcc.n	1670 <__divsi3+0x184>
    166c:	00cb      	lsls	r3, r1, #3
    166e:	1ac0      	subs	r0, r0, r3
    1670:	4152      	adcs	r2, r2
    1672:	0883      	lsrs	r3, r0, #2
    1674:	428b      	cmp	r3, r1
    1676:	d301      	bcc.n	167c <__divsi3+0x190>
    1678:	008b      	lsls	r3, r1, #2
    167a:	1ac0      	subs	r0, r0, r3
    167c:	4152      	adcs	r2, r2
    167e:	d2d9      	bcs.n	1634 <__divsi3+0x148>
    1680:	0843      	lsrs	r3, r0, #1
    1682:	428b      	cmp	r3, r1
    1684:	d301      	bcc.n	168a <__divsi3+0x19e>
    1686:	004b      	lsls	r3, r1, #1
    1688:	1ac0      	subs	r0, r0, r3
    168a:	4152      	adcs	r2, r2
    168c:	1a41      	subs	r1, r0, r1
    168e:	d200      	bcs.n	1692 <__divsi3+0x1a6>
    1690:	4601      	mov	r1, r0
    1692:	4663      	mov	r3, ip
    1694:	4152      	adcs	r2, r2
    1696:	105b      	asrs	r3, r3, #1
    1698:	4610      	mov	r0, r2
    169a:	d301      	bcc.n	16a0 <__divsi3+0x1b4>
    169c:	4240      	negs	r0, r0
    169e:	2b00      	cmp	r3, #0
    16a0:	d500      	bpl.n	16a4 <__divsi3+0x1b8>
    16a2:	4249      	negs	r1, r1
    16a4:	4770      	bx	lr
    16a6:	4663      	mov	r3, ip
    16a8:	105b      	asrs	r3, r3, #1
    16aa:	d300      	bcc.n	16ae <__divsi3+0x1c2>
    16ac:	4240      	negs	r0, r0
    16ae:	b501      	push	{r0, lr}
    16b0:	2000      	movs	r0, #0
    16b2:	f000 f805 	bl	16c0 <__aeabi_idiv0>
    16b6:	bd02      	pop	{r1, pc}

000016b8 <__aeabi_idivmod>:
    16b8:	2900      	cmp	r1, #0
    16ba:	d0f8      	beq.n	16ae <__divsi3+0x1c2>
    16bc:	e716      	b.n	14ec <__divsi3>
    16be:	4770      	bx	lr

000016c0 <__aeabi_idiv0>:
    16c0:	4770      	bx	lr
    16c2:	46c0      	nop			; (mov r8, r8)

000016c4 <__aeabi_fmul>:
    16c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c6:	4657      	mov	r7, sl
    16c8:	464e      	mov	r6, r9
    16ca:	4645      	mov	r5, r8
    16cc:	46de      	mov	lr, fp
    16ce:	b5e0      	push	{r5, r6, r7, lr}
    16d0:	0247      	lsls	r7, r0, #9
    16d2:	0046      	lsls	r6, r0, #1
    16d4:	4688      	mov	r8, r1
    16d6:	0a7f      	lsrs	r7, r7, #9
    16d8:	0e36      	lsrs	r6, r6, #24
    16da:	0fc4      	lsrs	r4, r0, #31
    16dc:	2e00      	cmp	r6, #0
    16de:	d047      	beq.n	1770 <__aeabi_fmul+0xac>
    16e0:	2eff      	cmp	r6, #255	; 0xff
    16e2:	d024      	beq.n	172e <__aeabi_fmul+0x6a>
    16e4:	00fb      	lsls	r3, r7, #3
    16e6:	2780      	movs	r7, #128	; 0x80
    16e8:	04ff      	lsls	r7, r7, #19
    16ea:	431f      	orrs	r7, r3
    16ec:	2300      	movs	r3, #0
    16ee:	4699      	mov	r9, r3
    16f0:	469a      	mov	sl, r3
    16f2:	3e7f      	subs	r6, #127	; 0x7f
    16f4:	4643      	mov	r3, r8
    16f6:	025d      	lsls	r5, r3, #9
    16f8:	0058      	lsls	r0, r3, #1
    16fa:	0fdb      	lsrs	r3, r3, #31
    16fc:	0a6d      	lsrs	r5, r5, #9
    16fe:	0e00      	lsrs	r0, r0, #24
    1700:	4698      	mov	r8, r3
    1702:	d043      	beq.n	178c <__aeabi_fmul+0xc8>
    1704:	28ff      	cmp	r0, #255	; 0xff
    1706:	d03b      	beq.n	1780 <__aeabi_fmul+0xbc>
    1708:	00eb      	lsls	r3, r5, #3
    170a:	2580      	movs	r5, #128	; 0x80
    170c:	2200      	movs	r2, #0
    170e:	04ed      	lsls	r5, r5, #19
    1710:	431d      	orrs	r5, r3
    1712:	387f      	subs	r0, #127	; 0x7f
    1714:	1836      	adds	r6, r6, r0
    1716:	1c73      	adds	r3, r6, #1
    1718:	4641      	mov	r1, r8
    171a:	469b      	mov	fp, r3
    171c:	464b      	mov	r3, r9
    171e:	4061      	eors	r1, r4
    1720:	4313      	orrs	r3, r2
    1722:	2b0f      	cmp	r3, #15
    1724:	d864      	bhi.n	17f0 <__aeabi_fmul+0x12c>
    1726:	4875      	ldr	r0, [pc, #468]	; (18fc <__aeabi_fmul+0x238>)
    1728:	009b      	lsls	r3, r3, #2
    172a:	58c3      	ldr	r3, [r0, r3]
    172c:	469f      	mov	pc, r3
    172e:	2f00      	cmp	r7, #0
    1730:	d142      	bne.n	17b8 <__aeabi_fmul+0xf4>
    1732:	2308      	movs	r3, #8
    1734:	4699      	mov	r9, r3
    1736:	3b06      	subs	r3, #6
    1738:	26ff      	movs	r6, #255	; 0xff
    173a:	469a      	mov	sl, r3
    173c:	e7da      	b.n	16f4 <__aeabi_fmul+0x30>
    173e:	4641      	mov	r1, r8
    1740:	2a02      	cmp	r2, #2
    1742:	d028      	beq.n	1796 <__aeabi_fmul+0xd2>
    1744:	2a03      	cmp	r2, #3
    1746:	d100      	bne.n	174a <__aeabi_fmul+0x86>
    1748:	e0ce      	b.n	18e8 <__aeabi_fmul+0x224>
    174a:	2a01      	cmp	r2, #1
    174c:	d000      	beq.n	1750 <__aeabi_fmul+0x8c>
    174e:	e0ac      	b.n	18aa <__aeabi_fmul+0x1e6>
    1750:	4011      	ands	r1, r2
    1752:	2000      	movs	r0, #0
    1754:	2200      	movs	r2, #0
    1756:	b2cc      	uxtb	r4, r1
    1758:	0240      	lsls	r0, r0, #9
    175a:	05d2      	lsls	r2, r2, #23
    175c:	0a40      	lsrs	r0, r0, #9
    175e:	07e4      	lsls	r4, r4, #31
    1760:	4310      	orrs	r0, r2
    1762:	4320      	orrs	r0, r4
    1764:	bc3c      	pop	{r2, r3, r4, r5}
    1766:	4690      	mov	r8, r2
    1768:	4699      	mov	r9, r3
    176a:	46a2      	mov	sl, r4
    176c:	46ab      	mov	fp, r5
    176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1770:	2f00      	cmp	r7, #0
    1772:	d115      	bne.n	17a0 <__aeabi_fmul+0xdc>
    1774:	2304      	movs	r3, #4
    1776:	4699      	mov	r9, r3
    1778:	3b03      	subs	r3, #3
    177a:	2600      	movs	r6, #0
    177c:	469a      	mov	sl, r3
    177e:	e7b9      	b.n	16f4 <__aeabi_fmul+0x30>
    1780:	20ff      	movs	r0, #255	; 0xff
    1782:	2202      	movs	r2, #2
    1784:	2d00      	cmp	r5, #0
    1786:	d0c5      	beq.n	1714 <__aeabi_fmul+0x50>
    1788:	2203      	movs	r2, #3
    178a:	e7c3      	b.n	1714 <__aeabi_fmul+0x50>
    178c:	2d00      	cmp	r5, #0
    178e:	d119      	bne.n	17c4 <__aeabi_fmul+0x100>
    1790:	2000      	movs	r0, #0
    1792:	2201      	movs	r2, #1
    1794:	e7be      	b.n	1714 <__aeabi_fmul+0x50>
    1796:	2401      	movs	r4, #1
    1798:	22ff      	movs	r2, #255	; 0xff
    179a:	400c      	ands	r4, r1
    179c:	2000      	movs	r0, #0
    179e:	e7db      	b.n	1758 <__aeabi_fmul+0x94>
    17a0:	0038      	movs	r0, r7
    17a2:	f000 ff6b 	bl	267c <__clzsi2>
    17a6:	2676      	movs	r6, #118	; 0x76
    17a8:	1f43      	subs	r3, r0, #5
    17aa:	409f      	lsls	r7, r3
    17ac:	2300      	movs	r3, #0
    17ae:	4276      	negs	r6, r6
    17b0:	1a36      	subs	r6, r6, r0
    17b2:	4699      	mov	r9, r3
    17b4:	469a      	mov	sl, r3
    17b6:	e79d      	b.n	16f4 <__aeabi_fmul+0x30>
    17b8:	230c      	movs	r3, #12
    17ba:	4699      	mov	r9, r3
    17bc:	3b09      	subs	r3, #9
    17be:	26ff      	movs	r6, #255	; 0xff
    17c0:	469a      	mov	sl, r3
    17c2:	e797      	b.n	16f4 <__aeabi_fmul+0x30>
    17c4:	0028      	movs	r0, r5
    17c6:	f000 ff59 	bl	267c <__clzsi2>
    17ca:	1f43      	subs	r3, r0, #5
    17cc:	409d      	lsls	r5, r3
    17ce:	2376      	movs	r3, #118	; 0x76
    17d0:	425b      	negs	r3, r3
    17d2:	1a18      	subs	r0, r3, r0
    17d4:	2200      	movs	r2, #0
    17d6:	e79d      	b.n	1714 <__aeabi_fmul+0x50>
    17d8:	2080      	movs	r0, #128	; 0x80
    17da:	2400      	movs	r4, #0
    17dc:	03c0      	lsls	r0, r0, #15
    17de:	22ff      	movs	r2, #255	; 0xff
    17e0:	e7ba      	b.n	1758 <__aeabi_fmul+0x94>
    17e2:	003d      	movs	r5, r7
    17e4:	4652      	mov	r2, sl
    17e6:	e7ab      	b.n	1740 <__aeabi_fmul+0x7c>
    17e8:	003d      	movs	r5, r7
    17ea:	0021      	movs	r1, r4
    17ec:	4652      	mov	r2, sl
    17ee:	e7a7      	b.n	1740 <__aeabi_fmul+0x7c>
    17f0:	0c3b      	lsrs	r3, r7, #16
    17f2:	469c      	mov	ip, r3
    17f4:	042a      	lsls	r2, r5, #16
    17f6:	0c12      	lsrs	r2, r2, #16
    17f8:	0c2b      	lsrs	r3, r5, #16
    17fa:	0014      	movs	r4, r2
    17fc:	4660      	mov	r0, ip
    17fe:	4665      	mov	r5, ip
    1800:	043f      	lsls	r7, r7, #16
    1802:	0c3f      	lsrs	r7, r7, #16
    1804:	437c      	muls	r4, r7
    1806:	4342      	muls	r2, r0
    1808:	435d      	muls	r5, r3
    180a:	437b      	muls	r3, r7
    180c:	0c27      	lsrs	r7, r4, #16
    180e:	189b      	adds	r3, r3, r2
    1810:	18ff      	adds	r7, r7, r3
    1812:	42ba      	cmp	r2, r7
    1814:	d903      	bls.n	181e <__aeabi_fmul+0x15a>
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	025b      	lsls	r3, r3, #9
    181a:	469c      	mov	ip, r3
    181c:	4465      	add	r5, ip
    181e:	0424      	lsls	r4, r4, #16
    1820:	043a      	lsls	r2, r7, #16
    1822:	0c24      	lsrs	r4, r4, #16
    1824:	1912      	adds	r2, r2, r4
    1826:	0193      	lsls	r3, r2, #6
    1828:	1e5c      	subs	r4, r3, #1
    182a:	41a3      	sbcs	r3, r4
    182c:	0c3f      	lsrs	r7, r7, #16
    182e:	0e92      	lsrs	r2, r2, #26
    1830:	197d      	adds	r5, r7, r5
    1832:	431a      	orrs	r2, r3
    1834:	01ad      	lsls	r5, r5, #6
    1836:	4315      	orrs	r5, r2
    1838:	012b      	lsls	r3, r5, #4
    183a:	d504      	bpl.n	1846 <__aeabi_fmul+0x182>
    183c:	2301      	movs	r3, #1
    183e:	465e      	mov	r6, fp
    1840:	086a      	lsrs	r2, r5, #1
    1842:	401d      	ands	r5, r3
    1844:	4315      	orrs	r5, r2
    1846:	0032      	movs	r2, r6
    1848:	327f      	adds	r2, #127	; 0x7f
    184a:	2a00      	cmp	r2, #0
    184c:	dd25      	ble.n	189a <__aeabi_fmul+0x1d6>
    184e:	076b      	lsls	r3, r5, #29
    1850:	d004      	beq.n	185c <__aeabi_fmul+0x198>
    1852:	230f      	movs	r3, #15
    1854:	402b      	ands	r3, r5
    1856:	2b04      	cmp	r3, #4
    1858:	d000      	beq.n	185c <__aeabi_fmul+0x198>
    185a:	3504      	adds	r5, #4
    185c:	012b      	lsls	r3, r5, #4
    185e:	d503      	bpl.n	1868 <__aeabi_fmul+0x1a4>
    1860:	0032      	movs	r2, r6
    1862:	4b27      	ldr	r3, [pc, #156]	; (1900 <__aeabi_fmul+0x23c>)
    1864:	3280      	adds	r2, #128	; 0x80
    1866:	401d      	ands	r5, r3
    1868:	2afe      	cmp	r2, #254	; 0xfe
    186a:	dc94      	bgt.n	1796 <__aeabi_fmul+0xd2>
    186c:	2401      	movs	r4, #1
    186e:	01a8      	lsls	r0, r5, #6
    1870:	0a40      	lsrs	r0, r0, #9
    1872:	b2d2      	uxtb	r2, r2
    1874:	400c      	ands	r4, r1
    1876:	e76f      	b.n	1758 <__aeabi_fmul+0x94>
    1878:	2080      	movs	r0, #128	; 0x80
    187a:	03c0      	lsls	r0, r0, #15
    187c:	4207      	tst	r7, r0
    187e:	d007      	beq.n	1890 <__aeabi_fmul+0x1cc>
    1880:	4205      	tst	r5, r0
    1882:	d105      	bne.n	1890 <__aeabi_fmul+0x1cc>
    1884:	4328      	orrs	r0, r5
    1886:	0240      	lsls	r0, r0, #9
    1888:	0a40      	lsrs	r0, r0, #9
    188a:	4644      	mov	r4, r8
    188c:	22ff      	movs	r2, #255	; 0xff
    188e:	e763      	b.n	1758 <__aeabi_fmul+0x94>
    1890:	4338      	orrs	r0, r7
    1892:	0240      	lsls	r0, r0, #9
    1894:	0a40      	lsrs	r0, r0, #9
    1896:	22ff      	movs	r2, #255	; 0xff
    1898:	e75e      	b.n	1758 <__aeabi_fmul+0x94>
    189a:	2401      	movs	r4, #1
    189c:	1aa3      	subs	r3, r4, r2
    189e:	2b1b      	cmp	r3, #27
    18a0:	dd05      	ble.n	18ae <__aeabi_fmul+0x1ea>
    18a2:	400c      	ands	r4, r1
    18a4:	2200      	movs	r2, #0
    18a6:	2000      	movs	r0, #0
    18a8:	e756      	b.n	1758 <__aeabi_fmul+0x94>
    18aa:	465e      	mov	r6, fp
    18ac:	e7cb      	b.n	1846 <__aeabi_fmul+0x182>
    18ae:	002a      	movs	r2, r5
    18b0:	2020      	movs	r0, #32
    18b2:	40da      	lsrs	r2, r3
    18b4:	1ac3      	subs	r3, r0, r3
    18b6:	409d      	lsls	r5, r3
    18b8:	002b      	movs	r3, r5
    18ba:	1e5d      	subs	r5, r3, #1
    18bc:	41ab      	sbcs	r3, r5
    18be:	4313      	orrs	r3, r2
    18c0:	075a      	lsls	r2, r3, #29
    18c2:	d004      	beq.n	18ce <__aeabi_fmul+0x20a>
    18c4:	220f      	movs	r2, #15
    18c6:	401a      	ands	r2, r3
    18c8:	2a04      	cmp	r2, #4
    18ca:	d000      	beq.n	18ce <__aeabi_fmul+0x20a>
    18cc:	3304      	adds	r3, #4
    18ce:	015a      	lsls	r2, r3, #5
    18d0:	d504      	bpl.n	18dc <__aeabi_fmul+0x218>
    18d2:	2401      	movs	r4, #1
    18d4:	2201      	movs	r2, #1
    18d6:	400c      	ands	r4, r1
    18d8:	2000      	movs	r0, #0
    18da:	e73d      	b.n	1758 <__aeabi_fmul+0x94>
    18dc:	2401      	movs	r4, #1
    18de:	019b      	lsls	r3, r3, #6
    18e0:	0a58      	lsrs	r0, r3, #9
    18e2:	400c      	ands	r4, r1
    18e4:	2200      	movs	r2, #0
    18e6:	e737      	b.n	1758 <__aeabi_fmul+0x94>
    18e8:	2080      	movs	r0, #128	; 0x80
    18ea:	2401      	movs	r4, #1
    18ec:	03c0      	lsls	r0, r0, #15
    18ee:	4328      	orrs	r0, r5
    18f0:	0240      	lsls	r0, r0, #9
    18f2:	0a40      	lsrs	r0, r0, #9
    18f4:	400c      	ands	r4, r1
    18f6:	22ff      	movs	r2, #255	; 0xff
    18f8:	e72e      	b.n	1758 <__aeabi_fmul+0x94>
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	000029b8 	.word	0x000029b8
    1900:	f7ffffff 	.word	0xf7ffffff

00001904 <__aeabi_i2f>:
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	2800      	cmp	r0, #0
    1908:	d030      	beq.n	196c <__aeabi_i2f+0x68>
    190a:	17c3      	asrs	r3, r0, #31
    190c:	18c4      	adds	r4, r0, r3
    190e:	405c      	eors	r4, r3
    1910:	0fc5      	lsrs	r5, r0, #31
    1912:	0020      	movs	r0, r4
    1914:	f000 feb2 	bl	267c <__clzsi2>
    1918:	239e      	movs	r3, #158	; 0x9e
    191a:	1a1b      	subs	r3, r3, r0
    191c:	2b96      	cmp	r3, #150	; 0x96
    191e:	dc0d      	bgt.n	193c <__aeabi_i2f+0x38>
    1920:	2296      	movs	r2, #150	; 0x96
    1922:	1ad2      	subs	r2, r2, r3
    1924:	4094      	lsls	r4, r2
    1926:	002a      	movs	r2, r5
    1928:	0264      	lsls	r4, r4, #9
    192a:	0a64      	lsrs	r4, r4, #9
    192c:	b2db      	uxtb	r3, r3
    192e:	0264      	lsls	r4, r4, #9
    1930:	05db      	lsls	r3, r3, #23
    1932:	0a60      	lsrs	r0, r4, #9
    1934:	07d2      	lsls	r2, r2, #31
    1936:	4318      	orrs	r0, r3
    1938:	4310      	orrs	r0, r2
    193a:	bd70      	pop	{r4, r5, r6, pc}
    193c:	2b99      	cmp	r3, #153	; 0x99
    193e:	dc19      	bgt.n	1974 <__aeabi_i2f+0x70>
    1940:	2299      	movs	r2, #153	; 0x99
    1942:	1ad2      	subs	r2, r2, r3
    1944:	2a00      	cmp	r2, #0
    1946:	dd29      	ble.n	199c <__aeabi_i2f+0x98>
    1948:	4094      	lsls	r4, r2
    194a:	0022      	movs	r2, r4
    194c:	4c14      	ldr	r4, [pc, #80]	; (19a0 <__aeabi_i2f+0x9c>)
    194e:	4014      	ands	r4, r2
    1950:	0751      	lsls	r1, r2, #29
    1952:	d004      	beq.n	195e <__aeabi_i2f+0x5a>
    1954:	210f      	movs	r1, #15
    1956:	400a      	ands	r2, r1
    1958:	2a04      	cmp	r2, #4
    195a:	d000      	beq.n	195e <__aeabi_i2f+0x5a>
    195c:	3404      	adds	r4, #4
    195e:	0162      	lsls	r2, r4, #5
    1960:	d413      	bmi.n	198a <__aeabi_i2f+0x86>
    1962:	01a4      	lsls	r4, r4, #6
    1964:	0a64      	lsrs	r4, r4, #9
    1966:	b2db      	uxtb	r3, r3
    1968:	002a      	movs	r2, r5
    196a:	e7e0      	b.n	192e <__aeabi_i2f+0x2a>
    196c:	2200      	movs	r2, #0
    196e:	2300      	movs	r3, #0
    1970:	2400      	movs	r4, #0
    1972:	e7dc      	b.n	192e <__aeabi_i2f+0x2a>
    1974:	2205      	movs	r2, #5
    1976:	0021      	movs	r1, r4
    1978:	1a12      	subs	r2, r2, r0
    197a:	40d1      	lsrs	r1, r2
    197c:	22b9      	movs	r2, #185	; 0xb9
    197e:	1ad2      	subs	r2, r2, r3
    1980:	4094      	lsls	r4, r2
    1982:	1e62      	subs	r2, r4, #1
    1984:	4194      	sbcs	r4, r2
    1986:	430c      	orrs	r4, r1
    1988:	e7da      	b.n	1940 <__aeabi_i2f+0x3c>
    198a:	4b05      	ldr	r3, [pc, #20]	; (19a0 <__aeabi_i2f+0x9c>)
    198c:	002a      	movs	r2, r5
    198e:	401c      	ands	r4, r3
    1990:	239f      	movs	r3, #159	; 0x9f
    1992:	01a4      	lsls	r4, r4, #6
    1994:	1a1b      	subs	r3, r3, r0
    1996:	0a64      	lsrs	r4, r4, #9
    1998:	b2db      	uxtb	r3, r3
    199a:	e7c8      	b.n	192e <__aeabi_i2f+0x2a>
    199c:	0022      	movs	r2, r4
    199e:	e7d5      	b.n	194c <__aeabi_i2f+0x48>
    19a0:	fbffffff 	.word	0xfbffffff

000019a4 <__aeabi_dadd>:
    19a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19a6:	4645      	mov	r5, r8
    19a8:	46de      	mov	lr, fp
    19aa:	4657      	mov	r7, sl
    19ac:	464e      	mov	r6, r9
    19ae:	030c      	lsls	r4, r1, #12
    19b0:	b5e0      	push	{r5, r6, r7, lr}
    19b2:	004e      	lsls	r6, r1, #1
    19b4:	0fc9      	lsrs	r1, r1, #31
    19b6:	4688      	mov	r8, r1
    19b8:	000d      	movs	r5, r1
    19ba:	0a61      	lsrs	r1, r4, #9
    19bc:	0f44      	lsrs	r4, r0, #29
    19be:	430c      	orrs	r4, r1
    19c0:	00c7      	lsls	r7, r0, #3
    19c2:	0319      	lsls	r1, r3, #12
    19c4:	0058      	lsls	r0, r3, #1
    19c6:	0fdb      	lsrs	r3, r3, #31
    19c8:	469b      	mov	fp, r3
    19ca:	0a4b      	lsrs	r3, r1, #9
    19cc:	0f51      	lsrs	r1, r2, #29
    19ce:	430b      	orrs	r3, r1
    19d0:	0d76      	lsrs	r6, r6, #21
    19d2:	0d40      	lsrs	r0, r0, #21
    19d4:	0019      	movs	r1, r3
    19d6:	00d2      	lsls	r2, r2, #3
    19d8:	45d8      	cmp	r8, fp
    19da:	d100      	bne.n	19de <__aeabi_dadd+0x3a>
    19dc:	e0ae      	b.n	1b3c <__aeabi_dadd+0x198>
    19de:	1a35      	subs	r5, r6, r0
    19e0:	2d00      	cmp	r5, #0
    19e2:	dc00      	bgt.n	19e6 <__aeabi_dadd+0x42>
    19e4:	e0f6      	b.n	1bd4 <__aeabi_dadd+0x230>
    19e6:	2800      	cmp	r0, #0
    19e8:	d10f      	bne.n	1a0a <__aeabi_dadd+0x66>
    19ea:	4313      	orrs	r3, r2
    19ec:	d100      	bne.n	19f0 <__aeabi_dadd+0x4c>
    19ee:	e0db      	b.n	1ba8 <__aeabi_dadd+0x204>
    19f0:	1e6b      	subs	r3, r5, #1
    19f2:	2b00      	cmp	r3, #0
    19f4:	d000      	beq.n	19f8 <__aeabi_dadd+0x54>
    19f6:	e137      	b.n	1c68 <__aeabi_dadd+0x2c4>
    19f8:	1aba      	subs	r2, r7, r2
    19fa:	4297      	cmp	r7, r2
    19fc:	41bf      	sbcs	r7, r7
    19fe:	1a64      	subs	r4, r4, r1
    1a00:	427f      	negs	r7, r7
    1a02:	1be4      	subs	r4, r4, r7
    1a04:	2601      	movs	r6, #1
    1a06:	0017      	movs	r7, r2
    1a08:	e024      	b.n	1a54 <__aeabi_dadd+0xb0>
    1a0a:	4bc6      	ldr	r3, [pc, #792]	; (1d24 <__aeabi_dadd+0x380>)
    1a0c:	429e      	cmp	r6, r3
    1a0e:	d04d      	beq.n	1aac <__aeabi_dadd+0x108>
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	041b      	lsls	r3, r3, #16
    1a14:	4319      	orrs	r1, r3
    1a16:	2d38      	cmp	r5, #56	; 0x38
    1a18:	dd00      	ble.n	1a1c <__aeabi_dadd+0x78>
    1a1a:	e107      	b.n	1c2c <__aeabi_dadd+0x288>
    1a1c:	2d1f      	cmp	r5, #31
    1a1e:	dd00      	ble.n	1a22 <__aeabi_dadd+0x7e>
    1a20:	e138      	b.n	1c94 <__aeabi_dadd+0x2f0>
    1a22:	2020      	movs	r0, #32
    1a24:	1b43      	subs	r3, r0, r5
    1a26:	469a      	mov	sl, r3
    1a28:	000b      	movs	r3, r1
    1a2a:	4650      	mov	r0, sl
    1a2c:	4083      	lsls	r3, r0
    1a2e:	4699      	mov	r9, r3
    1a30:	0013      	movs	r3, r2
    1a32:	4648      	mov	r0, r9
    1a34:	40eb      	lsrs	r3, r5
    1a36:	4318      	orrs	r0, r3
    1a38:	0003      	movs	r3, r0
    1a3a:	4650      	mov	r0, sl
    1a3c:	4082      	lsls	r2, r0
    1a3e:	1e50      	subs	r0, r2, #1
    1a40:	4182      	sbcs	r2, r0
    1a42:	40e9      	lsrs	r1, r5
    1a44:	431a      	orrs	r2, r3
    1a46:	1aba      	subs	r2, r7, r2
    1a48:	1a61      	subs	r1, r4, r1
    1a4a:	4297      	cmp	r7, r2
    1a4c:	41a4      	sbcs	r4, r4
    1a4e:	0017      	movs	r7, r2
    1a50:	4264      	negs	r4, r4
    1a52:	1b0c      	subs	r4, r1, r4
    1a54:	0223      	lsls	r3, r4, #8
    1a56:	d562      	bpl.n	1b1e <__aeabi_dadd+0x17a>
    1a58:	0264      	lsls	r4, r4, #9
    1a5a:	0a65      	lsrs	r5, r4, #9
    1a5c:	2d00      	cmp	r5, #0
    1a5e:	d100      	bne.n	1a62 <__aeabi_dadd+0xbe>
    1a60:	e0df      	b.n	1c22 <__aeabi_dadd+0x27e>
    1a62:	0028      	movs	r0, r5
    1a64:	f000 fe0a 	bl	267c <__clzsi2>
    1a68:	0003      	movs	r3, r0
    1a6a:	3b08      	subs	r3, #8
    1a6c:	2b1f      	cmp	r3, #31
    1a6e:	dd00      	ble.n	1a72 <__aeabi_dadd+0xce>
    1a70:	e0d2      	b.n	1c18 <__aeabi_dadd+0x274>
    1a72:	2220      	movs	r2, #32
    1a74:	003c      	movs	r4, r7
    1a76:	1ad2      	subs	r2, r2, r3
    1a78:	409d      	lsls	r5, r3
    1a7a:	40d4      	lsrs	r4, r2
    1a7c:	409f      	lsls	r7, r3
    1a7e:	4325      	orrs	r5, r4
    1a80:	429e      	cmp	r6, r3
    1a82:	dd00      	ble.n	1a86 <__aeabi_dadd+0xe2>
    1a84:	e0c4      	b.n	1c10 <__aeabi_dadd+0x26c>
    1a86:	1b9e      	subs	r6, r3, r6
    1a88:	1c73      	adds	r3, r6, #1
    1a8a:	2b1f      	cmp	r3, #31
    1a8c:	dd00      	ble.n	1a90 <__aeabi_dadd+0xec>
    1a8e:	e0f1      	b.n	1c74 <__aeabi_dadd+0x2d0>
    1a90:	2220      	movs	r2, #32
    1a92:	0038      	movs	r0, r7
    1a94:	0029      	movs	r1, r5
    1a96:	1ad2      	subs	r2, r2, r3
    1a98:	40d8      	lsrs	r0, r3
    1a9a:	4091      	lsls	r1, r2
    1a9c:	4097      	lsls	r7, r2
    1a9e:	002c      	movs	r4, r5
    1aa0:	4301      	orrs	r1, r0
    1aa2:	1e78      	subs	r0, r7, #1
    1aa4:	4187      	sbcs	r7, r0
    1aa6:	40dc      	lsrs	r4, r3
    1aa8:	2600      	movs	r6, #0
    1aaa:	430f      	orrs	r7, r1
    1aac:	077b      	lsls	r3, r7, #29
    1aae:	d009      	beq.n	1ac4 <__aeabi_dadd+0x120>
    1ab0:	230f      	movs	r3, #15
    1ab2:	403b      	ands	r3, r7
    1ab4:	2b04      	cmp	r3, #4
    1ab6:	d005      	beq.n	1ac4 <__aeabi_dadd+0x120>
    1ab8:	1d3b      	adds	r3, r7, #4
    1aba:	42bb      	cmp	r3, r7
    1abc:	41bf      	sbcs	r7, r7
    1abe:	427f      	negs	r7, r7
    1ac0:	19e4      	adds	r4, r4, r7
    1ac2:	001f      	movs	r7, r3
    1ac4:	0223      	lsls	r3, r4, #8
    1ac6:	d52c      	bpl.n	1b22 <__aeabi_dadd+0x17e>
    1ac8:	4b96      	ldr	r3, [pc, #600]	; (1d24 <__aeabi_dadd+0x380>)
    1aca:	3601      	adds	r6, #1
    1acc:	429e      	cmp	r6, r3
    1ace:	d100      	bne.n	1ad2 <__aeabi_dadd+0x12e>
    1ad0:	e09a      	b.n	1c08 <__aeabi_dadd+0x264>
    1ad2:	4645      	mov	r5, r8
    1ad4:	4b94      	ldr	r3, [pc, #592]	; (1d28 <__aeabi_dadd+0x384>)
    1ad6:	08ff      	lsrs	r7, r7, #3
    1ad8:	401c      	ands	r4, r3
    1ada:	0760      	lsls	r0, r4, #29
    1adc:	0576      	lsls	r6, r6, #21
    1ade:	0264      	lsls	r4, r4, #9
    1ae0:	4307      	orrs	r7, r0
    1ae2:	0b24      	lsrs	r4, r4, #12
    1ae4:	0d76      	lsrs	r6, r6, #21
    1ae6:	2100      	movs	r1, #0
    1ae8:	0324      	lsls	r4, r4, #12
    1aea:	0b23      	lsrs	r3, r4, #12
    1aec:	0d0c      	lsrs	r4, r1, #20
    1aee:	4a8f      	ldr	r2, [pc, #572]	; (1d2c <__aeabi_dadd+0x388>)
    1af0:	0524      	lsls	r4, r4, #20
    1af2:	431c      	orrs	r4, r3
    1af4:	4014      	ands	r4, r2
    1af6:	0533      	lsls	r3, r6, #20
    1af8:	4323      	orrs	r3, r4
    1afa:	005b      	lsls	r3, r3, #1
    1afc:	07ed      	lsls	r5, r5, #31
    1afe:	085b      	lsrs	r3, r3, #1
    1b00:	432b      	orrs	r3, r5
    1b02:	0038      	movs	r0, r7
    1b04:	0019      	movs	r1, r3
    1b06:	bc3c      	pop	{r2, r3, r4, r5}
    1b08:	4690      	mov	r8, r2
    1b0a:	4699      	mov	r9, r3
    1b0c:	46a2      	mov	sl, r4
    1b0e:	46ab      	mov	fp, r5
    1b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b12:	4664      	mov	r4, ip
    1b14:	4304      	orrs	r4, r0
    1b16:	d100      	bne.n	1b1a <__aeabi_dadd+0x176>
    1b18:	e211      	b.n	1f3e <__aeabi_dadd+0x59a>
    1b1a:	0004      	movs	r4, r0
    1b1c:	4667      	mov	r7, ip
    1b1e:	077b      	lsls	r3, r7, #29
    1b20:	d1c6      	bne.n	1ab0 <__aeabi_dadd+0x10c>
    1b22:	4645      	mov	r5, r8
    1b24:	0760      	lsls	r0, r4, #29
    1b26:	08ff      	lsrs	r7, r7, #3
    1b28:	4307      	orrs	r7, r0
    1b2a:	08e4      	lsrs	r4, r4, #3
    1b2c:	4b7d      	ldr	r3, [pc, #500]	; (1d24 <__aeabi_dadd+0x380>)
    1b2e:	429e      	cmp	r6, r3
    1b30:	d030      	beq.n	1b94 <__aeabi_dadd+0x1f0>
    1b32:	0324      	lsls	r4, r4, #12
    1b34:	0576      	lsls	r6, r6, #21
    1b36:	0b24      	lsrs	r4, r4, #12
    1b38:	0d76      	lsrs	r6, r6, #21
    1b3a:	e7d4      	b.n	1ae6 <__aeabi_dadd+0x142>
    1b3c:	1a33      	subs	r3, r6, r0
    1b3e:	469a      	mov	sl, r3
    1b40:	2b00      	cmp	r3, #0
    1b42:	dd78      	ble.n	1c36 <__aeabi_dadd+0x292>
    1b44:	2800      	cmp	r0, #0
    1b46:	d031      	beq.n	1bac <__aeabi_dadd+0x208>
    1b48:	4876      	ldr	r0, [pc, #472]	; (1d24 <__aeabi_dadd+0x380>)
    1b4a:	4286      	cmp	r6, r0
    1b4c:	d0ae      	beq.n	1aac <__aeabi_dadd+0x108>
    1b4e:	2080      	movs	r0, #128	; 0x80
    1b50:	0400      	lsls	r0, r0, #16
    1b52:	4301      	orrs	r1, r0
    1b54:	4653      	mov	r3, sl
    1b56:	2b38      	cmp	r3, #56	; 0x38
    1b58:	dc00      	bgt.n	1b5c <__aeabi_dadd+0x1b8>
    1b5a:	e0e9      	b.n	1d30 <__aeabi_dadd+0x38c>
    1b5c:	430a      	orrs	r2, r1
    1b5e:	1e51      	subs	r1, r2, #1
    1b60:	418a      	sbcs	r2, r1
    1b62:	2100      	movs	r1, #0
    1b64:	19d2      	adds	r2, r2, r7
    1b66:	42ba      	cmp	r2, r7
    1b68:	41bf      	sbcs	r7, r7
    1b6a:	1909      	adds	r1, r1, r4
    1b6c:	427c      	negs	r4, r7
    1b6e:	0017      	movs	r7, r2
    1b70:	190c      	adds	r4, r1, r4
    1b72:	0223      	lsls	r3, r4, #8
    1b74:	d5d3      	bpl.n	1b1e <__aeabi_dadd+0x17a>
    1b76:	4b6b      	ldr	r3, [pc, #428]	; (1d24 <__aeabi_dadd+0x380>)
    1b78:	3601      	adds	r6, #1
    1b7a:	429e      	cmp	r6, r3
    1b7c:	d100      	bne.n	1b80 <__aeabi_dadd+0x1dc>
    1b7e:	e13a      	b.n	1df6 <__aeabi_dadd+0x452>
    1b80:	2001      	movs	r0, #1
    1b82:	4b69      	ldr	r3, [pc, #420]	; (1d28 <__aeabi_dadd+0x384>)
    1b84:	401c      	ands	r4, r3
    1b86:	087b      	lsrs	r3, r7, #1
    1b88:	4007      	ands	r7, r0
    1b8a:	431f      	orrs	r7, r3
    1b8c:	07e0      	lsls	r0, r4, #31
    1b8e:	4307      	orrs	r7, r0
    1b90:	0864      	lsrs	r4, r4, #1
    1b92:	e78b      	b.n	1aac <__aeabi_dadd+0x108>
    1b94:	0023      	movs	r3, r4
    1b96:	433b      	orrs	r3, r7
    1b98:	d100      	bne.n	1b9c <__aeabi_dadd+0x1f8>
    1b9a:	e1cb      	b.n	1f34 <__aeabi_dadd+0x590>
    1b9c:	2280      	movs	r2, #128	; 0x80
    1b9e:	0312      	lsls	r2, r2, #12
    1ba0:	4314      	orrs	r4, r2
    1ba2:	0324      	lsls	r4, r4, #12
    1ba4:	0b24      	lsrs	r4, r4, #12
    1ba6:	e79e      	b.n	1ae6 <__aeabi_dadd+0x142>
    1ba8:	002e      	movs	r6, r5
    1baa:	e77f      	b.n	1aac <__aeabi_dadd+0x108>
    1bac:	0008      	movs	r0, r1
    1bae:	4310      	orrs	r0, r2
    1bb0:	d100      	bne.n	1bb4 <__aeabi_dadd+0x210>
    1bb2:	e0b4      	b.n	1d1e <__aeabi_dadd+0x37a>
    1bb4:	1e58      	subs	r0, r3, #1
    1bb6:	2800      	cmp	r0, #0
    1bb8:	d000      	beq.n	1bbc <__aeabi_dadd+0x218>
    1bba:	e0de      	b.n	1d7a <__aeabi_dadd+0x3d6>
    1bbc:	18ba      	adds	r2, r7, r2
    1bbe:	42ba      	cmp	r2, r7
    1bc0:	419b      	sbcs	r3, r3
    1bc2:	1864      	adds	r4, r4, r1
    1bc4:	425b      	negs	r3, r3
    1bc6:	18e4      	adds	r4, r4, r3
    1bc8:	0017      	movs	r7, r2
    1bca:	2601      	movs	r6, #1
    1bcc:	0223      	lsls	r3, r4, #8
    1bce:	d5a6      	bpl.n	1b1e <__aeabi_dadd+0x17a>
    1bd0:	2602      	movs	r6, #2
    1bd2:	e7d5      	b.n	1b80 <__aeabi_dadd+0x1dc>
    1bd4:	2d00      	cmp	r5, #0
    1bd6:	d16e      	bne.n	1cb6 <__aeabi_dadd+0x312>
    1bd8:	1c70      	adds	r0, r6, #1
    1bda:	0540      	lsls	r0, r0, #21
    1bdc:	0d40      	lsrs	r0, r0, #21
    1bde:	2801      	cmp	r0, #1
    1be0:	dc00      	bgt.n	1be4 <__aeabi_dadd+0x240>
    1be2:	e0f9      	b.n	1dd8 <__aeabi_dadd+0x434>
    1be4:	1ab8      	subs	r0, r7, r2
    1be6:	4684      	mov	ip, r0
    1be8:	4287      	cmp	r7, r0
    1bea:	4180      	sbcs	r0, r0
    1bec:	1ae5      	subs	r5, r4, r3
    1bee:	4240      	negs	r0, r0
    1bf0:	1a2d      	subs	r5, r5, r0
    1bf2:	0228      	lsls	r0, r5, #8
    1bf4:	d400      	bmi.n	1bf8 <__aeabi_dadd+0x254>
    1bf6:	e089      	b.n	1d0c <__aeabi_dadd+0x368>
    1bf8:	1bd7      	subs	r7, r2, r7
    1bfa:	42ba      	cmp	r2, r7
    1bfc:	4192      	sbcs	r2, r2
    1bfe:	1b1c      	subs	r4, r3, r4
    1c00:	4252      	negs	r2, r2
    1c02:	1aa5      	subs	r5, r4, r2
    1c04:	46d8      	mov	r8, fp
    1c06:	e729      	b.n	1a5c <__aeabi_dadd+0xb8>
    1c08:	4645      	mov	r5, r8
    1c0a:	2400      	movs	r4, #0
    1c0c:	2700      	movs	r7, #0
    1c0e:	e76a      	b.n	1ae6 <__aeabi_dadd+0x142>
    1c10:	4c45      	ldr	r4, [pc, #276]	; (1d28 <__aeabi_dadd+0x384>)
    1c12:	1af6      	subs	r6, r6, r3
    1c14:	402c      	ands	r4, r5
    1c16:	e749      	b.n	1aac <__aeabi_dadd+0x108>
    1c18:	003d      	movs	r5, r7
    1c1a:	3828      	subs	r0, #40	; 0x28
    1c1c:	4085      	lsls	r5, r0
    1c1e:	2700      	movs	r7, #0
    1c20:	e72e      	b.n	1a80 <__aeabi_dadd+0xdc>
    1c22:	0038      	movs	r0, r7
    1c24:	f000 fd2a 	bl	267c <__clzsi2>
    1c28:	3020      	adds	r0, #32
    1c2a:	e71d      	b.n	1a68 <__aeabi_dadd+0xc4>
    1c2c:	430a      	orrs	r2, r1
    1c2e:	1e51      	subs	r1, r2, #1
    1c30:	418a      	sbcs	r2, r1
    1c32:	2100      	movs	r1, #0
    1c34:	e707      	b.n	1a46 <__aeabi_dadd+0xa2>
    1c36:	2b00      	cmp	r3, #0
    1c38:	d000      	beq.n	1c3c <__aeabi_dadd+0x298>
    1c3a:	e0f3      	b.n	1e24 <__aeabi_dadd+0x480>
    1c3c:	1c70      	adds	r0, r6, #1
    1c3e:	0543      	lsls	r3, r0, #21
    1c40:	0d5b      	lsrs	r3, r3, #21
    1c42:	2b01      	cmp	r3, #1
    1c44:	dc00      	bgt.n	1c48 <__aeabi_dadd+0x2a4>
    1c46:	e0ad      	b.n	1da4 <__aeabi_dadd+0x400>
    1c48:	4b36      	ldr	r3, [pc, #216]	; (1d24 <__aeabi_dadd+0x380>)
    1c4a:	4298      	cmp	r0, r3
    1c4c:	d100      	bne.n	1c50 <__aeabi_dadd+0x2ac>
    1c4e:	e0d1      	b.n	1df4 <__aeabi_dadd+0x450>
    1c50:	18ba      	adds	r2, r7, r2
    1c52:	42ba      	cmp	r2, r7
    1c54:	41bf      	sbcs	r7, r7
    1c56:	1864      	adds	r4, r4, r1
    1c58:	427f      	negs	r7, r7
    1c5a:	19e4      	adds	r4, r4, r7
    1c5c:	07e7      	lsls	r7, r4, #31
    1c5e:	0852      	lsrs	r2, r2, #1
    1c60:	4317      	orrs	r7, r2
    1c62:	0864      	lsrs	r4, r4, #1
    1c64:	0006      	movs	r6, r0
    1c66:	e721      	b.n	1aac <__aeabi_dadd+0x108>
    1c68:	482e      	ldr	r0, [pc, #184]	; (1d24 <__aeabi_dadd+0x380>)
    1c6a:	4285      	cmp	r5, r0
    1c6c:	d100      	bne.n	1c70 <__aeabi_dadd+0x2cc>
    1c6e:	e093      	b.n	1d98 <__aeabi_dadd+0x3f4>
    1c70:	001d      	movs	r5, r3
    1c72:	e6d0      	b.n	1a16 <__aeabi_dadd+0x72>
    1c74:	0029      	movs	r1, r5
    1c76:	3e1f      	subs	r6, #31
    1c78:	40f1      	lsrs	r1, r6
    1c7a:	2b20      	cmp	r3, #32
    1c7c:	d100      	bne.n	1c80 <__aeabi_dadd+0x2dc>
    1c7e:	e08d      	b.n	1d9c <__aeabi_dadd+0x3f8>
    1c80:	2240      	movs	r2, #64	; 0x40
    1c82:	1ad3      	subs	r3, r2, r3
    1c84:	409d      	lsls	r5, r3
    1c86:	432f      	orrs	r7, r5
    1c88:	1e7d      	subs	r5, r7, #1
    1c8a:	41af      	sbcs	r7, r5
    1c8c:	2400      	movs	r4, #0
    1c8e:	430f      	orrs	r7, r1
    1c90:	2600      	movs	r6, #0
    1c92:	e744      	b.n	1b1e <__aeabi_dadd+0x17a>
    1c94:	002b      	movs	r3, r5
    1c96:	0008      	movs	r0, r1
    1c98:	3b20      	subs	r3, #32
    1c9a:	40d8      	lsrs	r0, r3
    1c9c:	0003      	movs	r3, r0
    1c9e:	2d20      	cmp	r5, #32
    1ca0:	d100      	bne.n	1ca4 <__aeabi_dadd+0x300>
    1ca2:	e07d      	b.n	1da0 <__aeabi_dadd+0x3fc>
    1ca4:	2040      	movs	r0, #64	; 0x40
    1ca6:	1b45      	subs	r5, r0, r5
    1ca8:	40a9      	lsls	r1, r5
    1caa:	430a      	orrs	r2, r1
    1cac:	1e51      	subs	r1, r2, #1
    1cae:	418a      	sbcs	r2, r1
    1cb0:	2100      	movs	r1, #0
    1cb2:	431a      	orrs	r2, r3
    1cb4:	e6c7      	b.n	1a46 <__aeabi_dadd+0xa2>
    1cb6:	2e00      	cmp	r6, #0
    1cb8:	d050      	beq.n	1d5c <__aeabi_dadd+0x3b8>
    1cba:	4e1a      	ldr	r6, [pc, #104]	; (1d24 <__aeabi_dadd+0x380>)
    1cbc:	42b0      	cmp	r0, r6
    1cbe:	d057      	beq.n	1d70 <__aeabi_dadd+0x3cc>
    1cc0:	2680      	movs	r6, #128	; 0x80
    1cc2:	426b      	negs	r3, r5
    1cc4:	4699      	mov	r9, r3
    1cc6:	0436      	lsls	r6, r6, #16
    1cc8:	4334      	orrs	r4, r6
    1cca:	464b      	mov	r3, r9
    1ccc:	2b38      	cmp	r3, #56	; 0x38
    1cce:	dd00      	ble.n	1cd2 <__aeabi_dadd+0x32e>
    1cd0:	e0d6      	b.n	1e80 <__aeabi_dadd+0x4dc>
    1cd2:	2b1f      	cmp	r3, #31
    1cd4:	dd00      	ble.n	1cd8 <__aeabi_dadd+0x334>
    1cd6:	e135      	b.n	1f44 <__aeabi_dadd+0x5a0>
    1cd8:	2620      	movs	r6, #32
    1cda:	1af5      	subs	r5, r6, r3
    1cdc:	0026      	movs	r6, r4
    1cde:	40ae      	lsls	r6, r5
    1ce0:	46b2      	mov	sl, r6
    1ce2:	003e      	movs	r6, r7
    1ce4:	40de      	lsrs	r6, r3
    1ce6:	46ac      	mov	ip, r5
    1ce8:	0035      	movs	r5, r6
    1cea:	4656      	mov	r6, sl
    1cec:	432e      	orrs	r6, r5
    1cee:	4665      	mov	r5, ip
    1cf0:	40af      	lsls	r7, r5
    1cf2:	1e7d      	subs	r5, r7, #1
    1cf4:	41af      	sbcs	r7, r5
    1cf6:	40dc      	lsrs	r4, r3
    1cf8:	4337      	orrs	r7, r6
    1cfa:	1bd7      	subs	r7, r2, r7
    1cfc:	42ba      	cmp	r2, r7
    1cfe:	4192      	sbcs	r2, r2
    1d00:	1b0c      	subs	r4, r1, r4
    1d02:	4252      	negs	r2, r2
    1d04:	1aa4      	subs	r4, r4, r2
    1d06:	0006      	movs	r6, r0
    1d08:	46d8      	mov	r8, fp
    1d0a:	e6a3      	b.n	1a54 <__aeabi_dadd+0xb0>
    1d0c:	4664      	mov	r4, ip
    1d0e:	4667      	mov	r7, ip
    1d10:	432c      	orrs	r4, r5
    1d12:	d000      	beq.n	1d16 <__aeabi_dadd+0x372>
    1d14:	e6a2      	b.n	1a5c <__aeabi_dadd+0xb8>
    1d16:	2500      	movs	r5, #0
    1d18:	2600      	movs	r6, #0
    1d1a:	2700      	movs	r7, #0
    1d1c:	e706      	b.n	1b2c <__aeabi_dadd+0x188>
    1d1e:	001e      	movs	r6, r3
    1d20:	e6c4      	b.n	1aac <__aeabi_dadd+0x108>
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	000007ff 	.word	0x000007ff
    1d28:	ff7fffff 	.word	0xff7fffff
    1d2c:	800fffff 	.word	0x800fffff
    1d30:	2b1f      	cmp	r3, #31
    1d32:	dc63      	bgt.n	1dfc <__aeabi_dadd+0x458>
    1d34:	2020      	movs	r0, #32
    1d36:	1ac3      	subs	r3, r0, r3
    1d38:	0008      	movs	r0, r1
    1d3a:	4098      	lsls	r0, r3
    1d3c:	469c      	mov	ip, r3
    1d3e:	4683      	mov	fp, r0
    1d40:	4653      	mov	r3, sl
    1d42:	0010      	movs	r0, r2
    1d44:	40d8      	lsrs	r0, r3
    1d46:	0003      	movs	r3, r0
    1d48:	4658      	mov	r0, fp
    1d4a:	4318      	orrs	r0, r3
    1d4c:	4663      	mov	r3, ip
    1d4e:	409a      	lsls	r2, r3
    1d50:	1e53      	subs	r3, r2, #1
    1d52:	419a      	sbcs	r2, r3
    1d54:	4653      	mov	r3, sl
    1d56:	4302      	orrs	r2, r0
    1d58:	40d9      	lsrs	r1, r3
    1d5a:	e703      	b.n	1b64 <__aeabi_dadd+0x1c0>
    1d5c:	0026      	movs	r6, r4
    1d5e:	433e      	orrs	r6, r7
    1d60:	d006      	beq.n	1d70 <__aeabi_dadd+0x3cc>
    1d62:	43eb      	mvns	r3, r5
    1d64:	4699      	mov	r9, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d0c7      	beq.n	1cfa <__aeabi_dadd+0x356>
    1d6a:	4e94      	ldr	r6, [pc, #592]	; (1fbc <__aeabi_dadd+0x618>)
    1d6c:	42b0      	cmp	r0, r6
    1d6e:	d1ac      	bne.n	1cca <__aeabi_dadd+0x326>
    1d70:	000c      	movs	r4, r1
    1d72:	0017      	movs	r7, r2
    1d74:	0006      	movs	r6, r0
    1d76:	46d8      	mov	r8, fp
    1d78:	e698      	b.n	1aac <__aeabi_dadd+0x108>
    1d7a:	4b90      	ldr	r3, [pc, #576]	; (1fbc <__aeabi_dadd+0x618>)
    1d7c:	459a      	cmp	sl, r3
    1d7e:	d00b      	beq.n	1d98 <__aeabi_dadd+0x3f4>
    1d80:	4682      	mov	sl, r0
    1d82:	e6e7      	b.n	1b54 <__aeabi_dadd+0x1b0>
    1d84:	2800      	cmp	r0, #0
    1d86:	d000      	beq.n	1d8a <__aeabi_dadd+0x3e6>
    1d88:	e09e      	b.n	1ec8 <__aeabi_dadd+0x524>
    1d8a:	0018      	movs	r0, r3
    1d8c:	4310      	orrs	r0, r2
    1d8e:	d100      	bne.n	1d92 <__aeabi_dadd+0x3ee>
    1d90:	e0e9      	b.n	1f66 <__aeabi_dadd+0x5c2>
    1d92:	001c      	movs	r4, r3
    1d94:	0017      	movs	r7, r2
    1d96:	46d8      	mov	r8, fp
    1d98:	4e88      	ldr	r6, [pc, #544]	; (1fbc <__aeabi_dadd+0x618>)
    1d9a:	e687      	b.n	1aac <__aeabi_dadd+0x108>
    1d9c:	2500      	movs	r5, #0
    1d9e:	e772      	b.n	1c86 <__aeabi_dadd+0x2e2>
    1da0:	2100      	movs	r1, #0
    1da2:	e782      	b.n	1caa <__aeabi_dadd+0x306>
    1da4:	0023      	movs	r3, r4
    1da6:	433b      	orrs	r3, r7
    1da8:	2e00      	cmp	r6, #0
    1daa:	d000      	beq.n	1dae <__aeabi_dadd+0x40a>
    1dac:	e0ab      	b.n	1f06 <__aeabi_dadd+0x562>
    1dae:	2b00      	cmp	r3, #0
    1db0:	d100      	bne.n	1db4 <__aeabi_dadd+0x410>
    1db2:	e0e7      	b.n	1f84 <__aeabi_dadd+0x5e0>
    1db4:	000b      	movs	r3, r1
    1db6:	4313      	orrs	r3, r2
    1db8:	d100      	bne.n	1dbc <__aeabi_dadd+0x418>
    1dba:	e677      	b.n	1aac <__aeabi_dadd+0x108>
    1dbc:	18ba      	adds	r2, r7, r2
    1dbe:	42ba      	cmp	r2, r7
    1dc0:	41bf      	sbcs	r7, r7
    1dc2:	1864      	adds	r4, r4, r1
    1dc4:	427f      	negs	r7, r7
    1dc6:	19e4      	adds	r4, r4, r7
    1dc8:	0223      	lsls	r3, r4, #8
    1dca:	d400      	bmi.n	1dce <__aeabi_dadd+0x42a>
    1dcc:	e0f2      	b.n	1fb4 <__aeabi_dadd+0x610>
    1dce:	4b7c      	ldr	r3, [pc, #496]	; (1fc0 <__aeabi_dadd+0x61c>)
    1dd0:	0017      	movs	r7, r2
    1dd2:	401c      	ands	r4, r3
    1dd4:	0006      	movs	r6, r0
    1dd6:	e669      	b.n	1aac <__aeabi_dadd+0x108>
    1dd8:	0020      	movs	r0, r4
    1dda:	4338      	orrs	r0, r7
    1ddc:	2e00      	cmp	r6, #0
    1dde:	d1d1      	bne.n	1d84 <__aeabi_dadd+0x3e0>
    1de0:	2800      	cmp	r0, #0
    1de2:	d15b      	bne.n	1e9c <__aeabi_dadd+0x4f8>
    1de4:	001c      	movs	r4, r3
    1de6:	4314      	orrs	r4, r2
    1de8:	d100      	bne.n	1dec <__aeabi_dadd+0x448>
    1dea:	e0a8      	b.n	1f3e <__aeabi_dadd+0x59a>
    1dec:	001c      	movs	r4, r3
    1dee:	0017      	movs	r7, r2
    1df0:	46d8      	mov	r8, fp
    1df2:	e65b      	b.n	1aac <__aeabi_dadd+0x108>
    1df4:	0006      	movs	r6, r0
    1df6:	2400      	movs	r4, #0
    1df8:	2700      	movs	r7, #0
    1dfa:	e697      	b.n	1b2c <__aeabi_dadd+0x188>
    1dfc:	4650      	mov	r0, sl
    1dfe:	000b      	movs	r3, r1
    1e00:	3820      	subs	r0, #32
    1e02:	40c3      	lsrs	r3, r0
    1e04:	4699      	mov	r9, r3
    1e06:	4653      	mov	r3, sl
    1e08:	2b20      	cmp	r3, #32
    1e0a:	d100      	bne.n	1e0e <__aeabi_dadd+0x46a>
    1e0c:	e095      	b.n	1f3a <__aeabi_dadd+0x596>
    1e0e:	2340      	movs	r3, #64	; 0x40
    1e10:	4650      	mov	r0, sl
    1e12:	1a1b      	subs	r3, r3, r0
    1e14:	4099      	lsls	r1, r3
    1e16:	430a      	orrs	r2, r1
    1e18:	1e51      	subs	r1, r2, #1
    1e1a:	418a      	sbcs	r2, r1
    1e1c:	464b      	mov	r3, r9
    1e1e:	2100      	movs	r1, #0
    1e20:	431a      	orrs	r2, r3
    1e22:	e69f      	b.n	1b64 <__aeabi_dadd+0x1c0>
    1e24:	2e00      	cmp	r6, #0
    1e26:	d130      	bne.n	1e8a <__aeabi_dadd+0x4e6>
    1e28:	0026      	movs	r6, r4
    1e2a:	433e      	orrs	r6, r7
    1e2c:	d067      	beq.n	1efe <__aeabi_dadd+0x55a>
    1e2e:	43db      	mvns	r3, r3
    1e30:	469a      	mov	sl, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	d01c      	beq.n	1e70 <__aeabi_dadd+0x4cc>
    1e36:	4e61      	ldr	r6, [pc, #388]	; (1fbc <__aeabi_dadd+0x618>)
    1e38:	42b0      	cmp	r0, r6
    1e3a:	d060      	beq.n	1efe <__aeabi_dadd+0x55a>
    1e3c:	4653      	mov	r3, sl
    1e3e:	2b38      	cmp	r3, #56	; 0x38
    1e40:	dd00      	ble.n	1e44 <__aeabi_dadd+0x4a0>
    1e42:	e096      	b.n	1f72 <__aeabi_dadd+0x5ce>
    1e44:	2b1f      	cmp	r3, #31
    1e46:	dd00      	ble.n	1e4a <__aeabi_dadd+0x4a6>
    1e48:	e09f      	b.n	1f8a <__aeabi_dadd+0x5e6>
    1e4a:	2620      	movs	r6, #32
    1e4c:	1af3      	subs	r3, r6, r3
    1e4e:	0026      	movs	r6, r4
    1e50:	409e      	lsls	r6, r3
    1e52:	469c      	mov	ip, r3
    1e54:	46b3      	mov	fp, r6
    1e56:	4653      	mov	r3, sl
    1e58:	003e      	movs	r6, r7
    1e5a:	40de      	lsrs	r6, r3
    1e5c:	0033      	movs	r3, r6
    1e5e:	465e      	mov	r6, fp
    1e60:	431e      	orrs	r6, r3
    1e62:	4663      	mov	r3, ip
    1e64:	409f      	lsls	r7, r3
    1e66:	1e7b      	subs	r3, r7, #1
    1e68:	419f      	sbcs	r7, r3
    1e6a:	4653      	mov	r3, sl
    1e6c:	40dc      	lsrs	r4, r3
    1e6e:	4337      	orrs	r7, r6
    1e70:	18bf      	adds	r7, r7, r2
    1e72:	4297      	cmp	r7, r2
    1e74:	4192      	sbcs	r2, r2
    1e76:	1864      	adds	r4, r4, r1
    1e78:	4252      	negs	r2, r2
    1e7a:	18a4      	adds	r4, r4, r2
    1e7c:	0006      	movs	r6, r0
    1e7e:	e678      	b.n	1b72 <__aeabi_dadd+0x1ce>
    1e80:	4327      	orrs	r7, r4
    1e82:	1e7c      	subs	r4, r7, #1
    1e84:	41a7      	sbcs	r7, r4
    1e86:	2400      	movs	r4, #0
    1e88:	e737      	b.n	1cfa <__aeabi_dadd+0x356>
    1e8a:	4e4c      	ldr	r6, [pc, #304]	; (1fbc <__aeabi_dadd+0x618>)
    1e8c:	42b0      	cmp	r0, r6
    1e8e:	d036      	beq.n	1efe <__aeabi_dadd+0x55a>
    1e90:	2680      	movs	r6, #128	; 0x80
    1e92:	425b      	negs	r3, r3
    1e94:	0436      	lsls	r6, r6, #16
    1e96:	469a      	mov	sl, r3
    1e98:	4334      	orrs	r4, r6
    1e9a:	e7cf      	b.n	1e3c <__aeabi_dadd+0x498>
    1e9c:	0018      	movs	r0, r3
    1e9e:	4310      	orrs	r0, r2
    1ea0:	d100      	bne.n	1ea4 <__aeabi_dadd+0x500>
    1ea2:	e603      	b.n	1aac <__aeabi_dadd+0x108>
    1ea4:	1ab8      	subs	r0, r7, r2
    1ea6:	4684      	mov	ip, r0
    1ea8:	4567      	cmp	r7, ip
    1eaa:	41ad      	sbcs	r5, r5
    1eac:	1ae0      	subs	r0, r4, r3
    1eae:	426d      	negs	r5, r5
    1eb0:	1b40      	subs	r0, r0, r5
    1eb2:	0205      	lsls	r5, r0, #8
    1eb4:	d400      	bmi.n	1eb8 <__aeabi_dadd+0x514>
    1eb6:	e62c      	b.n	1b12 <__aeabi_dadd+0x16e>
    1eb8:	1bd7      	subs	r7, r2, r7
    1eba:	42ba      	cmp	r2, r7
    1ebc:	4192      	sbcs	r2, r2
    1ebe:	1b1c      	subs	r4, r3, r4
    1ec0:	4252      	negs	r2, r2
    1ec2:	1aa4      	subs	r4, r4, r2
    1ec4:	46d8      	mov	r8, fp
    1ec6:	e5f1      	b.n	1aac <__aeabi_dadd+0x108>
    1ec8:	0018      	movs	r0, r3
    1eca:	4310      	orrs	r0, r2
    1ecc:	d100      	bne.n	1ed0 <__aeabi_dadd+0x52c>
    1ece:	e763      	b.n	1d98 <__aeabi_dadd+0x3f4>
    1ed0:	08f8      	lsrs	r0, r7, #3
    1ed2:	0767      	lsls	r7, r4, #29
    1ed4:	4307      	orrs	r7, r0
    1ed6:	2080      	movs	r0, #128	; 0x80
    1ed8:	08e4      	lsrs	r4, r4, #3
    1eda:	0300      	lsls	r0, r0, #12
    1edc:	4204      	tst	r4, r0
    1ede:	d008      	beq.n	1ef2 <__aeabi_dadd+0x54e>
    1ee0:	08dd      	lsrs	r5, r3, #3
    1ee2:	4205      	tst	r5, r0
    1ee4:	d105      	bne.n	1ef2 <__aeabi_dadd+0x54e>
    1ee6:	08d2      	lsrs	r2, r2, #3
    1ee8:	0759      	lsls	r1, r3, #29
    1eea:	4311      	orrs	r1, r2
    1eec:	000f      	movs	r7, r1
    1eee:	002c      	movs	r4, r5
    1ef0:	46d8      	mov	r8, fp
    1ef2:	0f7b      	lsrs	r3, r7, #29
    1ef4:	00e4      	lsls	r4, r4, #3
    1ef6:	431c      	orrs	r4, r3
    1ef8:	00ff      	lsls	r7, r7, #3
    1efa:	4e30      	ldr	r6, [pc, #192]	; (1fbc <__aeabi_dadd+0x618>)
    1efc:	e5d6      	b.n	1aac <__aeabi_dadd+0x108>
    1efe:	000c      	movs	r4, r1
    1f00:	0017      	movs	r7, r2
    1f02:	0006      	movs	r6, r0
    1f04:	e5d2      	b.n	1aac <__aeabi_dadd+0x108>
    1f06:	2b00      	cmp	r3, #0
    1f08:	d038      	beq.n	1f7c <__aeabi_dadd+0x5d8>
    1f0a:	000b      	movs	r3, r1
    1f0c:	4313      	orrs	r3, r2
    1f0e:	d100      	bne.n	1f12 <__aeabi_dadd+0x56e>
    1f10:	e742      	b.n	1d98 <__aeabi_dadd+0x3f4>
    1f12:	08f8      	lsrs	r0, r7, #3
    1f14:	0767      	lsls	r7, r4, #29
    1f16:	4307      	orrs	r7, r0
    1f18:	2080      	movs	r0, #128	; 0x80
    1f1a:	08e4      	lsrs	r4, r4, #3
    1f1c:	0300      	lsls	r0, r0, #12
    1f1e:	4204      	tst	r4, r0
    1f20:	d0e7      	beq.n	1ef2 <__aeabi_dadd+0x54e>
    1f22:	08cb      	lsrs	r3, r1, #3
    1f24:	4203      	tst	r3, r0
    1f26:	d1e4      	bne.n	1ef2 <__aeabi_dadd+0x54e>
    1f28:	08d2      	lsrs	r2, r2, #3
    1f2a:	0749      	lsls	r1, r1, #29
    1f2c:	4311      	orrs	r1, r2
    1f2e:	000f      	movs	r7, r1
    1f30:	001c      	movs	r4, r3
    1f32:	e7de      	b.n	1ef2 <__aeabi_dadd+0x54e>
    1f34:	2700      	movs	r7, #0
    1f36:	2400      	movs	r4, #0
    1f38:	e5d5      	b.n	1ae6 <__aeabi_dadd+0x142>
    1f3a:	2100      	movs	r1, #0
    1f3c:	e76b      	b.n	1e16 <__aeabi_dadd+0x472>
    1f3e:	2500      	movs	r5, #0
    1f40:	2700      	movs	r7, #0
    1f42:	e5f3      	b.n	1b2c <__aeabi_dadd+0x188>
    1f44:	464e      	mov	r6, r9
    1f46:	0025      	movs	r5, r4
    1f48:	3e20      	subs	r6, #32
    1f4a:	40f5      	lsrs	r5, r6
    1f4c:	464b      	mov	r3, r9
    1f4e:	002e      	movs	r6, r5
    1f50:	2b20      	cmp	r3, #32
    1f52:	d02d      	beq.n	1fb0 <__aeabi_dadd+0x60c>
    1f54:	2540      	movs	r5, #64	; 0x40
    1f56:	1aed      	subs	r5, r5, r3
    1f58:	40ac      	lsls	r4, r5
    1f5a:	4327      	orrs	r7, r4
    1f5c:	1e7c      	subs	r4, r7, #1
    1f5e:	41a7      	sbcs	r7, r4
    1f60:	2400      	movs	r4, #0
    1f62:	4337      	orrs	r7, r6
    1f64:	e6c9      	b.n	1cfa <__aeabi_dadd+0x356>
    1f66:	2480      	movs	r4, #128	; 0x80
    1f68:	2500      	movs	r5, #0
    1f6a:	0324      	lsls	r4, r4, #12
    1f6c:	4e13      	ldr	r6, [pc, #76]	; (1fbc <__aeabi_dadd+0x618>)
    1f6e:	2700      	movs	r7, #0
    1f70:	e5dc      	b.n	1b2c <__aeabi_dadd+0x188>
    1f72:	4327      	orrs	r7, r4
    1f74:	1e7c      	subs	r4, r7, #1
    1f76:	41a7      	sbcs	r7, r4
    1f78:	2400      	movs	r4, #0
    1f7a:	e779      	b.n	1e70 <__aeabi_dadd+0x4cc>
    1f7c:	000c      	movs	r4, r1
    1f7e:	0017      	movs	r7, r2
    1f80:	4e0e      	ldr	r6, [pc, #56]	; (1fbc <__aeabi_dadd+0x618>)
    1f82:	e593      	b.n	1aac <__aeabi_dadd+0x108>
    1f84:	000c      	movs	r4, r1
    1f86:	0017      	movs	r7, r2
    1f88:	e590      	b.n	1aac <__aeabi_dadd+0x108>
    1f8a:	4656      	mov	r6, sl
    1f8c:	0023      	movs	r3, r4
    1f8e:	3e20      	subs	r6, #32
    1f90:	40f3      	lsrs	r3, r6
    1f92:	4699      	mov	r9, r3
    1f94:	4653      	mov	r3, sl
    1f96:	2b20      	cmp	r3, #32
    1f98:	d00e      	beq.n	1fb8 <__aeabi_dadd+0x614>
    1f9a:	2340      	movs	r3, #64	; 0x40
    1f9c:	4656      	mov	r6, sl
    1f9e:	1b9b      	subs	r3, r3, r6
    1fa0:	409c      	lsls	r4, r3
    1fa2:	4327      	orrs	r7, r4
    1fa4:	1e7c      	subs	r4, r7, #1
    1fa6:	41a7      	sbcs	r7, r4
    1fa8:	464b      	mov	r3, r9
    1faa:	2400      	movs	r4, #0
    1fac:	431f      	orrs	r7, r3
    1fae:	e75f      	b.n	1e70 <__aeabi_dadd+0x4cc>
    1fb0:	2400      	movs	r4, #0
    1fb2:	e7d2      	b.n	1f5a <__aeabi_dadd+0x5b6>
    1fb4:	0017      	movs	r7, r2
    1fb6:	e5b2      	b.n	1b1e <__aeabi_dadd+0x17a>
    1fb8:	2400      	movs	r4, #0
    1fba:	e7f2      	b.n	1fa2 <__aeabi_dadd+0x5fe>
    1fbc:	000007ff 	.word	0x000007ff
    1fc0:	ff7fffff 	.word	0xff7fffff

00001fc4 <__aeabi_dmul>:
    1fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc6:	4657      	mov	r7, sl
    1fc8:	4645      	mov	r5, r8
    1fca:	46de      	mov	lr, fp
    1fcc:	464e      	mov	r6, r9
    1fce:	b5e0      	push	{r5, r6, r7, lr}
    1fd0:	030c      	lsls	r4, r1, #12
    1fd2:	4698      	mov	r8, r3
    1fd4:	004e      	lsls	r6, r1, #1
    1fd6:	0b23      	lsrs	r3, r4, #12
    1fd8:	b087      	sub	sp, #28
    1fda:	0007      	movs	r7, r0
    1fdc:	4692      	mov	sl, r2
    1fde:	469b      	mov	fp, r3
    1fe0:	0d76      	lsrs	r6, r6, #21
    1fe2:	0fcd      	lsrs	r5, r1, #31
    1fe4:	2e00      	cmp	r6, #0
    1fe6:	d06b      	beq.n	20c0 <STACK_SIZE+0xc0>
    1fe8:	4b6d      	ldr	r3, [pc, #436]	; (21a0 <STACK_SIZE+0x1a0>)
    1fea:	429e      	cmp	r6, r3
    1fec:	d035      	beq.n	205a <STACK_SIZE+0x5a>
    1fee:	2480      	movs	r4, #128	; 0x80
    1ff0:	465b      	mov	r3, fp
    1ff2:	0f42      	lsrs	r2, r0, #29
    1ff4:	0424      	lsls	r4, r4, #16
    1ff6:	00db      	lsls	r3, r3, #3
    1ff8:	4314      	orrs	r4, r2
    1ffa:	431c      	orrs	r4, r3
    1ffc:	00c3      	lsls	r3, r0, #3
    1ffe:	4699      	mov	r9, r3
    2000:	4b68      	ldr	r3, [pc, #416]	; (21a4 <STACK_SIZE+0x1a4>)
    2002:	46a3      	mov	fp, r4
    2004:	469c      	mov	ip, r3
    2006:	2300      	movs	r3, #0
    2008:	2700      	movs	r7, #0
    200a:	4466      	add	r6, ip
    200c:	9302      	str	r3, [sp, #8]
    200e:	4643      	mov	r3, r8
    2010:	031c      	lsls	r4, r3, #12
    2012:	005a      	lsls	r2, r3, #1
    2014:	0fdb      	lsrs	r3, r3, #31
    2016:	4650      	mov	r0, sl
    2018:	0b24      	lsrs	r4, r4, #12
    201a:	0d52      	lsrs	r2, r2, #21
    201c:	4698      	mov	r8, r3
    201e:	d100      	bne.n	2022 <STACK_SIZE+0x22>
    2020:	e076      	b.n	2110 <STACK_SIZE+0x110>
    2022:	4b5f      	ldr	r3, [pc, #380]	; (21a0 <STACK_SIZE+0x1a0>)
    2024:	429a      	cmp	r2, r3
    2026:	d06d      	beq.n	2104 <STACK_SIZE+0x104>
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	0f41      	lsrs	r1, r0, #29
    202c:	041b      	lsls	r3, r3, #16
    202e:	430b      	orrs	r3, r1
    2030:	495c      	ldr	r1, [pc, #368]	; (21a4 <STACK_SIZE+0x1a4>)
    2032:	00e4      	lsls	r4, r4, #3
    2034:	468c      	mov	ip, r1
    2036:	431c      	orrs	r4, r3
    2038:	00c3      	lsls	r3, r0, #3
    203a:	2000      	movs	r0, #0
    203c:	4462      	add	r2, ip
    203e:	4641      	mov	r1, r8
    2040:	18b6      	adds	r6, r6, r2
    2042:	4069      	eors	r1, r5
    2044:	1c72      	adds	r2, r6, #1
    2046:	9101      	str	r1, [sp, #4]
    2048:	4694      	mov	ip, r2
    204a:	4307      	orrs	r7, r0
    204c:	2f0f      	cmp	r7, #15
    204e:	d900      	bls.n	2052 <STACK_SIZE+0x52>
    2050:	e0b0      	b.n	21b4 <STACK_SIZE+0x1b4>
    2052:	4a55      	ldr	r2, [pc, #340]	; (21a8 <STACK_SIZE+0x1a8>)
    2054:	00bf      	lsls	r7, r7, #2
    2056:	59d2      	ldr	r2, [r2, r7]
    2058:	4697      	mov	pc, r2
    205a:	465b      	mov	r3, fp
    205c:	4303      	orrs	r3, r0
    205e:	4699      	mov	r9, r3
    2060:	d000      	beq.n	2064 <STACK_SIZE+0x64>
    2062:	e087      	b.n	2174 <STACK_SIZE+0x174>
    2064:	2300      	movs	r3, #0
    2066:	469b      	mov	fp, r3
    2068:	3302      	adds	r3, #2
    206a:	2708      	movs	r7, #8
    206c:	9302      	str	r3, [sp, #8]
    206e:	e7ce      	b.n	200e <STACK_SIZE+0xe>
    2070:	4642      	mov	r2, r8
    2072:	9201      	str	r2, [sp, #4]
    2074:	2802      	cmp	r0, #2
    2076:	d067      	beq.n	2148 <STACK_SIZE+0x148>
    2078:	2803      	cmp	r0, #3
    207a:	d100      	bne.n	207e <STACK_SIZE+0x7e>
    207c:	e20e      	b.n	249c <STACK_SIZE+0x49c>
    207e:	2801      	cmp	r0, #1
    2080:	d000      	beq.n	2084 <STACK_SIZE+0x84>
    2082:	e162      	b.n	234a <STACK_SIZE+0x34a>
    2084:	2300      	movs	r3, #0
    2086:	2400      	movs	r4, #0
    2088:	2200      	movs	r2, #0
    208a:	4699      	mov	r9, r3
    208c:	9901      	ldr	r1, [sp, #4]
    208e:	4001      	ands	r1, r0
    2090:	b2cd      	uxtb	r5, r1
    2092:	2100      	movs	r1, #0
    2094:	0312      	lsls	r2, r2, #12
    2096:	0d0b      	lsrs	r3, r1, #20
    2098:	0b12      	lsrs	r2, r2, #12
    209a:	051b      	lsls	r3, r3, #20
    209c:	4313      	orrs	r3, r2
    209e:	4a43      	ldr	r2, [pc, #268]	; (21ac <STACK_SIZE+0x1ac>)
    20a0:	0524      	lsls	r4, r4, #20
    20a2:	4013      	ands	r3, r2
    20a4:	431c      	orrs	r4, r3
    20a6:	0064      	lsls	r4, r4, #1
    20a8:	07ed      	lsls	r5, r5, #31
    20aa:	0864      	lsrs	r4, r4, #1
    20ac:	432c      	orrs	r4, r5
    20ae:	4648      	mov	r0, r9
    20b0:	0021      	movs	r1, r4
    20b2:	b007      	add	sp, #28
    20b4:	bc3c      	pop	{r2, r3, r4, r5}
    20b6:	4690      	mov	r8, r2
    20b8:	4699      	mov	r9, r3
    20ba:	46a2      	mov	sl, r4
    20bc:	46ab      	mov	fp, r5
    20be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c0:	4303      	orrs	r3, r0
    20c2:	4699      	mov	r9, r3
    20c4:	d04f      	beq.n	2166 <STACK_SIZE+0x166>
    20c6:	465b      	mov	r3, fp
    20c8:	2b00      	cmp	r3, #0
    20ca:	d100      	bne.n	20ce <STACK_SIZE+0xce>
    20cc:	e189      	b.n	23e2 <STACK_SIZE+0x3e2>
    20ce:	4658      	mov	r0, fp
    20d0:	f000 fad4 	bl	267c <__clzsi2>
    20d4:	0003      	movs	r3, r0
    20d6:	3b0b      	subs	r3, #11
    20d8:	2b1c      	cmp	r3, #28
    20da:	dd00      	ble.n	20de <STACK_SIZE+0xde>
    20dc:	e17a      	b.n	23d4 <STACK_SIZE+0x3d4>
    20de:	221d      	movs	r2, #29
    20e0:	1ad3      	subs	r3, r2, r3
    20e2:	003a      	movs	r2, r7
    20e4:	0001      	movs	r1, r0
    20e6:	465c      	mov	r4, fp
    20e8:	40da      	lsrs	r2, r3
    20ea:	3908      	subs	r1, #8
    20ec:	408c      	lsls	r4, r1
    20ee:	0013      	movs	r3, r2
    20f0:	408f      	lsls	r7, r1
    20f2:	4323      	orrs	r3, r4
    20f4:	469b      	mov	fp, r3
    20f6:	46b9      	mov	r9, r7
    20f8:	2300      	movs	r3, #0
    20fa:	4e2d      	ldr	r6, [pc, #180]	; (21b0 <STACK_SIZE+0x1b0>)
    20fc:	2700      	movs	r7, #0
    20fe:	1a36      	subs	r6, r6, r0
    2100:	9302      	str	r3, [sp, #8]
    2102:	e784      	b.n	200e <STACK_SIZE+0xe>
    2104:	4653      	mov	r3, sl
    2106:	4323      	orrs	r3, r4
    2108:	d12a      	bne.n	2160 <STACK_SIZE+0x160>
    210a:	2400      	movs	r4, #0
    210c:	2002      	movs	r0, #2
    210e:	e796      	b.n	203e <STACK_SIZE+0x3e>
    2110:	4653      	mov	r3, sl
    2112:	4323      	orrs	r3, r4
    2114:	d020      	beq.n	2158 <STACK_SIZE+0x158>
    2116:	2c00      	cmp	r4, #0
    2118:	d100      	bne.n	211c <STACK_SIZE+0x11c>
    211a:	e157      	b.n	23cc <STACK_SIZE+0x3cc>
    211c:	0020      	movs	r0, r4
    211e:	f000 faad 	bl	267c <__clzsi2>
    2122:	0003      	movs	r3, r0
    2124:	3b0b      	subs	r3, #11
    2126:	2b1c      	cmp	r3, #28
    2128:	dd00      	ble.n	212c <STACK_SIZE+0x12c>
    212a:	e149      	b.n	23c0 <STACK_SIZE+0x3c0>
    212c:	211d      	movs	r1, #29
    212e:	1acb      	subs	r3, r1, r3
    2130:	4651      	mov	r1, sl
    2132:	0002      	movs	r2, r0
    2134:	40d9      	lsrs	r1, r3
    2136:	4653      	mov	r3, sl
    2138:	3a08      	subs	r2, #8
    213a:	4094      	lsls	r4, r2
    213c:	4093      	lsls	r3, r2
    213e:	430c      	orrs	r4, r1
    2140:	4a1b      	ldr	r2, [pc, #108]	; (21b0 <STACK_SIZE+0x1b0>)
    2142:	1a12      	subs	r2, r2, r0
    2144:	2000      	movs	r0, #0
    2146:	e77a      	b.n	203e <STACK_SIZE+0x3e>
    2148:	2501      	movs	r5, #1
    214a:	9b01      	ldr	r3, [sp, #4]
    214c:	4c14      	ldr	r4, [pc, #80]	; (21a0 <STACK_SIZE+0x1a0>)
    214e:	401d      	ands	r5, r3
    2150:	2300      	movs	r3, #0
    2152:	2200      	movs	r2, #0
    2154:	4699      	mov	r9, r3
    2156:	e79c      	b.n	2092 <STACK_SIZE+0x92>
    2158:	2400      	movs	r4, #0
    215a:	2200      	movs	r2, #0
    215c:	2001      	movs	r0, #1
    215e:	e76e      	b.n	203e <STACK_SIZE+0x3e>
    2160:	4653      	mov	r3, sl
    2162:	2003      	movs	r0, #3
    2164:	e76b      	b.n	203e <STACK_SIZE+0x3e>
    2166:	2300      	movs	r3, #0
    2168:	469b      	mov	fp, r3
    216a:	3301      	adds	r3, #1
    216c:	2704      	movs	r7, #4
    216e:	2600      	movs	r6, #0
    2170:	9302      	str	r3, [sp, #8]
    2172:	e74c      	b.n	200e <STACK_SIZE+0xe>
    2174:	2303      	movs	r3, #3
    2176:	4681      	mov	r9, r0
    2178:	270c      	movs	r7, #12
    217a:	9302      	str	r3, [sp, #8]
    217c:	e747      	b.n	200e <STACK_SIZE+0xe>
    217e:	2280      	movs	r2, #128	; 0x80
    2180:	2300      	movs	r3, #0
    2182:	2500      	movs	r5, #0
    2184:	0312      	lsls	r2, r2, #12
    2186:	4699      	mov	r9, r3
    2188:	4c05      	ldr	r4, [pc, #20]	; (21a0 <STACK_SIZE+0x1a0>)
    218a:	e782      	b.n	2092 <STACK_SIZE+0x92>
    218c:	465c      	mov	r4, fp
    218e:	464b      	mov	r3, r9
    2190:	9802      	ldr	r0, [sp, #8]
    2192:	e76f      	b.n	2074 <STACK_SIZE+0x74>
    2194:	465c      	mov	r4, fp
    2196:	464b      	mov	r3, r9
    2198:	9501      	str	r5, [sp, #4]
    219a:	9802      	ldr	r0, [sp, #8]
    219c:	e76a      	b.n	2074 <STACK_SIZE+0x74>
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	000007ff 	.word	0x000007ff
    21a4:	fffffc01 	.word	0xfffffc01
    21a8:	000029f8 	.word	0x000029f8
    21ac:	800fffff 	.word	0x800fffff
    21b0:	fffffc0d 	.word	0xfffffc0d
    21b4:	464a      	mov	r2, r9
    21b6:	4649      	mov	r1, r9
    21b8:	0c17      	lsrs	r7, r2, #16
    21ba:	0c1a      	lsrs	r2, r3, #16
    21bc:	041b      	lsls	r3, r3, #16
    21be:	0c1b      	lsrs	r3, r3, #16
    21c0:	0408      	lsls	r0, r1, #16
    21c2:	0019      	movs	r1, r3
    21c4:	0c00      	lsrs	r0, r0, #16
    21c6:	4341      	muls	r1, r0
    21c8:	0015      	movs	r5, r2
    21ca:	4688      	mov	r8, r1
    21cc:	0019      	movs	r1, r3
    21ce:	437d      	muls	r5, r7
    21d0:	4379      	muls	r1, r7
    21d2:	9503      	str	r5, [sp, #12]
    21d4:	4689      	mov	r9, r1
    21d6:	0029      	movs	r1, r5
    21d8:	0015      	movs	r5, r2
    21da:	4345      	muls	r5, r0
    21dc:	444d      	add	r5, r9
    21de:	9502      	str	r5, [sp, #8]
    21e0:	4645      	mov	r5, r8
    21e2:	0c2d      	lsrs	r5, r5, #16
    21e4:	46aa      	mov	sl, r5
    21e6:	9d02      	ldr	r5, [sp, #8]
    21e8:	4455      	add	r5, sl
    21ea:	45a9      	cmp	r9, r5
    21ec:	d906      	bls.n	21fc <STACK_SIZE+0x1fc>
    21ee:	468a      	mov	sl, r1
    21f0:	2180      	movs	r1, #128	; 0x80
    21f2:	0249      	lsls	r1, r1, #9
    21f4:	4689      	mov	r9, r1
    21f6:	44ca      	add	sl, r9
    21f8:	4651      	mov	r1, sl
    21fa:	9103      	str	r1, [sp, #12]
    21fc:	0c29      	lsrs	r1, r5, #16
    21fe:	9104      	str	r1, [sp, #16]
    2200:	4641      	mov	r1, r8
    2202:	0409      	lsls	r1, r1, #16
    2204:	042d      	lsls	r5, r5, #16
    2206:	0c09      	lsrs	r1, r1, #16
    2208:	4688      	mov	r8, r1
    220a:	0029      	movs	r1, r5
    220c:	0c25      	lsrs	r5, r4, #16
    220e:	0424      	lsls	r4, r4, #16
    2210:	4441      	add	r1, r8
    2212:	0c24      	lsrs	r4, r4, #16
    2214:	9105      	str	r1, [sp, #20]
    2216:	0021      	movs	r1, r4
    2218:	4341      	muls	r1, r0
    221a:	4688      	mov	r8, r1
    221c:	0021      	movs	r1, r4
    221e:	4379      	muls	r1, r7
    2220:	468a      	mov	sl, r1
    2222:	4368      	muls	r0, r5
    2224:	4641      	mov	r1, r8
    2226:	4450      	add	r0, sl
    2228:	4681      	mov	r9, r0
    222a:	0c08      	lsrs	r0, r1, #16
    222c:	4448      	add	r0, r9
    222e:	436f      	muls	r7, r5
    2230:	4582      	cmp	sl, r0
    2232:	d903      	bls.n	223c <STACK_SIZE+0x23c>
    2234:	2180      	movs	r1, #128	; 0x80
    2236:	0249      	lsls	r1, r1, #9
    2238:	4689      	mov	r9, r1
    223a:	444f      	add	r7, r9
    223c:	0c01      	lsrs	r1, r0, #16
    223e:	4689      	mov	r9, r1
    2240:	0039      	movs	r1, r7
    2242:	4449      	add	r1, r9
    2244:	9102      	str	r1, [sp, #8]
    2246:	4641      	mov	r1, r8
    2248:	040f      	lsls	r7, r1, #16
    224a:	9904      	ldr	r1, [sp, #16]
    224c:	0c3f      	lsrs	r7, r7, #16
    224e:	4688      	mov	r8, r1
    2250:	0400      	lsls	r0, r0, #16
    2252:	19c0      	adds	r0, r0, r7
    2254:	4480      	add	r8, r0
    2256:	4641      	mov	r1, r8
    2258:	9104      	str	r1, [sp, #16]
    225a:	4659      	mov	r1, fp
    225c:	0c0f      	lsrs	r7, r1, #16
    225e:	0409      	lsls	r1, r1, #16
    2260:	0c09      	lsrs	r1, r1, #16
    2262:	4688      	mov	r8, r1
    2264:	4359      	muls	r1, r3
    2266:	468a      	mov	sl, r1
    2268:	0039      	movs	r1, r7
    226a:	4351      	muls	r1, r2
    226c:	4689      	mov	r9, r1
    226e:	4641      	mov	r1, r8
    2270:	434a      	muls	r2, r1
    2272:	4651      	mov	r1, sl
    2274:	0c09      	lsrs	r1, r1, #16
    2276:	468b      	mov	fp, r1
    2278:	437b      	muls	r3, r7
    227a:	18d2      	adds	r2, r2, r3
    227c:	445a      	add	r2, fp
    227e:	4293      	cmp	r3, r2
    2280:	d903      	bls.n	228a <STACK_SIZE+0x28a>
    2282:	2380      	movs	r3, #128	; 0x80
    2284:	025b      	lsls	r3, r3, #9
    2286:	469b      	mov	fp, r3
    2288:	44d9      	add	r9, fp
    228a:	4651      	mov	r1, sl
    228c:	0409      	lsls	r1, r1, #16
    228e:	0c09      	lsrs	r1, r1, #16
    2290:	468a      	mov	sl, r1
    2292:	4641      	mov	r1, r8
    2294:	4361      	muls	r1, r4
    2296:	437c      	muls	r4, r7
    2298:	0c13      	lsrs	r3, r2, #16
    229a:	0412      	lsls	r2, r2, #16
    229c:	444b      	add	r3, r9
    229e:	4452      	add	r2, sl
    22a0:	46a1      	mov	r9, r4
    22a2:	468a      	mov	sl, r1
    22a4:	003c      	movs	r4, r7
    22a6:	4641      	mov	r1, r8
    22a8:	436c      	muls	r4, r5
    22aa:	434d      	muls	r5, r1
    22ac:	4651      	mov	r1, sl
    22ae:	444d      	add	r5, r9
    22b0:	0c0f      	lsrs	r7, r1, #16
    22b2:	197d      	adds	r5, r7, r5
    22b4:	45a9      	cmp	r9, r5
    22b6:	d903      	bls.n	22c0 <STACK_SIZE+0x2c0>
    22b8:	2180      	movs	r1, #128	; 0x80
    22ba:	0249      	lsls	r1, r1, #9
    22bc:	4688      	mov	r8, r1
    22be:	4444      	add	r4, r8
    22c0:	9f04      	ldr	r7, [sp, #16]
    22c2:	9903      	ldr	r1, [sp, #12]
    22c4:	46b8      	mov	r8, r7
    22c6:	4441      	add	r1, r8
    22c8:	468b      	mov	fp, r1
    22ca:	4583      	cmp	fp, r0
    22cc:	4180      	sbcs	r0, r0
    22ce:	4241      	negs	r1, r0
    22d0:	4688      	mov	r8, r1
    22d2:	4651      	mov	r1, sl
    22d4:	0408      	lsls	r0, r1, #16
    22d6:	042f      	lsls	r7, r5, #16
    22d8:	0c00      	lsrs	r0, r0, #16
    22da:	183f      	adds	r7, r7, r0
    22dc:	4658      	mov	r0, fp
    22de:	9902      	ldr	r1, [sp, #8]
    22e0:	1810      	adds	r0, r2, r0
    22e2:	4689      	mov	r9, r1
    22e4:	4290      	cmp	r0, r2
    22e6:	4192      	sbcs	r2, r2
    22e8:	444f      	add	r7, r9
    22ea:	46ba      	mov	sl, r7
    22ec:	4252      	negs	r2, r2
    22ee:	4699      	mov	r9, r3
    22f0:	4693      	mov	fp, r2
    22f2:	44c2      	add	sl, r8
    22f4:	44d1      	add	r9, sl
    22f6:	44cb      	add	fp, r9
    22f8:	428f      	cmp	r7, r1
    22fa:	41bf      	sbcs	r7, r7
    22fc:	45c2      	cmp	sl, r8
    22fe:	4189      	sbcs	r1, r1
    2300:	4599      	cmp	r9, r3
    2302:	419b      	sbcs	r3, r3
    2304:	4593      	cmp	fp, r2
    2306:	4192      	sbcs	r2, r2
    2308:	427f      	negs	r7, r7
    230a:	4249      	negs	r1, r1
    230c:	0c2d      	lsrs	r5, r5, #16
    230e:	4252      	negs	r2, r2
    2310:	430f      	orrs	r7, r1
    2312:	425b      	negs	r3, r3
    2314:	4313      	orrs	r3, r2
    2316:	197f      	adds	r7, r7, r5
    2318:	18ff      	adds	r7, r7, r3
    231a:	465b      	mov	r3, fp
    231c:	193c      	adds	r4, r7, r4
    231e:	0ddb      	lsrs	r3, r3, #23
    2320:	9a05      	ldr	r2, [sp, #20]
    2322:	0264      	lsls	r4, r4, #9
    2324:	431c      	orrs	r4, r3
    2326:	0243      	lsls	r3, r0, #9
    2328:	4313      	orrs	r3, r2
    232a:	1e5d      	subs	r5, r3, #1
    232c:	41ab      	sbcs	r3, r5
    232e:	465a      	mov	r2, fp
    2330:	0dc0      	lsrs	r0, r0, #23
    2332:	4303      	orrs	r3, r0
    2334:	0252      	lsls	r2, r2, #9
    2336:	4313      	orrs	r3, r2
    2338:	01e2      	lsls	r2, r4, #7
    233a:	d556      	bpl.n	23ea <STACK_SIZE+0x3ea>
    233c:	2001      	movs	r0, #1
    233e:	085a      	lsrs	r2, r3, #1
    2340:	4003      	ands	r3, r0
    2342:	4313      	orrs	r3, r2
    2344:	07e2      	lsls	r2, r4, #31
    2346:	4313      	orrs	r3, r2
    2348:	0864      	lsrs	r4, r4, #1
    234a:	485a      	ldr	r0, [pc, #360]	; (24b4 <STACK_SIZE+0x4b4>)
    234c:	4460      	add	r0, ip
    234e:	2800      	cmp	r0, #0
    2350:	dd4d      	ble.n	23ee <STACK_SIZE+0x3ee>
    2352:	075a      	lsls	r2, r3, #29
    2354:	d009      	beq.n	236a <STACK_SIZE+0x36a>
    2356:	220f      	movs	r2, #15
    2358:	401a      	ands	r2, r3
    235a:	2a04      	cmp	r2, #4
    235c:	d005      	beq.n	236a <STACK_SIZE+0x36a>
    235e:	1d1a      	adds	r2, r3, #4
    2360:	429a      	cmp	r2, r3
    2362:	419b      	sbcs	r3, r3
    2364:	425b      	negs	r3, r3
    2366:	18e4      	adds	r4, r4, r3
    2368:	0013      	movs	r3, r2
    236a:	01e2      	lsls	r2, r4, #7
    236c:	d504      	bpl.n	2378 <STACK_SIZE+0x378>
    236e:	2080      	movs	r0, #128	; 0x80
    2370:	4a51      	ldr	r2, [pc, #324]	; (24b8 <STACK_SIZE+0x4b8>)
    2372:	00c0      	lsls	r0, r0, #3
    2374:	4014      	ands	r4, r2
    2376:	4460      	add	r0, ip
    2378:	4a50      	ldr	r2, [pc, #320]	; (24bc <STACK_SIZE+0x4bc>)
    237a:	4290      	cmp	r0, r2
    237c:	dd00      	ble.n	2380 <STACK_SIZE+0x380>
    237e:	e6e3      	b.n	2148 <STACK_SIZE+0x148>
    2380:	2501      	movs	r5, #1
    2382:	08db      	lsrs	r3, r3, #3
    2384:	0762      	lsls	r2, r4, #29
    2386:	431a      	orrs	r2, r3
    2388:	0264      	lsls	r4, r4, #9
    238a:	9b01      	ldr	r3, [sp, #4]
    238c:	4691      	mov	r9, r2
    238e:	0b22      	lsrs	r2, r4, #12
    2390:	0544      	lsls	r4, r0, #21
    2392:	0d64      	lsrs	r4, r4, #21
    2394:	401d      	ands	r5, r3
    2396:	e67c      	b.n	2092 <STACK_SIZE+0x92>
    2398:	2280      	movs	r2, #128	; 0x80
    239a:	4659      	mov	r1, fp
    239c:	0312      	lsls	r2, r2, #12
    239e:	4211      	tst	r1, r2
    23a0:	d008      	beq.n	23b4 <STACK_SIZE+0x3b4>
    23a2:	4214      	tst	r4, r2
    23a4:	d106      	bne.n	23b4 <STACK_SIZE+0x3b4>
    23a6:	4322      	orrs	r2, r4
    23a8:	0312      	lsls	r2, r2, #12
    23aa:	0b12      	lsrs	r2, r2, #12
    23ac:	4645      	mov	r5, r8
    23ae:	4699      	mov	r9, r3
    23b0:	4c43      	ldr	r4, [pc, #268]	; (24c0 <STACK_SIZE+0x4c0>)
    23b2:	e66e      	b.n	2092 <STACK_SIZE+0x92>
    23b4:	465b      	mov	r3, fp
    23b6:	431a      	orrs	r2, r3
    23b8:	0312      	lsls	r2, r2, #12
    23ba:	0b12      	lsrs	r2, r2, #12
    23bc:	4c40      	ldr	r4, [pc, #256]	; (24c0 <STACK_SIZE+0x4c0>)
    23be:	e668      	b.n	2092 <STACK_SIZE+0x92>
    23c0:	0003      	movs	r3, r0
    23c2:	4654      	mov	r4, sl
    23c4:	3b28      	subs	r3, #40	; 0x28
    23c6:	409c      	lsls	r4, r3
    23c8:	2300      	movs	r3, #0
    23ca:	e6b9      	b.n	2140 <STACK_SIZE+0x140>
    23cc:	f000 f956 	bl	267c <__clzsi2>
    23d0:	3020      	adds	r0, #32
    23d2:	e6a6      	b.n	2122 <STACK_SIZE+0x122>
    23d4:	0003      	movs	r3, r0
    23d6:	3b28      	subs	r3, #40	; 0x28
    23d8:	409f      	lsls	r7, r3
    23da:	2300      	movs	r3, #0
    23dc:	46bb      	mov	fp, r7
    23de:	4699      	mov	r9, r3
    23e0:	e68a      	b.n	20f8 <STACK_SIZE+0xf8>
    23e2:	f000 f94b 	bl	267c <__clzsi2>
    23e6:	3020      	adds	r0, #32
    23e8:	e674      	b.n	20d4 <STACK_SIZE+0xd4>
    23ea:	46b4      	mov	ip, r6
    23ec:	e7ad      	b.n	234a <STACK_SIZE+0x34a>
    23ee:	2501      	movs	r5, #1
    23f0:	1a2a      	subs	r2, r5, r0
    23f2:	2a38      	cmp	r2, #56	; 0x38
    23f4:	dd06      	ble.n	2404 <STACK_SIZE+0x404>
    23f6:	9b01      	ldr	r3, [sp, #4]
    23f8:	2400      	movs	r4, #0
    23fa:	401d      	ands	r5, r3
    23fc:	2300      	movs	r3, #0
    23fe:	2200      	movs	r2, #0
    2400:	4699      	mov	r9, r3
    2402:	e646      	b.n	2092 <STACK_SIZE+0x92>
    2404:	2a1f      	cmp	r2, #31
    2406:	dc21      	bgt.n	244c <STACK_SIZE+0x44c>
    2408:	2520      	movs	r5, #32
    240a:	0020      	movs	r0, r4
    240c:	1aad      	subs	r5, r5, r2
    240e:	001e      	movs	r6, r3
    2410:	40ab      	lsls	r3, r5
    2412:	40a8      	lsls	r0, r5
    2414:	40d6      	lsrs	r6, r2
    2416:	1e5d      	subs	r5, r3, #1
    2418:	41ab      	sbcs	r3, r5
    241a:	4330      	orrs	r0, r6
    241c:	4318      	orrs	r0, r3
    241e:	40d4      	lsrs	r4, r2
    2420:	0743      	lsls	r3, r0, #29
    2422:	d009      	beq.n	2438 <STACK_SIZE+0x438>
    2424:	230f      	movs	r3, #15
    2426:	4003      	ands	r3, r0
    2428:	2b04      	cmp	r3, #4
    242a:	d005      	beq.n	2438 <STACK_SIZE+0x438>
    242c:	0003      	movs	r3, r0
    242e:	1d18      	adds	r0, r3, #4
    2430:	4298      	cmp	r0, r3
    2432:	419b      	sbcs	r3, r3
    2434:	425b      	negs	r3, r3
    2436:	18e4      	adds	r4, r4, r3
    2438:	0223      	lsls	r3, r4, #8
    243a:	d521      	bpl.n	2480 <STACK_SIZE+0x480>
    243c:	2501      	movs	r5, #1
    243e:	9b01      	ldr	r3, [sp, #4]
    2440:	2401      	movs	r4, #1
    2442:	401d      	ands	r5, r3
    2444:	2300      	movs	r3, #0
    2446:	2200      	movs	r2, #0
    2448:	4699      	mov	r9, r3
    244a:	e622      	b.n	2092 <STACK_SIZE+0x92>
    244c:	251f      	movs	r5, #31
    244e:	0021      	movs	r1, r4
    2450:	426d      	negs	r5, r5
    2452:	1a28      	subs	r0, r5, r0
    2454:	40c1      	lsrs	r1, r0
    2456:	0008      	movs	r0, r1
    2458:	2a20      	cmp	r2, #32
    245a:	d01d      	beq.n	2498 <STACK_SIZE+0x498>
    245c:	355f      	adds	r5, #95	; 0x5f
    245e:	1aaa      	subs	r2, r5, r2
    2460:	4094      	lsls	r4, r2
    2462:	4323      	orrs	r3, r4
    2464:	1e5c      	subs	r4, r3, #1
    2466:	41a3      	sbcs	r3, r4
    2468:	2507      	movs	r5, #7
    246a:	4303      	orrs	r3, r0
    246c:	401d      	ands	r5, r3
    246e:	2200      	movs	r2, #0
    2470:	2d00      	cmp	r5, #0
    2472:	d009      	beq.n	2488 <STACK_SIZE+0x488>
    2474:	220f      	movs	r2, #15
    2476:	2400      	movs	r4, #0
    2478:	401a      	ands	r2, r3
    247a:	0018      	movs	r0, r3
    247c:	2a04      	cmp	r2, #4
    247e:	d1d6      	bne.n	242e <STACK_SIZE+0x42e>
    2480:	0003      	movs	r3, r0
    2482:	0765      	lsls	r5, r4, #29
    2484:	0264      	lsls	r4, r4, #9
    2486:	0b22      	lsrs	r2, r4, #12
    2488:	08db      	lsrs	r3, r3, #3
    248a:	432b      	orrs	r3, r5
    248c:	2501      	movs	r5, #1
    248e:	4699      	mov	r9, r3
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	2400      	movs	r4, #0
    2494:	401d      	ands	r5, r3
    2496:	e5fc      	b.n	2092 <STACK_SIZE+0x92>
    2498:	2400      	movs	r4, #0
    249a:	e7e2      	b.n	2462 <STACK_SIZE+0x462>
    249c:	2280      	movs	r2, #128	; 0x80
    249e:	2501      	movs	r5, #1
    24a0:	0312      	lsls	r2, r2, #12
    24a2:	4322      	orrs	r2, r4
    24a4:	9901      	ldr	r1, [sp, #4]
    24a6:	0312      	lsls	r2, r2, #12
    24a8:	0b12      	lsrs	r2, r2, #12
    24aa:	400d      	ands	r5, r1
    24ac:	4699      	mov	r9, r3
    24ae:	4c04      	ldr	r4, [pc, #16]	; (24c0 <STACK_SIZE+0x4c0>)
    24b0:	e5ef      	b.n	2092 <STACK_SIZE+0x92>
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	000003ff 	.word	0x000003ff
    24b8:	feffffff 	.word	0xfeffffff
    24bc:	000007fe 	.word	0x000007fe
    24c0:	000007ff 	.word	0x000007ff

000024c4 <__aeabi_f2d>:
    24c4:	0041      	lsls	r1, r0, #1
    24c6:	0e09      	lsrs	r1, r1, #24
    24c8:	1c4b      	adds	r3, r1, #1
    24ca:	b570      	push	{r4, r5, r6, lr}
    24cc:	b2db      	uxtb	r3, r3
    24ce:	0246      	lsls	r6, r0, #9
    24d0:	0a75      	lsrs	r5, r6, #9
    24d2:	0fc4      	lsrs	r4, r0, #31
    24d4:	2b01      	cmp	r3, #1
    24d6:	dd14      	ble.n	2502 <__aeabi_f2d+0x3e>
    24d8:	23e0      	movs	r3, #224	; 0xe0
    24da:	009b      	lsls	r3, r3, #2
    24dc:	076d      	lsls	r5, r5, #29
    24de:	0b36      	lsrs	r6, r6, #12
    24e0:	18cb      	adds	r3, r1, r3
    24e2:	2100      	movs	r1, #0
    24e4:	0d0a      	lsrs	r2, r1, #20
    24e6:	0028      	movs	r0, r5
    24e8:	0512      	lsls	r2, r2, #20
    24ea:	4d1c      	ldr	r5, [pc, #112]	; (255c <__aeabi_f2d+0x98>)
    24ec:	4332      	orrs	r2, r6
    24ee:	055b      	lsls	r3, r3, #21
    24f0:	402a      	ands	r2, r5
    24f2:	085b      	lsrs	r3, r3, #1
    24f4:	4313      	orrs	r3, r2
    24f6:	005b      	lsls	r3, r3, #1
    24f8:	07e4      	lsls	r4, r4, #31
    24fa:	085b      	lsrs	r3, r3, #1
    24fc:	4323      	orrs	r3, r4
    24fe:	0019      	movs	r1, r3
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	2900      	cmp	r1, #0
    2504:	d114      	bne.n	2530 <__aeabi_f2d+0x6c>
    2506:	2d00      	cmp	r5, #0
    2508:	d01e      	beq.n	2548 <__aeabi_f2d+0x84>
    250a:	0028      	movs	r0, r5
    250c:	f000 f8b6 	bl	267c <__clzsi2>
    2510:	280a      	cmp	r0, #10
    2512:	dc1c      	bgt.n	254e <__aeabi_f2d+0x8a>
    2514:	230b      	movs	r3, #11
    2516:	002a      	movs	r2, r5
    2518:	1a1b      	subs	r3, r3, r0
    251a:	40da      	lsrs	r2, r3
    251c:	0003      	movs	r3, r0
    251e:	3315      	adds	r3, #21
    2520:	409d      	lsls	r5, r3
    2522:	4b0f      	ldr	r3, [pc, #60]	; (2560 <__aeabi_f2d+0x9c>)
    2524:	0312      	lsls	r2, r2, #12
    2526:	1a1b      	subs	r3, r3, r0
    2528:	055b      	lsls	r3, r3, #21
    252a:	0b16      	lsrs	r6, r2, #12
    252c:	0d5b      	lsrs	r3, r3, #21
    252e:	e7d8      	b.n	24e2 <__aeabi_f2d+0x1e>
    2530:	2d00      	cmp	r5, #0
    2532:	d006      	beq.n	2542 <__aeabi_f2d+0x7e>
    2534:	0b32      	lsrs	r2, r6, #12
    2536:	2680      	movs	r6, #128	; 0x80
    2538:	0336      	lsls	r6, r6, #12
    253a:	076d      	lsls	r5, r5, #29
    253c:	4316      	orrs	r6, r2
    253e:	4b09      	ldr	r3, [pc, #36]	; (2564 <__aeabi_f2d+0xa0>)
    2540:	e7cf      	b.n	24e2 <__aeabi_f2d+0x1e>
    2542:	4b08      	ldr	r3, [pc, #32]	; (2564 <__aeabi_f2d+0xa0>)
    2544:	2600      	movs	r6, #0
    2546:	e7cc      	b.n	24e2 <__aeabi_f2d+0x1e>
    2548:	2300      	movs	r3, #0
    254a:	2600      	movs	r6, #0
    254c:	e7c9      	b.n	24e2 <__aeabi_f2d+0x1e>
    254e:	0003      	movs	r3, r0
    2550:	002a      	movs	r2, r5
    2552:	3b0b      	subs	r3, #11
    2554:	409a      	lsls	r2, r3
    2556:	2500      	movs	r5, #0
    2558:	e7e3      	b.n	2522 <__aeabi_f2d+0x5e>
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	800fffff 	.word	0x800fffff
    2560:	00000389 	.word	0x00000389
    2564:	000007ff 	.word	0x000007ff

00002568 <__aeabi_d2f>:
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	004c      	lsls	r4, r1, #1
    256c:	0d64      	lsrs	r4, r4, #21
    256e:	030b      	lsls	r3, r1, #12
    2570:	1c62      	adds	r2, r4, #1
    2572:	0f45      	lsrs	r5, r0, #29
    2574:	0a5b      	lsrs	r3, r3, #9
    2576:	0552      	lsls	r2, r2, #21
    2578:	432b      	orrs	r3, r5
    257a:	0fc9      	lsrs	r1, r1, #31
    257c:	00c5      	lsls	r5, r0, #3
    257e:	0d52      	lsrs	r2, r2, #21
    2580:	2a01      	cmp	r2, #1
    2582:	dd28      	ble.n	25d6 <__aeabi_d2f+0x6e>
    2584:	4a3a      	ldr	r2, [pc, #232]	; (2670 <__aeabi_d2f+0x108>)
    2586:	18a6      	adds	r6, r4, r2
    2588:	2efe      	cmp	r6, #254	; 0xfe
    258a:	dc1b      	bgt.n	25c4 <__aeabi_d2f+0x5c>
    258c:	2e00      	cmp	r6, #0
    258e:	dd3e      	ble.n	260e <__aeabi_d2f+0xa6>
    2590:	0180      	lsls	r0, r0, #6
    2592:	0002      	movs	r2, r0
    2594:	1e50      	subs	r0, r2, #1
    2596:	4182      	sbcs	r2, r0
    2598:	0f6d      	lsrs	r5, r5, #29
    259a:	432a      	orrs	r2, r5
    259c:	00db      	lsls	r3, r3, #3
    259e:	4313      	orrs	r3, r2
    25a0:	075a      	lsls	r2, r3, #29
    25a2:	d004      	beq.n	25ae <__aeabi_d2f+0x46>
    25a4:	220f      	movs	r2, #15
    25a6:	401a      	ands	r2, r3
    25a8:	2a04      	cmp	r2, #4
    25aa:	d000      	beq.n	25ae <__aeabi_d2f+0x46>
    25ac:	3304      	adds	r3, #4
    25ae:	2280      	movs	r2, #128	; 0x80
    25b0:	04d2      	lsls	r2, r2, #19
    25b2:	401a      	ands	r2, r3
    25b4:	d05a      	beq.n	266c <__aeabi_d2f+0x104>
    25b6:	3601      	adds	r6, #1
    25b8:	2eff      	cmp	r6, #255	; 0xff
    25ba:	d003      	beq.n	25c4 <__aeabi_d2f+0x5c>
    25bc:	019b      	lsls	r3, r3, #6
    25be:	0a5b      	lsrs	r3, r3, #9
    25c0:	b2f4      	uxtb	r4, r6
    25c2:	e001      	b.n	25c8 <__aeabi_d2f+0x60>
    25c4:	24ff      	movs	r4, #255	; 0xff
    25c6:	2300      	movs	r3, #0
    25c8:	0258      	lsls	r0, r3, #9
    25ca:	05e4      	lsls	r4, r4, #23
    25cc:	0a40      	lsrs	r0, r0, #9
    25ce:	07c9      	lsls	r1, r1, #31
    25d0:	4320      	orrs	r0, r4
    25d2:	4308      	orrs	r0, r1
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d6:	2c00      	cmp	r4, #0
    25d8:	d007      	beq.n	25ea <__aeabi_d2f+0x82>
    25da:	431d      	orrs	r5, r3
    25dc:	d0f2      	beq.n	25c4 <__aeabi_d2f+0x5c>
    25de:	2080      	movs	r0, #128	; 0x80
    25e0:	00db      	lsls	r3, r3, #3
    25e2:	0480      	lsls	r0, r0, #18
    25e4:	4303      	orrs	r3, r0
    25e6:	26ff      	movs	r6, #255	; 0xff
    25e8:	e7da      	b.n	25a0 <__aeabi_d2f+0x38>
    25ea:	432b      	orrs	r3, r5
    25ec:	d003      	beq.n	25f6 <__aeabi_d2f+0x8e>
    25ee:	2305      	movs	r3, #5
    25f0:	08db      	lsrs	r3, r3, #3
    25f2:	2cff      	cmp	r4, #255	; 0xff
    25f4:	d003      	beq.n	25fe <__aeabi_d2f+0x96>
    25f6:	025b      	lsls	r3, r3, #9
    25f8:	0a5b      	lsrs	r3, r3, #9
    25fa:	b2e4      	uxtb	r4, r4
    25fc:	e7e4      	b.n	25c8 <__aeabi_d2f+0x60>
    25fe:	2b00      	cmp	r3, #0
    2600:	d032      	beq.n	2668 <__aeabi_d2f+0x100>
    2602:	2080      	movs	r0, #128	; 0x80
    2604:	03c0      	lsls	r0, r0, #15
    2606:	4303      	orrs	r3, r0
    2608:	025b      	lsls	r3, r3, #9
    260a:	0a5b      	lsrs	r3, r3, #9
    260c:	e7dc      	b.n	25c8 <__aeabi_d2f+0x60>
    260e:	0032      	movs	r2, r6
    2610:	3217      	adds	r2, #23
    2612:	db14      	blt.n	263e <__aeabi_d2f+0xd6>
    2614:	2280      	movs	r2, #128	; 0x80
    2616:	271e      	movs	r7, #30
    2618:	0412      	lsls	r2, r2, #16
    261a:	4313      	orrs	r3, r2
    261c:	1bbf      	subs	r7, r7, r6
    261e:	2f1f      	cmp	r7, #31
    2620:	dc0f      	bgt.n	2642 <__aeabi_d2f+0xda>
    2622:	4a14      	ldr	r2, [pc, #80]	; (2674 <__aeabi_d2f+0x10c>)
    2624:	4694      	mov	ip, r2
    2626:	4464      	add	r4, ip
    2628:	002a      	movs	r2, r5
    262a:	40a5      	lsls	r5, r4
    262c:	002e      	movs	r6, r5
    262e:	40a3      	lsls	r3, r4
    2630:	1e75      	subs	r5, r6, #1
    2632:	41ae      	sbcs	r6, r5
    2634:	40fa      	lsrs	r2, r7
    2636:	4333      	orrs	r3, r6
    2638:	4313      	orrs	r3, r2
    263a:	2600      	movs	r6, #0
    263c:	e7b0      	b.n	25a0 <__aeabi_d2f+0x38>
    263e:	2400      	movs	r4, #0
    2640:	e7d5      	b.n	25ee <__aeabi_d2f+0x86>
    2642:	2202      	movs	r2, #2
    2644:	4252      	negs	r2, r2
    2646:	1b96      	subs	r6, r2, r6
    2648:	001a      	movs	r2, r3
    264a:	40f2      	lsrs	r2, r6
    264c:	2f20      	cmp	r7, #32
    264e:	d009      	beq.n	2664 <__aeabi_d2f+0xfc>
    2650:	4809      	ldr	r0, [pc, #36]	; (2678 <__aeabi_d2f+0x110>)
    2652:	4684      	mov	ip, r0
    2654:	4464      	add	r4, ip
    2656:	40a3      	lsls	r3, r4
    2658:	432b      	orrs	r3, r5
    265a:	1e5d      	subs	r5, r3, #1
    265c:	41ab      	sbcs	r3, r5
    265e:	2600      	movs	r6, #0
    2660:	4313      	orrs	r3, r2
    2662:	e79d      	b.n	25a0 <__aeabi_d2f+0x38>
    2664:	2300      	movs	r3, #0
    2666:	e7f7      	b.n	2658 <__aeabi_d2f+0xf0>
    2668:	2300      	movs	r3, #0
    266a:	e7ad      	b.n	25c8 <__aeabi_d2f+0x60>
    266c:	0034      	movs	r4, r6
    266e:	e7bf      	b.n	25f0 <__aeabi_d2f+0x88>
    2670:	fffffc80 	.word	0xfffffc80
    2674:	fffffc82 	.word	0xfffffc82
    2678:	fffffca2 	.word	0xfffffca2

0000267c <__clzsi2>:
    267c:	211c      	movs	r1, #28
    267e:	2301      	movs	r3, #1
    2680:	041b      	lsls	r3, r3, #16
    2682:	4298      	cmp	r0, r3
    2684:	d301      	bcc.n	268a <__clzsi2+0xe>
    2686:	0c00      	lsrs	r0, r0, #16
    2688:	3910      	subs	r1, #16
    268a:	0a1b      	lsrs	r3, r3, #8
    268c:	4298      	cmp	r0, r3
    268e:	d301      	bcc.n	2694 <__clzsi2+0x18>
    2690:	0a00      	lsrs	r0, r0, #8
    2692:	3908      	subs	r1, #8
    2694:	091b      	lsrs	r3, r3, #4
    2696:	4298      	cmp	r0, r3
    2698:	d301      	bcc.n	269e <__clzsi2+0x22>
    269a:	0900      	lsrs	r0, r0, #4
    269c:	3904      	subs	r1, #4
    269e:	a202      	add	r2, pc, #8	; (adr r2, 26a8 <__clzsi2+0x2c>)
    26a0:	5c10      	ldrb	r0, [r2, r0]
    26a2:	1840      	adds	r0, r0, r1
    26a4:	4770      	bx	lr
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	02020304 	.word	0x02020304
    26ac:	01010101 	.word	0x01010101
	...

000026b8 <__libc_init_array>:
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	4e0d      	ldr	r6, [pc, #52]	; (26f0 <__libc_init_array+0x38>)
    26bc:	4d0d      	ldr	r5, [pc, #52]	; (26f4 <__libc_init_array+0x3c>)
    26be:	2400      	movs	r4, #0
    26c0:	1bad      	subs	r5, r5, r6
    26c2:	10ad      	asrs	r5, r5, #2
    26c4:	d005      	beq.n	26d2 <__libc_init_array+0x1a>
    26c6:	00a3      	lsls	r3, r4, #2
    26c8:	58f3      	ldr	r3, [r6, r3]
    26ca:	3401      	adds	r4, #1
    26cc:	4798      	blx	r3
    26ce:	42a5      	cmp	r5, r4
    26d0:	d1f9      	bne.n	26c6 <__libc_init_array+0xe>
    26d2:	f000 f9b3 	bl	2a3c <_init>
    26d6:	4e08      	ldr	r6, [pc, #32]	; (26f8 <__libc_init_array+0x40>)
    26d8:	4d08      	ldr	r5, [pc, #32]	; (26fc <__libc_init_array+0x44>)
    26da:	2400      	movs	r4, #0
    26dc:	1bad      	subs	r5, r5, r6
    26de:	10ad      	asrs	r5, r5, #2
    26e0:	d005      	beq.n	26ee <__libc_init_array+0x36>
    26e2:	00a3      	lsls	r3, r4, #2
    26e4:	58f3      	ldr	r3, [r6, r3]
    26e6:	3401      	adds	r4, #1
    26e8:	4798      	blx	r3
    26ea:	42a5      	cmp	r5, r4
    26ec:	d1f9      	bne.n	26e2 <__libc_init_array+0x2a>
    26ee:	bd70      	pop	{r4, r5, r6, pc}
    26f0:	00002a48 	.word	0x00002a48
    26f4:	00002a48 	.word	0x00002a48
    26f8:	00002a48 	.word	0x00002a48
    26fc:	00002a50 	.word	0x00002a50

00002700 <register_fini>:
    2700:	4b03      	ldr	r3, [pc, #12]	; (2710 <register_fini+0x10>)
    2702:	b510      	push	{r4, lr}
    2704:	2b00      	cmp	r3, #0
    2706:	d002      	beq.n	270e <register_fini+0xe>
    2708:	4802      	ldr	r0, [pc, #8]	; (2714 <register_fini+0x14>)
    270a:	f000 f805 	bl	2718 <atexit>
    270e:	bd10      	pop	{r4, pc}
    2710:	00000000 	.word	0x00000000
    2714:	00002729 	.word	0x00002729

00002718 <atexit>:
    2718:	b510      	push	{r4, lr}
    271a:	0001      	movs	r1, r0
    271c:	2300      	movs	r3, #0
    271e:	2200      	movs	r2, #0
    2720:	2000      	movs	r0, #0
    2722:	f000 f81f 	bl	2764 <__register_exitproc>
    2726:	bd10      	pop	{r4, pc}

00002728 <__libc_fini_array>:
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	4b09      	ldr	r3, [pc, #36]	; (2750 <__libc_fini_array+0x28>)
    272c:	4c09      	ldr	r4, [pc, #36]	; (2754 <__libc_fini_array+0x2c>)
    272e:	1ae4      	subs	r4, r4, r3
    2730:	10a4      	asrs	r4, r4, #2
    2732:	d009      	beq.n	2748 <__libc_fini_array+0x20>
    2734:	4a08      	ldr	r2, [pc, #32]	; (2758 <__libc_fini_array+0x30>)
    2736:	18a5      	adds	r5, r4, r2
    2738:	00ad      	lsls	r5, r5, #2
    273a:	18ed      	adds	r5, r5, r3
    273c:	682b      	ldr	r3, [r5, #0]
    273e:	3c01      	subs	r4, #1
    2740:	4798      	blx	r3
    2742:	3d04      	subs	r5, #4
    2744:	2c00      	cmp	r4, #0
    2746:	d1f9      	bne.n	273c <__libc_fini_array+0x14>
    2748:	f000 f982 	bl	2a50 <_fini>
    274c:	bd70      	pop	{r4, r5, r6, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	00002a5c 	.word	0x00002a5c
    2754:	00002a60 	.word	0x00002a60
    2758:	3fffffff 	.word	0x3fffffff

0000275c <__retarget_lock_acquire_recursive>:
    275c:	4770      	bx	lr
    275e:	46c0      	nop			; (mov r8, r8)

00002760 <__retarget_lock_release_recursive>:
    2760:	4770      	bx	lr
    2762:	46c0      	nop			; (mov r8, r8)

00002764 <__register_exitproc>:
    2764:	b5f0      	push	{r4, r5, r6, r7, lr}
    2766:	464e      	mov	r6, r9
    2768:	4645      	mov	r5, r8
    276a:	46de      	mov	lr, fp
    276c:	4657      	mov	r7, sl
    276e:	b5e0      	push	{r5, r6, r7, lr}
    2770:	4d36      	ldr	r5, [pc, #216]	; (284c <__register_exitproc+0xe8>)
    2772:	b083      	sub	sp, #12
    2774:	0006      	movs	r6, r0
    2776:	6828      	ldr	r0, [r5, #0]
    2778:	4698      	mov	r8, r3
    277a:	000f      	movs	r7, r1
    277c:	4691      	mov	r9, r2
    277e:	f7ff ffed 	bl	275c <__retarget_lock_acquire_recursive>
    2782:	4b33      	ldr	r3, [pc, #204]	; (2850 <__register_exitproc+0xec>)
    2784:	681c      	ldr	r4, [r3, #0]
    2786:	23a4      	movs	r3, #164	; 0xa4
    2788:	005b      	lsls	r3, r3, #1
    278a:	58e0      	ldr	r0, [r4, r3]
    278c:	2800      	cmp	r0, #0
    278e:	d052      	beq.n	2836 <__register_exitproc+0xd2>
    2790:	6843      	ldr	r3, [r0, #4]
    2792:	2b1f      	cmp	r3, #31
    2794:	dc13      	bgt.n	27be <__register_exitproc+0x5a>
    2796:	1c5a      	adds	r2, r3, #1
    2798:	9201      	str	r2, [sp, #4]
    279a:	2e00      	cmp	r6, #0
    279c:	d128      	bne.n	27f0 <__register_exitproc+0x8c>
    279e:	9a01      	ldr	r2, [sp, #4]
    27a0:	3302      	adds	r3, #2
    27a2:	009b      	lsls	r3, r3, #2
    27a4:	6042      	str	r2, [r0, #4]
    27a6:	501f      	str	r7, [r3, r0]
    27a8:	6828      	ldr	r0, [r5, #0]
    27aa:	f7ff ffd9 	bl	2760 <__retarget_lock_release_recursive>
    27ae:	2000      	movs	r0, #0
    27b0:	b003      	add	sp, #12
    27b2:	bc3c      	pop	{r2, r3, r4, r5}
    27b4:	4690      	mov	r8, r2
    27b6:	4699      	mov	r9, r3
    27b8:	46a2      	mov	sl, r4
    27ba:	46ab      	mov	fp, r5
    27bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27be:	4b25      	ldr	r3, [pc, #148]	; (2854 <__register_exitproc+0xf0>)
    27c0:	2b00      	cmp	r3, #0
    27c2:	d03d      	beq.n	2840 <__register_exitproc+0xdc>
    27c4:	20c8      	movs	r0, #200	; 0xc8
    27c6:	0040      	lsls	r0, r0, #1
    27c8:	e000      	b.n	27cc <__register_exitproc+0x68>
    27ca:	bf00      	nop
    27cc:	2800      	cmp	r0, #0
    27ce:	d037      	beq.n	2840 <__register_exitproc+0xdc>
    27d0:	22a4      	movs	r2, #164	; 0xa4
    27d2:	2300      	movs	r3, #0
    27d4:	0052      	lsls	r2, r2, #1
    27d6:	58a1      	ldr	r1, [r4, r2]
    27d8:	6043      	str	r3, [r0, #4]
    27da:	6001      	str	r1, [r0, #0]
    27dc:	50a0      	str	r0, [r4, r2]
    27de:	3240      	adds	r2, #64	; 0x40
    27e0:	5083      	str	r3, [r0, r2]
    27e2:	3204      	adds	r2, #4
    27e4:	5083      	str	r3, [r0, r2]
    27e6:	3301      	adds	r3, #1
    27e8:	9301      	str	r3, [sp, #4]
    27ea:	2300      	movs	r3, #0
    27ec:	2e00      	cmp	r6, #0
    27ee:	d0d6      	beq.n	279e <__register_exitproc+0x3a>
    27f0:	009a      	lsls	r2, r3, #2
    27f2:	4692      	mov	sl, r2
    27f4:	4482      	add	sl, r0
    27f6:	464a      	mov	r2, r9
    27f8:	2188      	movs	r1, #136	; 0x88
    27fa:	4654      	mov	r4, sl
    27fc:	5062      	str	r2, [r4, r1]
    27fe:	22c4      	movs	r2, #196	; 0xc4
    2800:	0052      	lsls	r2, r2, #1
    2802:	4691      	mov	r9, r2
    2804:	4481      	add	r9, r0
    2806:	464a      	mov	r2, r9
    2808:	3987      	subs	r1, #135	; 0x87
    280a:	4099      	lsls	r1, r3
    280c:	6812      	ldr	r2, [r2, #0]
    280e:	468b      	mov	fp, r1
    2810:	430a      	orrs	r2, r1
    2812:	4694      	mov	ip, r2
    2814:	464a      	mov	r2, r9
    2816:	4661      	mov	r1, ip
    2818:	6011      	str	r1, [r2, #0]
    281a:	2284      	movs	r2, #132	; 0x84
    281c:	4641      	mov	r1, r8
    281e:	0052      	lsls	r2, r2, #1
    2820:	50a1      	str	r1, [r4, r2]
    2822:	2e02      	cmp	r6, #2
    2824:	d1bb      	bne.n	279e <__register_exitproc+0x3a>
    2826:	0002      	movs	r2, r0
    2828:	465c      	mov	r4, fp
    282a:	328d      	adds	r2, #141	; 0x8d
    282c:	32ff      	adds	r2, #255	; 0xff
    282e:	6811      	ldr	r1, [r2, #0]
    2830:	430c      	orrs	r4, r1
    2832:	6014      	str	r4, [r2, #0]
    2834:	e7b3      	b.n	279e <__register_exitproc+0x3a>
    2836:	0020      	movs	r0, r4
    2838:	304d      	adds	r0, #77	; 0x4d
    283a:	30ff      	adds	r0, #255	; 0xff
    283c:	50e0      	str	r0, [r4, r3]
    283e:	e7a7      	b.n	2790 <__register_exitproc+0x2c>
    2840:	6828      	ldr	r0, [r5, #0]
    2842:	f7ff ff8d 	bl	2760 <__retarget_lock_release_recursive>
    2846:	2001      	movs	r0, #1
    2848:	4240      	negs	r0, r0
    284a:	e7b1      	b.n	27b0 <__register_exitproc+0x4c>
    284c:	20000430 	.word	0x20000430
    2850:	00002a38 	.word	0x00002a38
    2854:	00000000 	.word	0x00000000
    2858:	0000029c 	.word	0x0000029c
    285c:	00000372 	.word	0x00000372
    2860:	0000035a 	.word	0x0000035a
    2864:	00000342 	.word	0x00000342
    2868:	00000326 	.word	0x00000326
    286c:	0000030e 	.word	0x0000030e
    2870:	000002f6 	.word	0x000002f6
    2874:	000002de 	.word	0x000002de
    2878:	000002c6 	.word	0x000002c6
    287c:	000002ae 	.word	0x000002ae
    2880:	00000286 	.word	0x00000286
    2884:	00000f2c 	.word	0x00000f2c
    2888:	00000e3c 	.word	0x00000e3c
    288c:	00000f2a 	.word	0x00000f2a
    2890:	00000e4c 	.word	0x00000e4c
    2894:	00000f2c 	.word	0x00000f2c
    2898:	00000e68 	.word	0x00000e68
    289c:	00000e84 	.word	0x00000e84
    28a0:	00000e84 	.word	0x00000e84
    28a4:	00000e84 	.word	0x00000e84
    28a8:	00000e84 	.word	0x00000e84
    28ac:	00000e84 	.word	0x00000e84
    28b0:	00000e84 	.word	0x00000e84
    28b4:	00000e84 	.word	0x00000e84
    28b8:	00000e84 	.word	0x00000e84
    28bc:	00000e84 	.word	0x00000e84
    28c0:	00000e84 	.word	0x00000e84
    28c4:	00000e84 	.word	0x00000e84
    28c8:	00000e84 	.word	0x00000e84
    28cc:	00000e84 	.word	0x00000e84
    28d0:	00000e84 	.word	0x00000e84
    28d4:	00000e84 	.word	0x00000e84
    28d8:	00000e84 	.word	0x00000e84
    28dc:	00000e84 	.word	0x00000e84
    28e0:	00000e84 	.word	0x00000e84
    28e4:	00000e84 	.word	0x00000e84
    28e8:	00000e84 	.word	0x00000e84
    28ec:	00000e84 	.word	0x00000e84
    28f0:	00000e84 	.word	0x00000e84
    28f4:	00000e84 	.word	0x00000e84
    28f8:	00000e84 	.word	0x00000e84
    28fc:	00000e84 	.word	0x00000e84
    2900:	00000e84 	.word	0x00000e84
    2904:	00000e84 	.word	0x00000e84
    2908:	00000e84 	.word	0x00000e84
    290c:	00000e84 	.word	0x00000e84
    2910:	00000e84 	.word	0x00000e84
    2914:	00000e84 	.word	0x00000e84
    2918:	00000e84 	.word	0x00000e84
    291c:	00000e84 	.word	0x00000e84
    2920:	00000e84 	.word	0x00000e84
    2924:	00000e84 	.word	0x00000e84
    2928:	00000e84 	.word	0x00000e84
    292c:	00000ee6 	.word	0x00000ee6
    2930:	00000eea 	.word	0x00000eea
    2934:	00000f08 	.word	0x00000f08
    2938:	00000f0c 	.word	0x00000f0c
    293c:	65707320 	.word	0x65707320
    2940:	3d206465 	.word	0x3d206465
    2944:	00000020 	.word	0x00000020
    2948:	61747320 	.word	0x61747320
    294c:	61207472 	.word	0x61207472
    2950:	656c676e 	.word	0x656c676e
    2954:	00203d20 	.word	0x00203d20
    2958:	646e6520 	.word	0x646e6520
    295c:	676e6120 	.word	0x676e6120
    2960:	3d20656c 	.word	0x3d20656c
    2964:	00000020 	.word	0x00000020
    2968:	696f7020 	.word	0x696f7020
    296c:	3d20746e 	.word	0x3d20746e
    2970:	00000020 	.word	0x00000020
    2974:	6c6c6548 	.word	0x6c6c6548
    2978:	6f57206f 	.word	0x6f57206f
    297c:	21646c72 	.word	0x21646c72
    2980:	00000000 	.word	0x00000000
    2984:	202d2d20 	.word	0x202d2d20
    2988:	65657073 	.word	0x65657073
    298c:	656d2064 	.word	0x656d2064
    2990:	72757361 	.word	0x72757361
    2994:	6e656d65 	.word	0x6e656d65
    2998:	2d2d2074 	.word	0x2d2d2074
    299c:	00000000 	.word	0x00000000
    29a0:	203d2078 	.word	0x203d2078
    29a4:	00000000 	.word	0x00000000
    29a8:	203d2079 	.word	0x203d2079
    29ac:	00000000 	.word	0x00000000
    29b0:	203d207a 	.word	0x203d207a
    29b4:	00000000 	.word	0x00000000
    29b8:	000017f0 	.word	0x000017f0
    29bc:	00001740 	.word	0x00001740
    29c0:	00001740 	.word	0x00001740
    29c4:	0000173e 	.word	0x0000173e
    29c8:	000017e2 	.word	0x000017e2
    29cc:	000017e2 	.word	0x000017e2
    29d0:	000017d8 	.word	0x000017d8
    29d4:	0000173e 	.word	0x0000173e
    29d8:	000017e2 	.word	0x000017e2
    29dc:	000017d8 	.word	0x000017d8
    29e0:	000017e2 	.word	0x000017e2
    29e4:	0000173e 	.word	0x0000173e
    29e8:	000017e8 	.word	0x000017e8
    29ec:	000017e8 	.word	0x000017e8
    29f0:	000017e8 	.word	0x000017e8
    29f4:	00001878 	.word	0x00001878
    29f8:	000021b4 	.word	0x000021b4
    29fc:	00002074 	.word	0x00002074
    2a00:	00002074 	.word	0x00002074
    2a04:	00002070 	.word	0x00002070
    2a08:	0000218c 	.word	0x0000218c
    2a0c:	0000218c 	.word	0x0000218c
    2a10:	0000217e 	.word	0x0000217e
    2a14:	00002070 	.word	0x00002070
    2a18:	0000218c 	.word	0x0000218c
    2a1c:	0000217e 	.word	0x0000217e
    2a20:	0000218c 	.word	0x0000218c
    2a24:	00002070 	.word	0x00002070
    2a28:	00002194 	.word	0x00002194
    2a2c:	00002194 	.word	0x00002194
    2a30:	00002194 	.word	0x00002194
    2a34:	00002398 	.word	0x00002398

00002a38 <_global_impure_ptr>:
    2a38:	20000008                                ... 

00002a3c <_init>:
    2a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a42:	bc08      	pop	{r3}
    2a44:	469e      	mov	lr, r3
    2a46:	4770      	bx	lr

00002a48 <__init_array_start>:
    2a48:	00002701 	.word	0x00002701

00002a4c <__frame_dummy_init_array_entry>:
    2a4c:	000000dd                                ....

00002a50 <_fini>:
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a56:	bc08      	pop	{r3}
    2a58:	469e      	mov	lr, r3
    2a5a:	4770      	bx	lr

00002a5c <__fini_array_start>:
    2a5c:	000000b5 	.word	0x000000b5
